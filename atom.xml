<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sin5&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.sin5th.com/"/>
  <updated>2017-05-20T15:55:02.000Z</updated>
  <id>http://blog.sin5th.com/</id>
  
  <author>
    <name>武鑫</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2017-05-20</title>
    <link href="http://blog.sin5th.com/2017/05/20/2017-05-20/"/>
    <id>http://blog.sin5th.com/2017/05/20/2017-05-20/</id>
    <published>2017-05-20T14:28:29.000Z</published>
    <updated>2017-05-20T15:55:02.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hr-sect">Hack ╮(￣▽￣)╭ News</div>



<div class="hr-sect">Tech (￣▽￣)~* Learning</div>



<div class="hr-sect">Book ╰(￣▽￣)╭ Reading</div>

<h1 id="很感谢你能来不遗憾你走开"><a href="#《很感谢你能来，不遗憾你走开》" class="headerlink" title="《很感谢你能来，不遗憾你走开》"></a>《很感谢你能来，不遗憾你走开》</h1><h2 id="为了合群"><a href="#为了合群" class="headerlink" title="为了合群"></a>为了合群</h2><p>为了不被说成孤僻的人，事事应允，事事迁就。如果为融入一个集体需要放弃自己的需要，这往往是堕落的开始。</p>
<h2 id="同道中人合而不群"><a href="#同道中人，合而不群" class="headerlink" title="同道中人，合而不群"></a>同道中人，合而不群</h2><p>当你成为了自己，确实地提升后，还会有意气相投之人。</p>
<h1 id="程序员必读之软件架构"><a href="#《程序员必读之软件架构》" class="headerlink" title="《程序员必读之软件架构》"></a>《程序员必读之软件架构》</h1><h2 id="草图要表意完整-统一"><a href="#草图要表意完整、统一" class="headerlink" title="草图要表意完整、统一"></a>草图要表意完整、统一</h2><p>只在图中的某几个框体上标注技术（比如编程语言）会让人感到困惑，究竟是因为其他的框体也同属于表明技术的模块，还是有什么别的用意。如果是前者，那么应该用更大的框将他们括起来，保证同围度的框体在架构上也保持着相等的粒度。</p>
<h2 id="草图要表意简洁"><a href="#草图要表意简洁" class="headerlink" title="草图要表意简洁"></a>草图要表意简洁</h2><p>过多的框线会让人晕头转向，他们即找了解架构不到入口，也不能在理解的过程中拥有连贯的思维（因为总会被多余的连线吸引走）。</p>
<h2 id="草图要有效率-有意义"><a href="#草图要有效率、有意义" class="headerlink" title="草图要有效率、有意义"></a>草图要有效率、有意义</h2><p>visio 在绘制架构图中，除了增加学习成本之外，没有太多好处。那些方方正正、垒墙式的模块，也只能让人炫目，不足以表达架构的意义。</p>
<h1 id="一炮走红的国家"><a href="#《一炮走红的国家》" class="headerlink" title="《一炮走红的国家》"></a>《一炮走红的国家》</h1><h2 id="中国更担心社会动荡"><a href="#中国更担心社会动荡" class="headerlink" title="中国更担心社会动荡"></a>中国更担心社会动荡</h2><p>让一部分人先富起来的政策方针将中国经济推上了快速发展的轨道，但贫富差距的不断增大让社会仇富心理日益壮大。继续维持高速发展所带来的社会不稳定，并不是执政党愿意看到的结果。</p>
<h2 id="中国的经济形式没那么好"><a href="#中国的经济形式，没那么好" class="headerlink" title="中国的经济形式，没那么好"></a>中国的经济形式，没那么好</h2><p>中国的政府债务约合国内生产总值的30%，表面上看起来十分健康。但如果算上“影子银行业”，负债占比可能达到200%，这对于发展中国家来说太高了。</p>
<p>另外，从上海股市的反应，2011年与2006年基本处于同一水平。这代表了国内投资人对未来的信心。</p>
<h2 id="放权图发展的邓小平时代结束"><a href="#放权图发展的邓小平时代，结束" class="headerlink" title="放权图发展的邓小平时代，结束"></a>放权图发展的邓小平时代，结束</h2><p>邓小平及其继任者江泽民、再后继者胡锦涛，代表了一个经济发展（几乎）高于一切的时代。空间平衡（发展内地）和收入均衡（最低收入保障）逐渐取代了经济发展的地位。让生活更容易，而不是让经济更具有竞争力，成为了新的目标。</p>
<h2 id="经济发展与社会体制无关"><a href="#经济发展与社会体制无关" class="headerlink" title="经济发展与社会体制无关"></a>经济发展与社会体制无关</h2><p>有人觉得自由、民主是为经济发展带来好处的社会属性。但回顾过去30年世界上经济增速超过5%的国家，你就发现它们的体制五花八门，有民主制，有集权制，也有在两者间摇摆不定的，并且它们的数量并没有明显差别。</p>
<h1 id="刻意练习"><a href="#《刻意练习》" class="headerlink" title="《刻意练习》"></a>《刻意练习》</h1><h2 id="有目的练习突破短时记忆的极限"><a href="#有目的练习，突破短时记忆的极限" class="headerlink" title="有目的练习，突破短时记忆的极限"></a>有目的练习，突破短时记忆的极限</h2><p>斯蒂夫是卡耐基梅龙大学的一名普通学生，受邀参加我们的短时记忆实验。人的短时记忆一般在 7 到 8 之间，当我们以每秒1个的速度将英文字母念给斯蒂夫的时候，他大概能记住连续的7个，偶尔能达到8个。</p>
<p>在我们反复训练多次（4次）后，斯蒂夫笃信8个就是他的记忆极限。事实上，当时的心理学研究也支持这个结论。但随着我们实验的继续，当训练次数达到10次的时候，斯蒂夫奇迹般地取得突破，他有时能记住9个了。</p>
<p>训练的次数最终达到100次，史蒂夫的战绩达到了82。这是令人难以相信的结果，有人将字母1秒1个地读给你，读到第82个的时候，你还能完整地复述出听到的所有字母。但这是真实的成就，一个通过反复训练达到的成就。</p>
<div class="hr-sect">Idea (～￣▽￣)～ Spreading</div>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;hr-sect&quot;&gt;Hack ╮(￣▽￣)╭ News&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Tech (￣▽￣)~* Learning&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Book ╰(￣▽￣)╭ Readin
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>2017-05-19</title>
    <link href="http://blog.sin5th.com/2017/05/19/2017-05-19/"/>
    <id>http://blog.sin5th.com/2017/05/19/2017-05-19/</id>
    <published>2017-05-19T02:15:13.000Z</published>
    <updated>2017-05-19T06:02:46.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hr-sect">Hack ╮(￣▽￣)╭ News</div>



<div class="hr-sect">Tech (￣▽￣)~* Learning</div>



<div class="hr-sect">Book ╰(￣▽￣)╭ Reading</div>

<h1 id="很感谢你能来不遗憾你走开"><a href="#《很感谢你能来，不遗憾你走开》" class="headerlink" title="《很感谢你能来，不遗憾你走开》"></a>《很感谢你能来，不遗憾你走开》</h1><h2 id="何必秀在朋友圈"><a href="#何必秀在朋友圈" class="headerlink" title="何必秀在朋友圈"></a>何必秀在朋友圈</h2><p>从前，我们会总结生活，用心地写下一篇博客、一段文章。而今，却只有微信上粗炮烂制的朋友圈。</p>
<p>老公送了一捧花，亲手备了一桌菜，西国旅行的票根，南园休憩的新茶…</p>
<p>于己无义，于人无益。</p>
<h2 id="何必在朋友圈找慰藉"><a href="#何必在朋友圈找慰藉" class="headerlink" title="何必在朋友圈找慰藉"></a>何必在朋友圈找慰藉</h2><p>或许确实需要表达、需要安慰，但朋友圈中可有良师？真心求学会用广播？</p>
<p>所以，该干什么干什么，需要什么求什么才是真的。朋友圈不适合找安慰。</p>
<h2 id="如果晒请把结果也晒出来"><a href="#如果晒，请把结果也晒出来" class="headerlink" title="如果晒，请把结果也晒出来"></a>如果晒，请把结果也晒出来</h2><p>如果坚持晒，那请把坚持的后果也一并晒出来。这样也能警示他人，勿步后尘。</p>
<h1 id="程序员必读之软件架构"><a href="#《程序员必读之软件架构》" class="headerlink" title="《程序员必读之软件架构》"></a>《程序员必读之软件架构》</h1><h2 id="草图不是推迟技术"><a href="#草图不是推迟技术" class="headerlink" title="草图不是推迟技术"></a>草图不是推迟技术</h2><p>画架构草图往往有个误区，就是“不限制技术选择”，仿佛架构就是一种描述，与实现毫无关系。</p>
<h2 id="草图中的部署与执行上下文"><a href="#草图中的部署与执行上下文" class="headerlink" title="草图中的部署与执行上下文"></a>草图中的部署与执行上下文</h2><p>草图中只标记了一个技术名词，却没有提到应用这项技术所需的条件。这可能让人忽视一些隐藏的代价。</p>
<h2 id="草图不要太多假设"><a href="#草图不要太多假设" class="headerlink" title="草图不要太多假设"></a>草图不要太多假设</h2><p>画了技术和运行环境，却不说明框体间的连线。它们之间的通信是 SOAP、RESTful、XML、RPC 还是什么别的，这些定义有助于考察架构的合理性。比如端口限制、非功能性需求、实现难度等等。</p>
<h1 id="一炮走红的国家"><a href="#《一炮走红的国家》" class="headerlink" title="《一炮走红的国家》"></a>《一炮走红的国家》</h1><h2 id="大得难以发展"><a href="#大得难以发展" class="headerlink" title="大得难以发展"></a>大得难以发展</h2><h3 id="中等收入陷阱"><a href="#中等收入陷阱" class="headerlink" title="中等收入陷阱"></a>中等收入陷阱</h3><p>低收入国家的发展可以通过模仿、借鉴先进国家的技术、经验，达到比先进国家更快速的发展。但随着距离缩小，能借鉴的越来越少，就更多地依赖于自身的创新与创造。</p>
<p>许多国家的经济在达到到领先国家的 10~30% 的时候，就会停滞，陷入中等收入陷阱。这在许多国家得到应验，中国没有理由不面临这个问题。</p>
<h3 id="经济规模与增长速度"><a href="#经济规模与增长速度" class="headerlink" title="经济规模与增长速度"></a>经济规模与增长速度</h3><p>大经济体发展所需的能量大于小经济体，这个道理很容易理解。中国如此庞然大物，继续保持高速发展，所需的能量将越来越多。</p>
<h3 id="人口优势变劣势"><a href="#人口优势变劣势" class="headerlink" title="人口优势变劣势"></a>人口优势变劣势</h3><p>中国有两次人口洪流，分别在50年代和70年代。第一次因战后恢复开始，因自然灾害结束；第二次因毛泽东开始，因计划生育结束。</p>
<p>随着第二次人口洪流的退去，中国农村的青壮劳动力迅速减少，城市中从业者的议价资本上升，也就是说企业需要付更多的工资来雇佣同等的人。廉价劳动力的消失会将市场推向印度这样的国家。</p>
<p>另外，在人口洪流时出生的人不久后将彻底退出劳动力市场，并开始享受社会福利。过去的人口优势变成了将来的劣势。</p>
<h1 id="刻意练习"><a href="#《刻意练习》" class="headerlink" title="《刻意练习》"></a>《刻意练习》</h1><h2 id="天才更懂得如何训练"><a href="#天才更懂得如何训练" class="headerlink" title="天才更懂得如何训练"></a>天才更懂得如何训练</h2><p>雷阿伦对于“天才三分手”这个评价并不认可，比起天才，他觉得努力才是成就他辉煌战绩的主因。</p>
<div class="hr-sect">Idea (～￣▽￣)～ Spreading</div>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;hr-sect&quot;&gt;Hack ╮(￣▽￣)╭ News&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Tech (￣▽￣)~* Learning&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Book ╰(￣▽￣)╭ Readin
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>2017-05-18</title>
    <link href="http://blog.sin5th.com/2017/05/18/2017-05-18/"/>
    <id>http://blog.sin5th.com/2017/05/18/2017-05-18/</id>
    <published>2017-05-18T06:20:25.000Z</published>
    <updated>2017-05-18T14:45:21.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hr-sect">Hack ╮(￣▽￣)╭ News</div>



<div class="hr-sect">Tech (￣▽￣)~* Learning</div>



<div class="hr-sect">Book ╰(￣▽￣)╭ Reading</div>

<h1 id="很感谢你能来不遗憾你走开"><a href="#《很感谢你能来，不遗憾你走开》" class="headerlink" title="《很感谢你能来，不遗憾你走开》"></a>《很感谢你能来，不遗憾你走开》</h1><h2 id="人前不揭短当众不催婚"><a href="#人前不揭短，当众不催婚" class="headerlink" title="人前不揭短，当众不催婚"></a>人前不揭短，当众不催婚</h2><p>学时好友毕业后便分道扬镳，联系方式从短信变成了请柬。盛装出席，却被问缘何一人？人前不揭短，当众不催婚。</p>
<h2 id="相识无憾"><a href="#相识无憾" class="headerlink" title="相识无憾"></a>相识无憾</h2><p>如果你结婚时，有人说了荒唐的理由，请不要伤心，因为她/他没有来是最好的局面。如果别人的婚礼你不愿意参加，又不想虚伪，请如实说你没时间。相交一场，相识无憾。</p>
<h2 id="晾人之苦"><a href="#晾人之苦" class="headerlink" title="晾人之苦"></a>晾人之苦</h2><p>别人不能参加你的婚礼，或许有她难言的苦衷。村里与我同龄的女孩结婚，妈妈礼到人不去。因为她既不愿被人追问我为什么还不结婚，也不愿意逼迫我为了结婚而结婚。</p>
<h1 id="程序员必读之软件架构"><a href="#《程序员必读之软件架构》" class="headerlink" title="《程序员必读之软件架构》"></a>《程序员必读之软件架构》</h1><h2 id="为什么用草图"><a href="#为什么用草图" class="headerlink" title="为什么用草图"></a>为什么用草图</h2><p>我们不愿意被复杂而全面的UML拖慢进度，但也需要一个交流想法的手段。草图是个很好的选择。</p>
<p>注意，草图不是艺术品，不要精雕细琢。草图也不是创建模型，不必面面俱到。草图是所有人的协作参与，要大家都懂。</p>
<h2 id="如何画草图"><a href="#如何画草图" class="headerlink" title="如何画草图"></a>如何画草图</h2><p>软件开发团队追求敏捷，舍弃了建模和文档，放弃了UML，却没有做好可视化和交流的指导工作。</p>
<p>桌旁案侧的草图总是时不时的出现，但他们往往是即兴发挥，毫无章法。仿佛我们对建模与文档的偏见，就连同它所使用的方法论也一并丢弃了。</p>
<p>交流，终究需要的是统一、标准的方式来保证理解与高效。因此，即便是草图，也应该有恰当程度的规矩。</p>
<h1 id="一炮走红的国家"><a href="#《一炮走红的国家》" class="headerlink" title="《一炮走红的国家》"></a>《一炮走红的国家》</h1><h2 id="4000-美元大关"><a href="#4000-美元大关" class="headerlink" title="4000 美元大关"></a>4000 美元大关</h2><p>人均 4000 美元是评判中等收入国家的标准。超过这个标准后，经济增长的难度就上升了一个台阶。</p>
<p>发达国家 2~3% 的经济增长所需要创造的价值，就相当于发展中国家两位数以上的经济增长所需要创造的价值。因此对于人均年收入 5000 美元的中国来说，7% 以下的经济增长所意味的，实际是倒退。</p>
<h2 id="美国的机遇"><a href="#美国的机遇" class="headerlink" title="美国的机遇"></a>美国的机遇</h2><p>发展中国家的发展引人入胜，但这并不是可持续、可复制的。美国的经济复苏，又拥有社交网络、人工智能这两个新兴科技，因此仍在世界经济中发挥着主导作用。</p>
<h2 id="中国的狂热与温和"><a href="#中国的狂热与温和" class="headerlink" title="中国的狂热与温和"></a>中国的狂热与温和</h2><p>在过去的几十年间，中国连续保持着两位数的经济增长，这种发展势头将中国从低收入国家的泥潭中就出来。</p>
<p>对于这种势头能否继续保持，人们通常抱有极端心态——极好或极坏。在前者的认知中，中国的农村人口会继续涌向城市，房地产价格保持增长；后者则觉得现在的中国与70年代的日本，情况相似。</p>
<p>从理性的角度看：中国的铁路总公里数已与美国相距不多，基建投入的空间日趋饱和；随着欧美等国的经济衰落，出口市场逐渐萎缩；2008年，总书记温家宝直接地表达了放慢经济增长的意见。</p>
<p>不过，外界一部分人仍然认为，即使不做有目的性的计划，中国经济也仍然会和之前一样，保持两位数的增长。</p>
<h1 id="刻意练习"><a href="#《刻意练习》" class="headerlink" title="《刻意练习》"></a>《刻意练习》</h1><h2 id="长时记忆"><a href="#长时记忆" class="headerlink" title="长时记忆"></a>长时记忆</h2><p>长时记忆是我们将所学技能进行特殊管理，使我们能快速回忆起来的能力。锻炼这种能力，我们需要为术语赋予意义，真正理解他们的含义；之后把许多术语关联起来，形成结构化的知识；最后反复修正、提炼已形成的知识。</p>
<h2 id="隐形知识"><a href="#隐形知识" class="headerlink" title="隐形知识"></a>隐形知识</h2><p>不难发现，有些技能很容易找到锻炼的方法，比如下棋、弹琴、踢球，只需要反复地思考、验证；但有些技能却并非如此，比如管理、销售，很难说通过练习讲话、沟通就能达到效果。这种差异是由于隐性知识的需求量。</p>
<p>因此，有学者认为：人的学习受到情境的制约或促进。所以你的知识用在哪里，你就在哪里学习。找到学习共同体、积极实践、模仿榜样、拓展实践场景就成了复杂技能的刻意练习方法。</p>
<h2 id="天才"><a href="#天才" class="headerlink" title="天才"></a>天才</h2><h3 id="天才存在吗"><a href="#天才存在吗" class="headerlink" title="天才存在吗"></a>天才存在吗</h3><p>莫扎特有一种称作“绝对音高”的能力，可以准确说出声音的实际音高。这种技能可谓万中无一，当真是专属于天才的恩赐。</p>
<p>但是有研究发现，说话时广泛使用声调表达含义的地区（比如中国、泰国）比不用音调的地区，拥有绝对音高的人比例要高。或者这些人拥有奇特的基因，或者声调的运用影响了绝对音高的展现概率。</p>
<h3 id="天才可以复制吗"><a href="#天才可以复制吗" class="headerlink" title="天才可以复制吗"></a>天才可以复制吗</h3><p>一项来自日本的实验中，十余名6~8岁的儿童在经过特别的训练后，都展现出了“绝对音高”。因此，天才的技能是可以通过训练得到的。</p>
<h3 id="有不能复制的天才吗"><a href="#有不能复制的天才吗" class="headerlink" title="有不能复制的天才吗"></a>有不能复制的天才吗</h3><p>回顾莫扎特的天才事实。他在童年时所受的音乐教育，相比于上述试验中的儿童，只多不少。所以莫扎特的天才也更多地来自于练习，而非天赐。</p>
<div class="hr-sect">Idea (～￣▽￣)～ Spreading</div>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;hr-sect&quot;&gt;Hack ╮(￣▽￣)╭ News&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Tech (￣▽￣)~* Learning&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Book ╰(￣▽￣)╭ Readin
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>成长感悟</title>
    <link href="http://blog.sin5th.com/2017/05/17/%E6%88%90%E9%95%BF%E6%84%9F%E6%82%9F/"/>
    <id>http://blog.sin5th.com/2017/05/17/成长感悟/</id>
    <published>2017-05-17T08:12:52.000Z</published>
    <updated>2017-05-17T08:17:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="那一年失去的标杆"><a href="#那一年失去的标杆" class="headerlink" title="那一年失去的标杆"></a>那一年失去的标杆</h1><h1 id="那一年喜欢上浪费时间"><a href="#那一年，喜欢上浪费时间" class="headerlink" title="那一年，喜欢上浪费时间"></a>那一年，喜欢上浪费时间</h1><h1 id="善用自己的优缺点"><a href="#善用自己的优缺点" class="headerlink" title="善用自己的优缺点"></a>善用自己的优缺点</h1><h1 id="匀速呼吸拒绝激动"><a href="#匀速呼吸，拒绝激动" class="headerlink" title="匀速呼吸，拒绝激动"></a>匀速呼吸，拒绝激动</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;那一年失去的标杆&quot;&gt;&lt;a href=&quot;#那一年失去的标杆&quot; class=&quot;headerlink&quot; title=&quot;那一年失去的标杆&quot;&gt;&lt;/a&gt;那一年失去的标杆&lt;/h1&gt;&lt;h1 id=&quot;那一年喜欢上浪费时间&quot;&gt;&lt;a href=&quot;#那一年，喜欢上浪费时间&quot; class=
    
    </summary>
    
      <category term="成长感悟" scheme="http://blog.sin5th.com/categories/%E6%88%90%E9%95%BF%E6%84%9F%E6%82%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>2017-05-17</title>
    <link href="http://blog.sin5th.com/2017/05/17/2017-05-17/"/>
    <id>http://blog.sin5th.com/2017/05/17/2017-05-17/</id>
    <published>2017-05-17T02:13:48.000Z</published>
    <updated>2017-05-17T06:22:41.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hr-sect">Hack ╮(￣▽￣)╭ News</div>

<h1 id="人工智能游戏手册"><a href="#人工智能游戏手册" class="headerlink" title="人工智能游戏手册"></a>人工智能游戏手册</h1><p><a href="http://aiplaybook.a16z.com/" target="_blank" rel="external">链接地址</a></p>
<p>“地球人都在做AI，但是你完全不明白这东西除了下象棋还能干什么。我们懂你的困惑，所以我们特意提供了一个 Capture 0，带你了解人工智能的强大与功效，让你明白它的潜在用途，让你学会用AI赚钱。”</p>
<p>广告打得虽好，但读者似乎并不买账。网友普遍表示，“标题党！”</p>
<div class="hr-sect">Tech (￣▽￣)~* Learning</div>



<div class="hr-sect">Book ╰(￣▽￣)╭ Reading</div>

<h1 id="很感谢你能来不遗憾你走开"><a href="#《很感谢你能来，不遗憾你走开》" class="headerlink" title="《很感谢你能来，不遗憾你走开》"></a>《很感谢你能来，不遗憾你走开》</h1><h2 id="欲买梨花同载酒终不似少年游"><a href="#欲买梨花同载酒，终不似，少年游" class="headerlink" title="欲买梨花同载酒，终不似，少年游"></a>欲买梨花同载酒，终不似，少年游</h2><p>蓝颜知己，流言蜚语；久别重遇，薄情寡义。</p>
<h2 id="只因人在风中聚散不由你我"><a href="#只因人在风中，聚散不由你我" class="headerlink" title="只因人在风中，聚散不由你我"></a>只因人在风中，聚散不由你我</h2><p>他离你远了，就离其他人近了。</p>
<h1 id="程序员必读之软件架构"><a href="#《程序员必读之软件架构》" class="headerlink" title="《程序员必读之软件架构》"></a>《程序员必读之软件架构》</h1><h2 id="sharepoint-也需要架构"><a href="#SharePoint-也需要架构" class="headerlink" title="SharePoint 也需要架构"></a>SharePoint 也需要架构</h2><p>即使不用写代码，也需要考虑安全、性能、审计等非功能性需求。</p>
<h1 id="一炮走红的国家"><a href="#《一炮走红的国家》" class="headerlink" title="《一炮走红的国家》"></a>《一炮走红的国家》</h1><h2 id="美国的经济增长与国债"><a href="#美国的经济增长与国债" class="headerlink" title="美国的经济增长与国债"></a>美国的经济增长与国债</h2><p>在过去，发行一美元国债可以带来一美元的经济增长；后来，一美元增长需要三美元国债；如今，需要五美元。</p>
<p>为了在经济危机之后保持稳定的经济恢复，美国调低利率，刺激消费，让境外商品大批涌入国内市场。给发展中国家提供了机会。</p>
<h2 id="发展中国家的债务反转"><a href="#发展中国家的债务反转" class="headerlink" title="发展中国家的债务反转"></a>发展中国家的债务反转</h2><p>在过去的十年间（2000~2010），发展中国家（俄罗斯、中国、印度等）经济的井喷式增长，使这些国家从债务国摇身一变成了债权国。而美国则从债权国变成了债务国。</p>
<p>但这种增长是难以复制和维持的。发展中国家的崛起，对应着现有发达国的衰落，当发达国家的需求减少时，发展中国家也将失去许多出口生意。</p>
<div class="hr-sect">Idea (～￣▽￣)～ Spreading</div>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;hr-sect&quot;&gt;Hack ╮(￣▽￣)╭ News&lt;/div&gt;

&lt;h1 id=&quot;人工智能游戏手册&quot;&gt;&lt;a href=&quot;#人工智能游戏手册&quot; class=&quot;headerlink&quot; title=&quot;人工智能游戏手册&quot;&gt;&lt;/a&gt;人工智能游戏手册&lt;/h1&gt;&lt;p&gt;
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>2017-05-16</title>
    <link href="http://blog.sin5th.com/2017/05/16/2017-05-16/"/>
    <id>http://blog.sin5th.com/2017/05/16/2017-05-16/</id>
    <published>2017-05-16T03:32:53.000Z</published>
    <updated>2017-05-17T02:15:50.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hr-sect">Hack ╮(￣▽￣)╭ News</div>

<h1 id="waymo-起诉-uber-将进入审讯阶段"><a href="#Waymo-起诉-Uber-将进入审讯阶段" class="headerlink" title="Waymo 起诉 Uber 将进入审讯阶段"></a>Waymo 起诉 Uber 将进入审讯阶段</h1><p><a href="https://techcrunch.com/2017/05/11/waymos-lawsuit-against-uber-is-going-to-trial-judge-rules/" target="_blank" rel="external">链接地址</a></p>
<p>Waymo 是一家做汽车自动驾驶的公司，族出 Alphabet（Google 的母公司）。起诉 Uber 是因为 Uber 涉嫌不正当的商业竞争，从 Waymo 前员工获取自动驾驶技术资料。</p>
<p>该诉讼已被法院受理。根据法官 Alsup 的决定，驳回 Uber 的仲裁请求。这对 Uber 来说是一个很大的打击，如果 Waymo 的条件都被批准，那么 Uber 的自动驾驶项目将被迫停止。</p>
<p>不过，根据 Uber 发言人的说法，Uber 不担心任何对于知识自主性的质疑。</p>
<div class="hr-sect">Tech (￣▽￣)~* Learning</div>



<div class="hr-sect">Book ╰(￣▽￣)╭ Reading</div>



<div class="hr-sect">Idea (～￣▽￣)～ Spreading</div>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;hr-sect&quot;&gt;Hack ╮(￣▽￣)╭ News&lt;/div&gt;

&lt;h1 id=&quot;waymo-起诉-uber-将进入审讯阶段&quot;&gt;&lt;a href=&quot;#Waymo-起诉-Uber-将进入审讯阶段&quot; class=&quot;headerlink&quot; title=&quot;Waym
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>2017-05-15</title>
    <link href="http://blog.sin5th.com/2017/05/15/2017-05-15/"/>
    <id>http://blog.sin5th.com/2017/05/15/2017-05-15/</id>
    <published>2017-05-15T05:36:50.000Z</published>
    <updated>2017-05-16T10:41:03.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hr-sect">Hack ╮(￣▽￣)╭ News</div>

<h1 id="对抗职业疲劳"><a href="#对抗职业疲劳" class="headerlink" title="对抗职业疲劳"></a>对抗职业疲劳</h1><p><a href="https://kierantie.com/a/burnout/" target="_blank" rel="external">链接地址</a></p>
<p>工作体面、薪水满意、压力合适…为什么还是遭遇了职业疲劳。Drs. Michael P. Leitner 和 Christina Maslach 的 《The Truth About Burnout》概括了 6 个关键点：</p>
<ol>
<li>话语权</li>
<li>价值观</li>
<li>薪酬待遇</li>
<li>工作量</li>
<li>职业发展</li>
<li>交流环境</li>
</ol>
<p>作者说他为了应对职业疲劳采取过休假、交流等等方式，但都不见成效。最后，彻底地改换了工作，成为了一名自由职业者。</p>
<p>在文中的最后，作者告诫我们：</p>
<ul>
<li>不要讳疾忌医，正确看待自己的职业疲劳</li>
<li>耐心应对，从疲劳中恢复是个漫长的过程</li>
<li>提早预防，治疗的效果永远比不上治疗</li>
</ul>
<div class="hr-sect">Tech (￣▽￣)~* Learning</div>



<div class="hr-sect">Book ╰(￣▽￣)╭ Reading</div>



<div class="hr-sect">Idea (～￣▽￣)～ Spreading</div>

<h1 id="避免被小事偷走时间"><a href="#避免被小事偷走时间" class="headerlink" title="避免被小事偷走时间"></a>避免被小事偷走时间</h1><p><a href="http://open.163.com/movie/2017/2/H/8/MC9GRQOVM_MC9GS90H8.html" target="_blank" rel="external">视频地址</a></p>
<p>工作中总是有些因太过忙碌而忘记拒绝的小事，它们在无意中偷走时间，使得我们的工作更加忙碌。</p>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;hr-sect&quot;&gt;Hack ╮(￣▽￣)╭ News&lt;/div&gt;

&lt;h1 id=&quot;对抗职业疲劳&quot;&gt;&lt;a href=&quot;#对抗职业疲劳&quot; class=&quot;headerlink&quot; title=&quot;对抗职业疲劳&quot;&gt;&lt;/a&gt;对抗职业疲劳&lt;/h1&gt;&lt;p&gt;&lt;a href=
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>2017-05-14</title>
    <link href="http://blog.sin5th.com/2017/05/14/2017-05-14/"/>
    <id>http://blog.sin5th.com/2017/05/14/2017-05-14/</id>
    <published>2017-05-14T03:47:03.000Z</published>
    <updated>2017-05-16T10:41:03.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hr-sect">Hack ╮(￣▽￣)╭ News</div>

<h1 id="无意间制止-wannacrypt-的始末"><a href="#无意间制止-WannaCrypt-的始末" class="headerlink" title="无意间制止 WannaCrypt 的始末"></a>无意间制止 WannaCrypt 的始末</h1><p><a href="https://www.malwaretech.com/2017/05/how-to-accidentally-stop-a-global-cyber-attacks.html" target="_blank" rel="external">链接地址</a></p>
<p>MalwareTech 发表博文讲述与 WannaCrypt 对抗的全过程。由于外界媒体在报道过程中多用 <em>accident</em> 一词，作者也颇具嘲讽意味地沿用了这种表述。当然，作者的表现充分体现了一名系统安全人员的职业素养，并没有任何偶然、碰巧的因素。</p>
<p>作者观察到被绑架的计算机试图连接一个未经注册的域名，凭借经验与直觉，他意识到这个域名的特殊意义，并抢先注册，将其指向 <strong>sinkhole servers</strong>。而此举恰恰阻止了蠕虫的传播。</p>
<p>事情解决之后，作者总结措施生效的原因。在开发蠕虫的沙盒环境中，这个未经注册的域名作为保护手段来及时地停止程序运行。前人也曾用过这类方法。</p>
<p>后继，恶意软件开发团队释放了新版本来绕过这个问题。</p>
<div class="hr-sect">Tech (￣▽￣)~* Learning</div>



<div class="hr-sect">Book ╰(￣▽￣)╭ Reading</div>



<div class="hr-sect">Idea (～￣▽￣)～ Spreading</div>

<h1 id="工作中需要那么多条条框框吗"><a href="#工作中需要那么多条条框框吗" class="headerlink" title="工作中需要那么多条条框框吗"></a>工作中需要那么多条条框框吗</h1><p><a href="http://open.163.com/movie/2017/2/7/J/MC9GRQOVM_MC9GS3S7J.html" target="_blank" rel="external">链接地址</a></p>
<p>主讲人先是介绍了生产力对于人类社会的意义————生产力每年提升3%的情况下，下一代所享受到的成果将是现在的两倍(1.03^25)。但工作中的协作效率却因为 <strong>清晰度</strong>、<strong>衡量</strong>、<strong>问责</strong> 而降低。</p>
<p>主讲人推崇模糊的职责边界，少一点推脱，多一点承担。</p>
<p>个人想法</p>
<blockquote>
<p>之前看过一本书（或者演讲）：开发的效果没有标准，于是找来测试；测试的结果没人确认，于是找来运维…一层监视一层。</p>
<p>虽然我肯定职责细分的价值，但要不要那么多加强型、辅助型的角色，还是要仔细斟酌。最根本的原因是，1个诸葛亮抵得过300个臭裨将。</p>
<p>另外，怀疑尽职用心的人，相当于泼冷水；怀疑不尽职的人，有用吗？</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;hr-sect&quot;&gt;Hack ╮(￣▽￣)╭ News&lt;/div&gt;

&lt;h1 id=&quot;无意间制止-wannacrypt-的始末&quot;&gt;&lt;a href=&quot;#无意间制止-WannaCrypt-的始末&quot; class=&quot;headerlink&quot; title=&quot;无意间制止 
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>2017-05-13</title>
    <link href="http://blog.sin5th.com/2017/05/13/2017-05-13/"/>
    <id>http://blog.sin5th.com/2017/05/13/2017-05-13/</id>
    <published>2017-05-13T12:51:17.000Z</published>
    <updated>2017-05-16T10:41:03.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hr-sect">Hack ╮(￣▽￣)╭ News</div>

<h1 id="正确理解-cpu-利用率"><a href="#正确理解-CPU-利用率" class="headerlink" title="正确理解 CPU 利用率"></a>正确理解 CPU 利用率</h1><p><a href="http://www.brendangregg.com/blog/2017-05-09/cpu-utilization-is-wrong.html" target="_blank" rel="external">链接地址</a></p>
<p>Brendan Gregg 发布博文，指出<strong>常见的 CPU 利用率计算方式</strong>有误导性，是仅仅通过追踪 idle 进程占用 CPU 时间的比例得出的结果。</p>
<p>而实际程序瓶颈是否在 CPU，不能仅仅根据这个指标来判定，因为 stalled 状态的进程也被算在其中，在内存访问很多时，这种进程并没有真正地利用 CPU 去进行运算，而是将时间都耗费在等待内存上。</p>
<blockquote>
<p>我们以为的 90% CPU 都在工作<br><img src="/images/www.brendangregg.com/cpubusyidle.png" alt="busy"><br>实际上它们都卡住了<br><img src="/images/www.brendangregg.com/cpubusystalledidle.png" alt="stalled"></p>
</blockquote>
<p>因此，评价 CPU 究竟使用了多少，应该参考 IPC（instructions per cycle）这个指标，它描述 cpu 真正执行指令的时间占比。</p>
<p>网友对此观点有赞许，也有质疑。质疑声集中在对<strong>利用率</strong>一词的理解。</p>
<div class="hr-sect">Tech (￣▽￣)~* Learning</div>



<div class="hr-sect">Book ╰(￣▽￣)╭ Reading</div>



<div class="hr-sect">Idea (～￣▽￣)～ Spreading</div>

<h1 id="找到自己钟爱的工作"><a href="#找到自己钟爱的工作" class="headerlink" title="找到自己钟爱的工作"></a>找到自己钟爱的工作</h1><p><a href="http://open.163.com/movie/2017/2/H/M/MC9GRQOVM_MC9GSHHHM.html" target="_blank" rel="external">视频地址</a></p>
<p>你如何选择工作？是追求简历的华丽，还是渴望愉悦的生活。演讲人告诫我们，“喝醉烈的酒，恋最美的人”，与有理想、有抱负的人一起工作。</p>
<p>另外，演讲人还说，想做到成功，请参考以下 3 点：</p>
<ol>
<li>特长</li>
<li>价值</li>
<li>经验</li>
</ol>
<p>个人想法</p>
<blockquote>
<p>虽然主讲人讲的绘声绘色，告诉我们成功需要哪些要素。但他忽略了一点（其实他意识到了那个东西），就是目标。</p>
<p>许多人不是没有目标，而是目标太低了。只想普普通通地过生活，这对他们而言，就已经是成功了。</p>
</blockquote>
<p>另外，我越发相信 <strong>1分天才，9分努力，90分运气</strong>。因为你是否愿意去努力，很大程度上取决于你（从出生到现在）接触过的人与事。</p>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;hr-sect&quot;&gt;Hack ╮(￣▽￣)╭ News&lt;/div&gt;

&lt;h1 id=&quot;正确理解-cpu-利用率&quot;&gt;&lt;a href=&quot;#正确理解-CPU-利用率&quot; class=&quot;headerlink&quot; title=&quot;正确理解 CPU 利用率&quot;&gt;&lt;/a&gt;正确理解
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>2017-05-12</title>
    <link href="http://blog.sin5th.com/2017/05/12/2017-05-12/"/>
    <id>http://blog.sin5th.com/2017/05/12/2017-05-12/</id>
    <published>2017-05-12T06:05:30.000Z</published>
    <updated>2017-05-16T10:41:03.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hr-sect">Hack ╮(￣▽￣)╭ News</div>

<h1 id="solar-roof-太阳能屋顶"><a href="#Solar-Roof-太阳能屋顶" class="headerlink" title="Solar Roof 太阳能屋顶"></a>Solar Roof 太阳能屋顶</h1><p><a href="https://www.tesla.com/blog/solar-roof" target="_blank" rel="external">链接地址</a></p>
<p>特斯拉发表博文，宣传其太阳能屋顶。卖点如下：</p>
<ul>
<li>不贵，算上省下的电钱，甚至比普通砖便宜</li>
<li>好看，提供了许多（4种）样式</li>
<li>耐用，钢化玻璃做的，比沥青和混凝土好</li>
<li>好买，官网订就行了</li>
</ul>
<p>但网友似乎对此并不买账，均表示“哪里不贵？”。据核算，特斯拉太阳能屋顶所节约的费用，至少累积30年才抵得上多花的费用，考虑通货膨胀大概在40年左右；另一个角度是，置办一套太阳能发电都花不了这么多钱 (￣.￣)</p>
<div class="hr-sect">Tech (￣▽￣)~* Learning</div>



<div class="hr-sect">Book ╰(￣▽￣)╭ Reading</div>



<div class="hr-sect">Idea (～￣▽￣)～ Spreading</div>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;hr-sect&quot;&gt;Hack ╮(￣▽￣)╭ News&lt;/div&gt;

&lt;h1 id=&quot;solar-roof-太阳能屋顶&quot;&gt;&lt;a href=&quot;#Solar-Roof-太阳能屋顶&quot; class=&quot;headerlink&quot; title=&quot;Solar Roof 太阳能
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>2017-05-11</title>
    <link href="http://blog.sin5th.com/2017/05/11/2017-05-11/"/>
    <id>http://blog.sin5th.com/2017/05/11/2017-05-11/</id>
    <published>2017-05-11T02:18:18.000Z</published>
    <updated>2017-05-16T10:41:03.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>mozilla 发起活动，拯救网络自由</li>
<li>如何成为更好的交谈者</li>
</ul>
<a id="more"></a>
<div class="hr-sect">Hack News</div>

<h1 id="mozilla-发起活动拯救网络自由"><a href="#mozilla-发起活动，拯救网络自由" class="headerlink" title="mozilla 发起活动，拯救网络自由"></a>mozilla 发起活动，拯救网络自由</h1><p><a href="https://blog.mozilla.org/blog/2017/05/08/next-10-days-critical-internets-future/" target="_blank" rel="external">链接地址</a></p>
<p>美国联邦通信委员（FCC）会将于5月18日进行“废除网络中立”的投票。</p>
<p>在 Mozilla 看来，这项决定会严重影响网络的使用方式，比如：</p>
<ul>
<li>言论自由</li>
<li>公平竞争</li>
<li>技术革新</li>
<li>自由选择</li>
</ul>
<p>作为应对，Mozilla 号召人们参与“签名活动”，通过收集签名与录音的形式，将意见传递给 FCC。</p>
<p>评论中充满对网络运营商的担忧，担心他们垄断网络通道，榨取高额费用。</p>
<blockquote>
<p>从网友们的辩论中，意识到一件事：A引起B；B引起C；但减少A未必减少C。比如，运营商收费低造成互联网公司快速崛起并且趋于垄断，垄断导致新兴公司难以抗衡。但是运营商收费却对解决垄断毫无意义，甚至进一步提高了创业公司比肩大企业的门槛。</p>
</blockquote>
<div class="hr-sect">Tech Learning</div>



<div class="hr-sect">Book Reading</div>



<div class="hr-sect">Ideas Spreading</div>

<h1 id="如何成为更好的交谈者"><a href="#如何成为更好的交谈者" class="headerlink" title="如何成为更好的交谈者"></a>如何成为更好的交谈者</h1><p><a href="http://open.163.com/movie/2016/3/F/E/MBFLN6BJF_MBFLNJGFE.html" target="_blank" rel="external">链接地址</a></p>
<p>太多人经历过学习如何沟通，准备好话题、注视眼睛、点头微笑…这些看似实用的技巧，实际上却总适得其反，因为太假了。</p>
<p>视频中的主讲人说了10个关键点：</p>
<ol>
<li>不分神</li>
<li>不说教</li>
<li>不引导</li>
<li>不逗留</li>
<li>不乱讲</li>
<li>不述己</li>
<li>不重复</li>
<li>不废话</li>
<li>不多话</li>
<li>不冗余</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;mozilla 发起活动，拯救网络自由&lt;/li&gt;
&lt;li&gt;如何成为更好的交谈者&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>2017-05-10</title>
    <link href="http://blog.sin5th.com/2017/05/10/2017-05-10/"/>
    <id>http://blog.sin5th.com/2017/05/10/2017-05-10/</id>
    <published>2017-05-10T02:10:39.000Z</published>
    <updated>2017-05-19T06:02:44.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>开始自己的音乐制作</li>
<li>进程间通信：消息队列、信号量、共享内存</li>
<li>git clone –depth</li>
<li>更好的方式迎接死亡</li>
</ul>
<a id="more"></a>
<div class="hr-sect">Hack News</div>

<h1 id="音乐制作"><a href="#音乐制作" class="headerlink" title="音乐制作"></a>音乐制作</h1><p><a href="https://learningmusic.ableton.com/index.html" target="_blank" rel="external">链接地址</a></p>
<p>很多音乐都是通过混合乐器声制作而成的，了解一些基本的知识，你也可以制作出动人的音乐。</p>
<p>常见的发声器有：</p>
<ul>
<li>hihat（足履钹）</li>
<li>snare（小鼓）</li>
<li>clap（击掌）</li>
<li>kick（大鼓）</li>
</ul>
<div class="hr-sect">Tech Learning</div>

<h1 id="git-shallow-clone"><a href="#git-shallow-clone" class="headerlink" title="git shallow clone"></a>git shallow clone</h1><p><a href="https://www.perforce.com/blog/141218/git-beyond-basics-using-shallow-clones" target="_blank" rel="external">链接地址</a></p>
<p>因为 git clone 不仅下载文件，还会下载每一个版本变更。在持续集成（CI）、持续交付（CD）中，自动化的下载容易引起 git 服务器负载问题。。</p>
<p><code>git clone --depth 1</code> 能简单地避免该问题。</p>
<p><em>Git 1.9 版本之前，shallow clone 的代码库不支持 pull/push。</em></p>
<div class="hr-sect">Book Reading</div>

<h1 id="apue-xsi-ipc"><a href="#APUE-XSI-IPC" class="headerlink" title="APUE XSI IPC"></a>APUE XSI IPC</h1><p>除了管道、命名管道之外，另外三种 IPC：</p>
<ul>
<li>消息队列</li>
<li>信号量</li>
<li>共享存储</li>
</ul>
<div class="hr-sect">Ideas Spreading</div>

<h1 id="更好的方式"><a href="#更好的方式" class="headerlink" title="更好的方式"></a>更好的方式</h1><p><a href="http://open.163.com/movie/2015/7/4/7/MAUJNN86J_MAUJO1D47.html" target="_blank" rel="external">视频地址</a></p>
<p>死亡，一个绝大多数人不想谈论的词，但也是所有人都将面临的事。</p>
<p>我们抵触它、避讳它，但却没能给我们带来什么真实的意义。医院是压抑的，疗养院是单调的…</p>
<p>火葬最初被99.8%的人所抵触，但最终还是为大多数人接受。所以，何不换一种方式看待死亡。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;开始自己的音乐制作&lt;/li&gt;
&lt;li&gt;进程间通信：消息队列、信号量、共享内存&lt;/li&gt;
&lt;li&gt;git clone –depth&lt;/li&gt;
&lt;li&gt;更好的方式迎接死亡&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>2017-05-09</title>
    <link href="http://blog.sin5th.com/2017/05/09/2017-05-09/"/>
    <id>http://blog.sin5th.com/2017/05/09/2017-05-09/</id>
    <published>2017-05-09T08:30:52.000Z</published>
    <updated>2017-05-16T10:41:03.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>Uber 涉嫌使用软件躲避审查，受到法律调查</li>
<li>如何掌控你的自由时间</li>
<li>go 中的继承</li>
</ul>
<a id="more"></a>
<div class="hr-sect">Hack News</div>

<h1 id="uber-受到法律调查"><a href="#Uber-受到法律调查" class="headerlink" title="Uber 受到法律调查"></a>Uber 受到法律调查</h1><p><a href="http://www.reuters.com/article/us-uber-tech-crime-exclusive-idUSKBN1802U1" target="_blank" rel="external">链接地址</a><br>Uber 涉嫌利用 Greyball 软件，协助司机躲避监管，受到司法部的调查。</p>
<p>称其通过挖掘信用卡、地理位置等信息，辨识用户身份，并进一步阻碍监管人员“钓鱼执法”。</p>
<p>最近，Uber 商业及法律问题不断，引起众多社会舆论。</p>
<p>该调查不代表任何违法事件的发生。</p>
<div class="hr-sect">Tech Learning</div>

<h1 id="inherition-in-go"><a href="#inherition-in-go" class="headerlink" title="inherition in go"></a>inherition in go</h1><p>首先，golang 不支持类与继承。</p>
<p>但我们总会遇到这样的场景，有一种对象 A，它包含许多属性与方法的定义。现在需要一种对象 B，它和 A 几乎相同，只在一个方法上略有不同。</p>
<p>如果是 c++/java 出身，会自然地写出类似下面的定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class A &#123;</div><div class="line">  attr_a;</div><div class="line">  attr_b;</div><div class="line">  method_a;</div><div class="line">  method_b;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class B(A) &#123;</div><div class="line">  method_b; // another implementation</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果是 js/lua 出身，会自然地写出类似下面的定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">ProtoTypeA = &#123;</div><div class="line">  method_a;</div><div class="line">  method_b;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function A(attr_a, attr_b)&#123;</div><div class="line">  o = new object;</div><div class="line">  o.attr_a = attr_a;</div><div class="line">  o.attr_b = attr_b;</div><div class="line">  set_prototype(o, ProtoTypeA);</div><div class="line">&#125;</div><div class="line"></div><div class="line">ProtoTypeB = &#123;</div><div class="line">  method_b; // another implementation</div><div class="line">&#125;</div><div class="line"></div><div class="line">set_prototype(ProtoTypeB, ProtoTypeA)</div><div class="line"></div><div class="line">function B(attr_a, attr_b)&#123;</div><div class="line">  o = A(attr_a, attr_b);</div><div class="line">  set_prototype(o, ProtoTypeB)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>相比js/lua(基于原型)的继承，c++/java 这种(基于类)看起来更直观。但 go 与这两者都不同，它是基于组合的。</p>
<p>由于嵌入类的使用特性，go 允许出现类似 c++/java 中的定义方式，但实际效果差别极大。<br>在下述定义中，b.in_A_B() 是合法的调用，但这仅仅是个语法糖，是 b.A.in_A_B() 的缩写。因此它会返回 “A” 而不是 “B”。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *A)</span><span class="title">in_A_B</span><span class="params">()</span> <span class="title">string</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> a.in_What()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *A)</span><span class="title">in_What</span><span class="params">()</span> <span class="title">string</span></span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">"A"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> B <span class="keyword">struct</span> &#123;</div><div class="line">	A</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *B)</span><span class="title">in_What</span><span class="params">()</span> <span class="title">string</span></span>  &#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">"B"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> b = B&#123;&#125;</div><div class="line">b.in_A_B()</div></pre></td></tr></table></figure></p>
<blockquote>
<p>如果想达到类似的效果，可以声明一个代理函数，然后在实例初始化过程中（当然，这个过程是自己规划出来的）对代理函数进行赋值（这一步有点像 js/lua），不过还是比较受限且麻烦的。<br>*先到这里，没来得及思考、查阅更好的方法。或许 golang 根本不鼓励这种玩法也说不定。</p>
</blockquote>
<div class="hr-sect">Book Reading</div>



<p><div class="hr-sect">Ideas Spreading</div></p>
<h1 id="如何掌控你的自由时间"><a href="#如何掌控你的自由时间" class="headerlink" title="如何掌控你的自由时间"></a>如何掌控你的自由时间</h1><p><a href="http://open.163.com/movie/2016/12/I/B/MC82BCQAN_MC8U8L3IB.html" target="_blank" rel="external">视频地址</a><br>我们总说把握好时间，就能过上想要的生活。事实是，先有想要怎样的生活，才会去安排时间。</p>
<p>与其说“没有时间”，不如说“我不想把时间花费在这件事上”，所以，时间就是选择。</p>
<p>就如同那句老话：<em>时间就是海绵里的水，挤挤总是有的。</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Uber 涉嫌使用软件躲避审查，受到法律调查&lt;/li&gt;
&lt;li&gt;如何掌控你的自由时间&lt;/li&gt;
&lt;li&gt;go 中的继承&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>2017-05-08</title>
    <link href="http://blog.sin5th.com/2017/05/08/2017-05-08/"/>
    <id>http://blog.sin5th.com/2017/05/08/2017-05-08/</id>
    <published>2017-05-08T03:33:20.000Z</published>
    <updated>2017-05-16T10:41:03.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>GNU libstdc++ 的内存深坑</li>
<li>Unix 中的命名管道</li>
<li>阅读 net/http</li>
<li>被拒绝不可怕</li>
</ul>
<a id="more"></a>
<div class="hr-sect">Hack News</div>

<h1 id="标准库中的惊悚"><a href="#标准库中的惊悚" class="headerlink" title="标准库中的惊悚"></a>标准库中的惊悚</h1><p><a href="https://www.zerotier.com/blog/2017-05-05-theleak.shtml" target="_blank" rel="external">链接地址</a></p>
<p>原作者在一次客户升级任务中，惨遭 <em>内存泄漏</em> 毒手。</p>
<blockquote>
<p>风波初起，devops 工程师妙手“回春”，定期重启稳住状况，为原作者争取时间；</p>
<p>原作者天真烂漫，遍寻 “内存泄漏”；不着，质疑标准库，又对 <em>hyper-optimized C++ template origami</em> 望而却步；</p>
<p>猛忆起玄妙词语 <em>内存碎片</em>，一番实践却又功亏一篑；</p>
<p>万念俱灰，对标准库再起杀心。终发现 libstdc++ 内存分配深坑（它为了应对 <code>malloc is slow</code>，包裹了一层分配池，于是乎…）</p>
</blockquote>
<p>设置环境变量 GLIBCPP_FORCE_NEW 可以强制 libstdc++ 关闭内存分配池。：D</p>
<div class="hr-sect">Tech Learning</div>

<h1 id="nethttp-in-go"><a href="#net-http-in-go" class="headerlink" title="net/http in go"></a>net/http in go</h1><p><a href="http://tour.golang.org" target="_blank" rel="external">http://tour.golang.org</a> 看完以为就算 golang 入门了，读读标准库发觉还差得多。</p>
<h2 id="select-on-closed-chan"><a href="#select-on-closed-chan" class="headerlink" title="select on closed chan"></a><code>select</code> on closed chan</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 出自 net/http/client.go</span></div><div class="line"><span class="comment">// 当 cancel 被 close 之后，函数永远返回 true</span></div><div class="line">wasCanceled = <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</div><div class="line">	<span class="keyword">select</span> &#123;</div><div class="line">	<span class="keyword">case</span> &lt;-cancel:</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span></div><div class="line">	<span class="keyword">default</span>:</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="appendl-another_l"><a href="#append-l-another-l…" class="headerlink" title="append(l, another_l…)"></a><code>append</code>(l, another_l…)</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 出自 net/http/client_test.go</span></div><div class="line"><span class="comment">// append(b, buf[:n]...) 中 ... 是将数组或分片展开</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">pedanticReadAll</span><span class="params">(r io.Reader)</span> <span class="params">(b []<span class="keyword">byte</span>, err error)</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> bufa [<span class="number">64</span>]<span class="keyword">byte</span></div><div class="line">	buf := bufa[:]</div><div class="line">	<span class="keyword">for</span> &#123;</div><div class="line">		n, err := r.Read(buf)</div><div class="line">		<span class="keyword">if</span> n == <span class="number">0</span> &amp;&amp; err == <span class="literal">nil</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"Read: n=0 with err=nil"</span>)</div><div class="line">		&#125;</div><div class="line">		b = <span class="built_in">append</span>(b, buf[:n]...)</div><div class="line">		<span class="keyword">if</span> err == io.EOF &#123;</div><div class="line">			n, err := r.Read(buf)</div><div class="line">			<span class="keyword">if</span> n != <span class="number">0</span> || err != io.EOF &#123;</div><div class="line">				<span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"Read: n=%d err=%#v after EOF"</span>, n, err)</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> b, <span class="literal">nil</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">			<span class="keyword">return</span> b, err</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="error-is-a-interface"><a href="#error-is-a-interface" class="headerlink" title="error is a interface"></a><code>error</code> is a interface</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 出自 net/http/client_test.go</span></div><div class="line"><span class="comment">// error 是一个接口，因此 checkErr == nil</span></div><div class="line"><span class="keyword">var</span> checkErr error</div><div class="line">c = &amp;Client&#123;CheckRedirect: <span class="function"><span class="keyword">func</span><span class="params">(req *Request, via []*Request)</span> <span class="title">error</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> checkErr</div><div class="line">&#125;&#125;</div></pre></td></tr></table></figure>
<h2 id="chan-send-only-amp-receive-only"><a href="#chan-send-only-amp-receive-only" class="headerlink" title="chan send-only &amp; receive-only"></a><code>chan</code> send-only &amp; receive-only</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 出自 net/http/request.go</span></div><div class="line"><span class="comment">// &lt;-chan 代表只读管道，chan&lt;- 代表只写管道</span></div><div class="line">Cancel &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</div></pre></td></tr></table></figure>
<div class="hr-sect">Book Reading</div>

<h1 id="apue-fifo"><a href="#APUE-FIFO" class="headerlink" title="APUE FIFO"></a>APUE FIFO</h1><p>命名管道是 Unix 进程间通信的另一手段。不同于 pipe 只能在有关联的进程中使用，fifo 允许任意两个（或多个）进程进行通信，不过 fifo 也是单向通信。</p>
<p>fifo 一般用来做两件事：</p>
<ol>
<li><p>复制输出流</p>
<blockquote>
<p>当需要多个程序同时处理一种输出时，可以使用 tee 和 fifo。<br>tee 会将输入内容同时输出到 stdout 和一个命名文件；<br>如果这个命名文件为 fifo 类型，则启动另一进程进行读取，即可达到所需的效果。</p>
</blockquote>
</li>
<li><p>客户-服务器进程通信</p>
<blockquote>
<p>服务器从一个众所周知的 fifo 文件读取，而客户端向该文件写入。</p>
<p><em>注：当没有进程以写入模式打开 fifo 文件时，读取进程将收到 EOF。为避免此问题，服务器进程一般以读写模式打开</em></p>
</blockquote>
</li>
</ol>
<div class="hr-sect">Ideas Spreading</div>

<h1 id="每天被拒绝"><a href="#每天被拒绝" class="headerlink" title="每天被拒绝"></a>每天被拒绝</h1><p><a href="http://open.163.com/movie/2017/2/6/B/MC918H30S_MC9VQJL6B.html" target="_blank" rel="external">视频地址</a><br>被拒绝时不逃跑，继续询问、争取，会有机会成功，或者找到通往成功的方向。</p>
<p>在请求别人时，主动说出别人的疑虑，会容易获得信任。</p>
<p>事情的成功，不一定在于水平，也可能在于争取。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;GNU libstdc++ 的内存深坑&lt;/li&gt;
&lt;li&gt;Unix 中的命名管道&lt;/li&gt;
&lt;li&gt;阅读 net/http&lt;/li&gt;
&lt;li&gt;被拒绝不可怕&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>2017-05-07</title>
    <link href="http://blog.sin5th.com/2017/05/07/2017-05-07/"/>
    <id>http://blog.sin5th.com/2017/05/07/2017-05-07/</id>
    <published>2017-05-07T05:44:08.000Z</published>
    <updated>2017-05-16T10:41:03.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>使用 pipe 进行进程间通信</li>
<li>看 google 如何防止 JSON hijacking</li>
<li>自媒体与虚假信息</li>
<li>理解 bash 算数表达式的返回状态</li>
</ul>
<a id="more"></a>
<div class="hr-sect">Hack News</div>

<h1 id="为何-google-的-json-response-包含-while1-前缀"><a href="#为何-google-的-json-response-包含-while-1-前缀？" class="headerlink" title="为何 google 的 json response 包含 while(1) 前缀？"></a>为何 google 的 json response 包含 while(1) 前缀？</h1><p><a href="http://stackoverflow.com/questions/2669690/why-does-google-prepend-while1-to-their-json-responses" target="_blank" rel="external">链接地址</a></p>
<p>最佳答案表示，这是为了防止 <a href="http://haacked.com/archive/2009/06/25/json-hijacking.aspx" target="_blank" rel="external">JSON 劫持</a></p>
<blockquote>
<p>虽然恶意网站会因为同源限制无法跨域名发起 ajax 请求，但是仍然可以在 <code>&lt;script&gt;</code> 中加入链接，然后通过<a href="http://ejohn.org/blog/re-securing-json/" target="_blank" rel="external">重写全局的数组构造器和访问方式</a>来达到窃取信息的目的。</p>
<p>在一个正常的 ajax 请求中，有途径可以去除这些额外的前缀；而在 <code>&lt;script&gt;</code> 标签中，却会造成脚本无限循环或解释出错。</p>
</blockquote>
<p>有人追问为何不使用<code>CSRF-token</code>？热心网友回答</p>
<blockquote>
<p>谷歌这种体量的公司，用 CSRF-token 要考虑的问题有些多，而且很浪费资源。</p>
</blockquote>
<p>另有网友表示</p>
<blockquote>
<p>他会通过在服务器端检验 http header 来避免这种问题。（感觉可行，不过没有尝试过）</p>
</blockquote>
<div class="hr-sect">Tech Learning</div>

<h1 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h1><h2 id="扩展算数表达式的退出状态不代表正误"><a href="#扩展算数表达式的退出状态不代表正误" class="headerlink" title="扩展算数表达式的退出状态不代表正误"></a>扩展算数表达式的退出状态不代表正误</h2><p>在 bash 中，算数表达式的退出状态，并不总代表执行是否成功，也与表达式返回值相关。</p>
<p>(( 1/0 )) 报错，rc=1<br>(( 0 )) 正确，rc=1<br>(( 1 )) 正确，rc=0<br>当表达式正常运算时，返回状态与返回值相反。即，运算结果为0时，退出状态为1（表示false)；否则相反。</p>
<p><a href="https://linuxstory.gitbooks.io/advanced-bash-scripting-guide-in-chinese/content/source/part2/07_1_test_constructs.html" target="_blank" rel="external">范例摘自</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">(( 0 &amp;&amp; 1 ))                 <span class="comment"># 逻辑与</span></div><div class="line"><span class="built_in">echo</span> $?     <span class="comment"># 1     ***</span></div><div class="line"><span class="comment"># 然后 ...</span></div><div class="line"><span class="built_in">let</span> <span class="string">"num = (( 0 &amp;&amp; 1 ))"</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$num</span>   <span class="comment"># 0</span></div><div class="line"><span class="comment"># 然而 ...</span></div><div class="line"><span class="built_in">let</span> <span class="string">"num = (( 0 &amp;&amp; 1 ))"</span></div><div class="line"><span class="built_in">echo</span> $?     <span class="comment"># 1     ***</span></div><div class="line"></div><div class="line"></div><div class="line">(( 200 || 11 ))              <span class="comment"># 逻辑或</span></div><div class="line"><span class="built_in">echo</span> $?     <span class="comment"># 0     ***</span></div><div class="line"><span class="comment"># ...</span></div><div class="line"><span class="built_in">let</span> <span class="string">"num = (( 200 || 11 ))"</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$num</span>   <span class="comment"># 1</span></div><div class="line"><span class="built_in">let</span> <span class="string">"num = (( 200 || 11 ))"</span></div><div class="line"><span class="built_in">echo</span> $?     <span class="comment"># 0     ***</span></div><div class="line"></div><div class="line"></div><div class="line">(( 200 | 11 ))               <span class="comment"># 按位或</span></div><div class="line"><span class="built_in">echo</span> $?                      <span class="comment"># 0     ***</span></div><div class="line"><span class="comment"># ...</span></div><div class="line"><span class="built_in">let</span> <span class="string">"num = (( 200 | 11 ))"</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$num</span>                    <span class="comment"># 203</span></div><div class="line"><span class="built_in">let</span> <span class="string">"num = (( 200 | 11 ))"</span></div><div class="line"><span class="built_in">echo</span> $?                      <span class="comment"># 0     ***</span></div><div class="line"></div><div class="line"><span class="comment"># "let" 结构的退出状态与双括号算术扩展的退出状态相同。</span></div></pre></td></tr></table></figure></p>
<div class="hr-sect">Book Reading</div>

<h1 id="apue-进程间通信"><a href="#APUE-进程间通信" class="headerlink" title="APUE 进程间通信"></a>APUE 进程间通信</h1><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p><code>pipe</code> 函数将两个文件描述符关联起来，分别用作单工通信的输入、输出。使用时一般在父进程中调用，然后通过fork将文件描述符传递给子进程。</p>
<p><code>popen</code> 函数先调用pipe产生关联的文件描述符，之后调用fork和exec，将子进程的输出传回给调用进程。简化了管道的使用。</p>
<p>如果当前程序产生某个进程的输入，同时从该进程读取输出时，则称该进程为当前程序的协同进程。</p>
<div class="hr-sect">Ideas Spreading</div>

<h1 id="自媒体时代你能自己吗"><a href="#自媒体时代，你能自己吗？" class="headerlink" title="自媒体时代，你能自己吗？"></a>自媒体时代，你能自己吗？</h1><p><a href="http://open.163.com/movie/2017/5/9/9/MCIGB2D5E_MCIGB6K99.html" target="_blank" rel="external">视频地址</a></p>
<p>在通信技术日益发达的今天，我们每一个人都可以称作媒体，当我们点下 like 时，按下 share 时，都将声音传播了出去。</p>
<p>在自媒体时代，不再有人警告你“以下内容儿童不宜观看”，唯有洞察内心、增强分辨力才能不被世界的真真假假所摆布。</p>
<p>个人感受</p>
<blockquote>
<p>主讲人出身传统媒体，对自媒体的<strong>失控</strong>感到不适。列举了虚假内容传播的诸多事例，但流言这词却实非自媒体独有。我们不该把任何人当傻子看待，当大家对自媒体的信任程度趋于稳定时，当自媒体之间的差别被逐渐放大后，自媒体和传统媒体并没有本质上的差别。洗牌只是洗牌，不会多张牌、也不会少张牌，受影响的是持牌的玩家，但民众只是看客。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;使用 pipe 进行进程间通信&lt;/li&gt;
&lt;li&gt;看 google 如何防止 JSON hijacking&lt;/li&gt;
&lt;li&gt;自媒体与虚假信息&lt;/li&gt;
&lt;li&gt;理解 bash 算数表达式的返回状态&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>2017-05-06</title>
    <link href="http://blog.sin5th.com/2017/05/06/2017-05-06/"/>
    <id>http://blog.sin5th.com/2017/05/06/2017-05-06/</id>
    <published>2017-05-06T14:16:42.000Z</published>
    <updated>2017-05-16T10:41:03.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>如何做的更好</li>
<li>程序员的银行账户</li>
<li>js 预处理</li>
</ul>
<a id="more"></a>
<div class="hr-sect">Hack News</div>

<h1 id="可编程的银行账户"><a href="#可编程的银行账户" class="headerlink" title="可编程的银行账户"></a>可编程的银行账户</h1><p><a href="https://root.co.za/" target="_blank" rel="external">链接地址</a></p>
<p>借助 api 构建自己的使用接口，用程序管理钱。</p>
<h1 id="js-prepack"><a href="#js-prepack" class="headerlink" title="js prepack"></a>js prepack</h1><p><a href="https://prepack.io/" target="_blank" rel="external">链接地址</a></p>
<p>prepack 是一款用来优化 js 代码的工具，通过把编译期能确定下来的值计算出来；简化赋值过程；避免中间计算和对象分配；等等方式来提高 js 代码的性能质量。</p>
<blockquote>
<p>我始终认为代码质量是软件的关键指标之一，并且要分<code>维护性</code>、<code>运行性</code>这两个方面进行考量。维护性是为了让人清晰地理解，运行性是为了让机器清晰地理解。前人已经创造了许多减少二者摩擦的方法，比如预处理（中的宏定义）、注释（foo=3 # threads number)等等。prepack 也应属此类。</p>
</blockquote>
<p>卖水果的老农一阵嘀咕，云上便跑起一份代码。那时，我们终将明白：程序猿已逝，老鸟亦新雏。</p>
<div class="hr-sect">Tech Learning</div>



<div class="hr-sect">Book Reading</div>



<div class="hr-sect">Ideas Spreading</div>

<h1 id="如何做得更好"><a href="#如何做得更好" class="headerlink" title="如何做得更好"></a>如何做得更好</h1><p><a href="http://open.163.com/movie/2017/2/C/U/MCC01J0QP_MCC021ACU.html" target="_blank" rel="external">视频地址</a></p>
<p>高效的人和团队, 始终兼顾 <code>学习</code> 和 <code>执行</code>. 学习过程将注意力集中在未知的领域, 接受失败, 并转化为新的技能; 执行过程将注意力集中在已知的领域, 避免失败, 并产出成果.</p>
<p>太过关注成绩的学校, 驱使学生远离学习, 沉浸在执行中; 太过关注执行力的企业, 将员工限制在已知领域, 从而失去创新与进步.</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;如何做的更好&lt;/li&gt;
&lt;li&gt;程序员的银行账户&lt;/li&gt;
&lt;li&gt;js 预处理&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>2017-05-05</title>
    <link href="http://blog.sin5th.com/2017/05/05/2017-05-05/"/>
    <id>http://blog.sin5th.com/2017/05/05/2017-05-05/</id>
    <published>2017-05-04T16:02:41.000Z</published>
    <updated>2017-05-16T10:41:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hack-news"><a href="#hack-news" class="headerlink" title="hack news"></a>hack news</h1><h2 id="土耳其封锁维基百科"><a href="#土耳其封锁维基百科" class="headerlink" title="土耳其封锁维基百科"></a>土耳其封锁维基百科</h2><p><a href="https://turkeyblocks.org/2017/04/29/wikipedia-blocked-turkey/" target="_blank" rel="external">链接地址</a></p>
<p>当地时间4月29日, The Turkey Blocks 确认了对维基百科在线的封锁. 其声称根据行政管理指令, 维基百科在线被限制了所有语言版本的访问. 不久后升级为永久指令.</p>
<a id="more"></a>
<p>评论摘选<br><a href="https://news.ycombinator.com/user?id=RcouF1uZ4gsC" target="_blank" rel="external">RcouF1uZ4gsC</a></p>
<blockquote>
<p>2016年将是全球互联网的巅峰. 中国对互联网政治控制的成功, 与埃及/突尼斯被开放互联网推翻政权的失败形成对比, 一个开放/自由的互联网并不符合某些人的利益. 如果你觉着西方的民主自由幸免于此, 看看”虚假新闻”和”No Platform”. 我们正在从自由/开放的共享与讨论, 走向思想镇压(目前看来是个坏主意, 但未来就不一定了).</p>
<p>大量的网络内容控制在少数公司手中(如果 Google 和 Facebook 限制你的站点, 那你几乎不会有什么曝光度). 此外我们正在从用户控制的通用计算机, 向安全/移动监控设备方向发展. 政府可以通过对一些公司施压, 控制哪些信息可以流向民众.</p>
<p>为政府服务的&lt;第一修正案&gt;始终使用”危险”这个托词. 言论自由和法律同等重要. 如果我们被强大的非政府组织利用, 去镇压我们不喜欢的言论, 事实上就离被政府控制相距不远了.</p>
</blockquote>
<hr>
<h1 id="book-reading"><a href="#book-reading" class="headerlink" title="book reading"></a>book reading</h1><hr>
<h1 id="tech-learning"><a href="#tech-learning" class="headerlink" title="tech learning"></a>tech learning</h1><h2 id="go-的最佳实践"><a href="#go-的最佳实践" class="headerlink" title="go 的最佳实践"></a>go 的最佳实践</h2><p><a href="https://blog.rubylearning.com/best-practices-for-a-new-go-developer-8660384302fc" target="_blank" rel="external">链接地址</a><br>本人的技能入门套路是: quick start -&gt; tutorial -&gt; best practice<br>阅读最佳实践是必要的过程, 避免自学的弯路.</p>
<ol>
<li>面向对象 != 类与继承. golang 可以算是面向对象的语言, 但它表达的方式与 java/ruby/… 并不相同, 它仅提供 interface 特性满足开发者封装对象的需要.</li>
<li>组合 vs 继承. 这是一场语言无关的, 亘古持久的战争. 但不论是 <code>组合</code>, 还是 <code>继承</code>, 目的都是将 <code>代码</code> 转化成 <code>关系</code>, 减少代码量(常说的复用). 但从另一个角度讲, 组合是一种更加松散的关系, 很容易想到它的反义词–分离, 与分离之后依然健全的独立功能. 但继承的反义词–(并没有找到合适的词), 总让人有一种丧失根基的感觉.</li>
<li>Go Way. 每种语言都有它自己脾气. go 不是 java, 不是 ruby, 也不是 python, 所以 go 有它自己的写法. 不要试图去将过去的编程体验强行带入 go 中, 而是应该从 go 的角度出发, 理解为什么没有泛型/继承, 为什么有闭包/反射.</li>
<li>reading/writing/testing. 阅读标准库是学习语言的好途径, 如果是从其他语言转过来的, 找一个熟悉的模块能很快体会到 go 的玩法. 试着去解决遇到的问题, 动手写代码的同时, 写好文档和测试. go 语言提供了很好的测试支持.</li>
<li>标准库. go 的标准库比较完备, 初学者应该尽量使用, 不要过多地以来第三方库或者框架.</li>
</ol>
<hr>
<h1 id="ted"><a href="#ted" class="headerlink" title="ted"></a>ted</h1><h2 id="爱情应有的样子"><a href="#爱情应有的样子" class="headerlink" title="爱情应有的样子"></a>爱情应有的样子</h2><p><a href="http://open.163.com/movie/2017/2/D/7/MC9FQL66A_MCA50R4D7.html" target="_blank" rel="external">视频地址</a><br>爱常常让我们感到痛苦, 我们也习惯于用痛苦的多少, 衡量爱的深浅. 但爱本来是两个人合作经营的丰硕果实, 应当是愉快的. 让爱情回到它应有的样子, 让我们说 <code>世间最美好的事, 莫过于此</code> 或者 <code>爱情比我想象的短, 但还是很美好的</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hack-news&quot;&gt;&lt;a href=&quot;#hack-news&quot; class=&quot;headerlink&quot; title=&quot;hack news&quot;&gt;&lt;/a&gt;hack news&lt;/h1&gt;&lt;h2 id=&quot;土耳其封锁维基百科&quot;&gt;&lt;a href=&quot;#土耳其封锁维基百科&quot; class=&quot;headerlink&quot; title=&quot;土耳其封锁维基百科&quot;&gt;&lt;/a&gt;土耳其封锁维基百科&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://turkeyblocks.org/2017/04/29/wikipedia-blocked-turkey/&quot;&gt;链接地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当地时间4月29日, The Turkey Blocks 确认了对维基百科在线的封锁. 其声称根据行政管理指令, 维基百科在线被限制了所有语言版本的访问. 不久后升级为永久指令.&lt;/p&gt;
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>2017-05-04</title>
    <link href="http://blog.sin5th.com/2017/05/04/2017-05-04/"/>
    <id>http://blog.sin5th.com/2017/05/04/2017-05-04/</id>
    <published>2017-05-04T14:28:45.000Z</published>
    <updated>2017-05-05T01:54:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天一直忙交接, 下午又接了个电话面试, 没腾出学习的时间. 看个 TED 睡了.</p>
<p>越发觉得自己太过实在, 甚至有些傻. 会做不会说, 不能愉快地 show.</p>
<a id="more"></a>
<h1 id="ted"><a href="#TED" class="headerlink" title="TED"></a>TED</h1><h2 id="高度科学的憎恨者分类法"><a href="#高度科学的憎恨者分类法" class="headerlink" title="高度科学的憎恨者分类法"></a>高度科学的憎恨者分类法</h2><p><a href="http://open.163.com/movie/2017/4/V/C/MCHRQ90VG_MCHRQBHVC.html" target="_blank" rel="external">视频地址</a></p>
<p>不像是演讲, 更像个脱口秀, 看了两遍也没能找到主旨, 大概是说 <em>社会正义喜剧</em> 很好看吧 ^.^</p>
<h2 id="知道自己该待在哪个圈子"><a href="#知道自己该待在哪个圈子" class="headerlink" title="知道自己该待在哪个圈子"></a>知道自己该待在哪个圈子</h2><p><a href="http://open.163.com/movie/2017/4/F/Q/MCI0S927E_MCI0SDJFQ.html" target="_blank" rel="external">视频地址</a></p>
<p>主讲人说了4个小故事, 依次描述了由内及外的四个圈:<br>舒适圈 ) 伸展圈 ) 恐慌圈 ) 恐慌圈之外</p>
<h3 id="选择公务员的高材生朋友"><a href="#选择公务员的高材生朋友" class="headerlink" title="选择公务员的高材生朋友"></a>选择公务员的高材生朋友</h3><blockquote>
<p>很有前途的朋友选择去当公务员, 让人不禁唏嘘. 然而一年后, 朋友发来信息, 表明自己在国安局, 每天和来自世界各地的黑客做对抗, 也很有意思. 另外, 由于职业要求, 进行了野外生存训练, 练就了6块腹肌.</p>
</blockquote>
<h3 id="开餐厅的学弟"><a href="#开餐厅的学弟" class="headerlink" title="开餐厅的学弟"></a>开餐厅的学弟</h3><blockquote>
<p>一个想开餐厅的学弟, 在冷冻加工厂工作之后, 苦修两年, 最终开启了自己的小店.</p>
</blockquote>
<h3 id="开餐厅的厨师朋友"><a href="#开餐厅的厨师朋友" class="headerlink" title="开餐厅的厨师朋友"></a>开餐厅的厨师朋友</h3><blockquote>
<p>擅长做菜的厨师朋友突然变身经营餐厅, 结果多次遭遇失败.</p>
</blockquote>
<h3 id="什么都不会的店长朋友"><a href="#什么都不会的店长朋友" class="headerlink" title="什么都不会的店长朋友"></a>什么都不会的店长朋友</h3><blockquote>
<p>什么都不擅长的朋友决心做店长, 本来不被看好的他却意外的顺利.</p>
</blockquote>
<p>用来说明下面这些道理: </p>
<ol>
<li>在舒适圈之内, 做我们力所能及的事情也可以精彩</li>
<li>从舒适圈中走出去, 做些精心细心的尝试, 也会有收获</li>
<li>和舒适圈不近不远, 反而可能因为角色转换不彻底而失败</li>
<li>离舒适圈足够远, 以尝试的心态做事, 同样能成功</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天一直忙交接, 下午又接了个电话面试, 没腾出学习的时间. 看个 TED 睡了.&lt;/p&gt;
&lt;p&gt;越发觉得自己太过实在, 甚至有些傻. 会做不会说, 不能愉快地 show.&lt;/p&gt;
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>2017-05-03</title>
    <link href="http://blog.sin5th.com/2017/05/03/2017-05-03/"/>
    <id>http://blog.sin5th.com/2017/05/03/2017-05-03/</id>
    <published>2017-05-03T01:58:59.000Z</published>
    <updated>2017-05-03T14:41:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hack-news"><a href="#hack-news" class="headerlink" title="hack news"></a>hack news</h1><h2 id="乐高分类器"><a href="#乐高分类器" class="headerlink" title="乐高分类器"></a>乐高分类器</h2><p>原文地址: <a href="https://jacquesmattheij.com/sorting-two-metric-tons-of-lego" target="_blank" rel="external">https://jacquesmattheij.com/sorting-two-metric-tons-of-lego</a></p>
<p>作者突发奇想要做个乐高分类器, 在 ebay 上挂收购, 一不小心收多了, 就立马动手搞了起来.</p>
<p>从头到尾要面对挺多问题</p>
<ul>
<li>假货</li>
<li>褪色</li>
<li>坏损</li>
<li>脏污</li>
<li>稳定传送</li>
<li>扫描</li>
<li>判断优劣</li>
<li>按优劣分放</li>
</ul>
<a id="more"></a>
<p>作者最后的解决办法很有趣:<br>漏斗搭配一大一小两条履带, 把乐高从堆中依次运出, 经由摄像头成像. 使用神经算法区分优劣, 如果是劣质的, 就启动空气喷嘴, 吹到边上的桶里.</p>
<p>初见题目时, 以为是区分积木零件, 最后发现是区分优劣. 但也差不多, 还是很有趣的.<br>ps. 我小时候也很喜欢乐高, 拼个奥特曼飞机什么的. 好不好看不重要, 一定得有活动关节 ^.^</p>
<hr>
<h1 id="book-reading"><a href="#book-reading" class="headerlink" title="book reading"></a>book reading</h1><h2 id="apue-高级io"><a href="#apue-高级I-O" class="headerlink" title="apue 高级I/O"></a>apue 高级I/O</h2><p>之前见识过<code>非阻塞I/O</code>和<code>标准I/O</code>, <code>高级I/O</code>会是什么呢?</p>
<h2 id="第四次革命"><a href="#第四次革命" class="headerlink" title="第四次革命"></a>第四次革命</h2><p>哥白尼的日心说, 否定了地球是宇宙的中心<br>达尔文的进化论, 否定了人类是上帝的杰作<br>弗洛伊德的精神分析, 否定了人类的自主意识<br>图灵的计算模型, 否定了人类的独一无二  </p>
<hr>
<h1 id="ted"><a href="#ted" class="headerlink" title="ted"></a>ted</h1><h2 id="你发过短性息吗"><a href="#你发过“短性息”吗？" class="headerlink" title="你发过“短性息”吗？"></a>你发过“短性息”吗？</h2><p><a href="http://open.163.com/movie/2017/2/0/V/MCCS6ND1H_MCCSBPI0V.html" target="_blank" rel="external">链接地址</a><br>主讲人强调社会(法律/舆论)对 sexting 等”色情”产物的担忧不必要, 处理措施过于形式化.<br>更多的关注点应该放在”隐私”问题上, 即是否征得了隐私所有者的同意.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hack-news&quot;&gt;&lt;a href=&quot;#hack-news&quot; class=&quot;headerlink&quot; title=&quot;hack news&quot;&gt;&lt;/a&gt;hack news&lt;/h1&gt;&lt;h2 id=&quot;乐高分类器&quot;&gt;&lt;a href=&quot;#乐高分类器&quot; class=&quot;headerlink&quot; title=&quot;乐高分类器&quot;&gt;&lt;/a&gt;乐高分类器&lt;/h2&gt;&lt;p&gt;原文地址: &lt;a href=&quot;https://jacquesmattheij.com/sorting-two-metric-tons-of-lego&quot;&gt;https://jacquesmattheij.com/sorting-two-metric-tons-of-lego&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者突发奇想要做个乐高分类器, 在 ebay 上挂收购, 一不小心收多了, 就立马动手搞了起来.&lt;/p&gt;
&lt;p&gt;从头到尾要面对挺多问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假货&lt;/li&gt;
&lt;li&gt;褪色&lt;/li&gt;
&lt;li&gt;坏损&lt;/li&gt;
&lt;li&gt;脏污&lt;/li&gt;
&lt;li&gt;稳定传送&lt;/li&gt;
&lt;li&gt;扫描&lt;/li&gt;
&lt;li&gt;判断优劣&lt;/li&gt;
&lt;li&gt;按优劣分放&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>2017-05-02</title>
    <link href="http://blog.sin5th.com/2017/05/02/2017-05-02/"/>
    <id>http://blog.sin5th.com/2017/05/02/2017-05-02/</id>
    <published>2017-05-02T01:52:18.000Z</published>
    <updated>2017-05-03T02:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hack-news"><a href="#hack-news" class="headerlink" title="hack news"></a>hack news</h1><h2 id="headless-chrome"><a href="#headless-chrome" class="headerlink" title="headless chrome"></a><a href="https://developers.google.com/web/updates/2017/04/headless-chrome" target="_blank">headless chrome</a></h2><p>headless chrome 允许在不启动浏览器窗口的情况下, 测试浏览器的网页加载, 这对自动化测试提供了方便.</p>
<p>成文时, 稳定版的 chrome 刚刚48版本, 还不支持 headless, 需要安装 chrome canary.<br>mac os 可以使用 <code>brew install Caskroom/versions/google-chrome-canary</code> 安装,</p>
<a id="more"></a>
<h1 id="book-reading"><a href="#book-reading" class="headerlink" title="book reading"></a>book reading</h1><h2 id="apue-守护进程"><a href="#apue-守护进程" class="headerlink" title="apue 守护进程"></a>apue 守护进程</h2><h3 id="守护进程的特征"><a href="#守护进程的特征" class="headerlink" title="守护进程的特征"></a>守护进程的特征</h3><p>守护进程没有控制终端, 终端前台进程组ID为 -1</p>
<h3 id="编程规则"><a href="#编程规则" class="headerlink" title="编程规则"></a>编程规则</h3><ol>
<li>umask 重置文件模式创建屏蔽字</li>
<li>fork 使父进程退出</li>
<li>setsid 开启新会话</li>
<li>更改当前工作目录, 避免文件系统不能被拆卸</li>
<li>关闭不再需要的文件描述符</li>
<li>重定向标准输入/输出/出错</li>
</ol>
<h3 id="单实例守护进程"><a href="#单实例守护进程" class="headerlink" title="单实例守护进程"></a>单实例守护进程</h3><p>可以使用文件和记录锁, 保证同一时间只有一个进程运行</p>
<h3 id="守护进程惯例"><a href="#守护进程惯例" class="headerlink" title="守护进程惯例"></a>守护进程惯例</h3><ul>
<li>文件锁一般使用 /var/run/name.pid</li>
<li>配置选项一般使用 /etc/name.conf</li>
<li>初始化脚本一般使用 /etc/init.d/<em> 或 /etc/rc</em></li>
<li>一般通过捕捉 SIGHUP 进行配置重载</li>
</ul>
<h1 id="tech-learning"><a href="#tech-learning" class="headerlink" title="tech learning"></a>tech learning</h1><h2 id="golang-reflect"><a href="#golang-reflect" class="headerlink" title="golang reflect"></a>golang reflect</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 类型断言</span></div><div class="line"><span class="keyword">if</span> v, ok := varI.(T); ok &#123;</div><div class="line">    Process(v)</div><div class="line">    <span class="keyword">return</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 类型判断</span></div><div class="line"><span class="keyword">switch</span> t := areaIntf.(<span class="keyword">type</span>) &#123;</div><div class="line"><span class="keyword">case</span> *Square:</div><div class="line">	fmt.Printf(<span class="string">"Type Square %T with value %v\n"</span>, t, t)</div><div class="line"><span class="keyword">case</span> *Circle:</div><div class="line">	fmt.Printf(<span class="string">"Type Circle %T with value %v\n"</span>, t, t)</div><div class="line"><span class="keyword">case</span> <span class="literal">nil</span>:</div><div class="line">	fmt.Printf(<span class="string">"nil value: nothing to check?\n"</span>)</div><div class="line"><span class="keyword">default</span>:</div><div class="line">	fmt.Printf(<span class="string">"Unexpected type %T\n"</span>, t)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="advanced-bash-scripting-guide"><a href="#advanced-bash-scripting-guide" class="headerlink" title="advanced-bash-scripting-guide"></a>advanced-bash-scripting-guide</h2><p>引用变量</p>
<p>单引号代表全引用, 所有的值都用字面意思解释.<br>因此, 试图在单引号中转义单引号是错误的.<br>错误: <code>echo &#39;i\&#39;m something&#39;</code><br>但是可以通过其它的方式解决这个问题.<br>正确: <code>echo &#39;i&#39;\&#39;&#39;m something&#39;</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hack-news&quot;&gt;&lt;a href=&quot;#hack-news&quot; class=&quot;headerlink&quot; title=&quot;hack news&quot;&gt;&lt;/a&gt;hack news&lt;/h1&gt;&lt;h2 id=&quot;headless-chrome&quot;&gt;&lt;a href=&quot;#headless-chrome&quot; class=&quot;headerlink&quot; title=&quot;headless chrome&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developers.google.com/web/updates/2017/04/headless-chrome&quot; target=&quot;_blank&quot;&gt;headless chrome&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;headless chrome 允许在不启动浏览器窗口的情况下, 测试浏览器的网页加载, 这对自动化测试提供了方便.&lt;/p&gt;
&lt;p&gt;成文时, 稳定版的 chrome 刚刚48版本, 还不支持 headless, 需要安装 chrome canary.&lt;br&gt;mac os 可以使用 &lt;code&gt;brew install Caskroom/versions/google-chrome-canary&lt;/code&gt; 安装,&lt;/p&gt;
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
</feed>
