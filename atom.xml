<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sin5&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.sin5th.com/"/>
  <updated>2017-06-29T14:13:27.000Z</updated>
  <id>http://blog.sin5th.com/</id>
  
  <author>
    <name>武鑫</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go 语言的 50 个陷阱</title>
    <link href="http://blog.sin5th.com/2017/06/27/50-shades-of-go/"/>
    <id>http://blog.sin5th.com/2017/06/27/50-shades-of-go/</id>
    <published>2017-06-27T15:19:42.000Z</published>
    <updated>2017-06-29T14:13:27.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原文出自 <a href="http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/index.html" target="_blank" rel="external">这里</a></p>
</blockquote>
<p>Go is a simple and fun language, but, like any other language, it has a few gotchas… Many of those gotchas are not entirely Go’s fault. Some of these mistakes are natural traps if you are coming from another language. Others are due to faulty assumptions and missing details.<br><code hide="">Go 是一门简单而有趣的语言，但是，像其他语言一样，它有一些陷阱。。许多错误不是 Go 的问题，这其中一部分来自于其他语言对你的误导，而另一部分则是错误的猜想和遗漏的细节。</code></p>
<p>A lot of these gotchas may seem obvious if you took the time to learn the language reading the official spec, wiki, mailing list discussions, many great posts and presentations by Rob Pike, and the source code. Not everybody starts the same way though and that’s OK. If you are new to Go the information here will save you hours debugging your code.<br><code hide="">在仔细阅读过官方说明、wiki、往来邮件、Rob Pike 的优秀博客与演示，还有源代码之后，许多陷阱实际上是非常容易识别的。当然不是每个人都这样学习，没关系。如果你刚刚接触 Go，那这篇文章的内容能让你避免许多浪费时间的调试。</code></p>
<p>This post covers Go 1.5 and below.<br><code hide="">本文对 Go 1.5 及以下有效。</code></p>
<h1 id="total-beginner"><a href="#Total-Beginner" class="headerlink" title="Total Beginner"></a>Total Beginner</h1><p>Total Beginner<br><code hide="">真正的初学者</code></p>
<h2 id="opening-brace-cant-be-placed-on-a-separate-line"><a href="#Opening-Brace-Can’t-Be-Placed-on-a-Separate-Line" class="headerlink" title="Opening Brace Can’t Be Placed on a Separate Line"></a>Opening Brace Can’t Be Placed on a Separate Line</h2><p>Opening Brace Can’t Be Placed on a Separate Line<br><code hide="">左括号不能新启一行</code></p>
<p>In most other languages that use braces you get to choose where you place them. Go is different. You can thank automatic semicolon injection (without lookahead) for this behavior. Yes, Go does have semicolons :-)<br><code hide="">在大多数语言里花括号放哪都行，但 Go 不是。</code></p>
<blockquote>
<p>Fails:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123; <span class="comment">//error, can't have the opening brace on a separate line</span></div><div class="line">    fmt.Println(<span class="string">"hello there!"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Compile Error:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/tmp/sandbox826898458/main.go:6: syntax error: unexpected semicolon or newline before &#123;</div></pre></td></tr></table></figure></p>
<p>Works:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    fmt.Println(<span class="string">"works!"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="unused-variables"><a href="#Unused-Variables" class="headerlink" title="Unused Variables"></a>Unused Variables</h2><p>Unused Variables<br><code hide="">未使用的变量 </code></p>
<p>If you have an unused variable your code will fail to compile. There’s an exception though. You must use variables you declare inside functions, but it’s OK if you have unused global variables. It’s also OK to have unused function arguments.<br><code hide="">代码里有未使用的变量会编译错误，不过也有例外。在函数里的变量必须使用，不过全局变量和函数参数可以不使用。</code></p>
<p>If you assign a new value to the unused variable your code will still fail to compile. You need to use the variable value somehow to make the compiler happy.<br><code hide="">赋值给未使用的变量同样报错，一定是正常使用，不然编译器不会过。</code></p>
<blockquote>
<p>Fails:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">var</span> gvar <span class="keyword">int</span> <span class="comment">//not an error</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> one <span class="keyword">int</span>   <span class="comment">//error, unused variable</span></div><div class="line">    two := <span class="number">2</span>      <span class="comment">//error, unused variable</span></div><div class="line">    <span class="keyword">var</span> three <span class="keyword">int</span> <span class="comment">//error, even though it's assigned 3 on the next line</span></div><div class="line">    three = <span class="number">3</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span><span class="params">(unused <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">        fmt.Println(<span class="string">"Unused arg. No compile error"</span>)</div><div class="line">    &#125;(<span class="string">"what?"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Compile Errors:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/tmp/sandbox473116179/main.go:6: one declared and not used /tmp/sandbox473116179/main.go:7: two declared and not used /tmp/sandbox473116179/main.go:8: three declared and not used</div></pre></td></tr></table></figure></p>
<p>Works:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> one <span class="keyword">int</span></div><div class="line">    _ = one</div><div class="line"></div><div class="line">    two := <span class="number">2</span></div><div class="line">    fmt.Println(two)</div><div class="line"></div><div class="line">    <span class="keyword">var</span> three <span class="keyword">int</span></div><div class="line">    three = <span class="number">3</span></div><div class="line">    one = three</div><div class="line"></div><div class="line">    <span class="keyword">var</span> four <span class="keyword">int</span></div><div class="line">    four = four</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>Another option is to comment out or remove the unused variables :-)<br><code hide="">另一个方法是注释、或者删除不用的变量 </code></p>
<h2 id="unused-imports"><a href="#Unused-Imports" class="headerlink" title="Unused Imports"></a>Unused Imports</h2><p>Unused Imports<br><code hide="">未使用的包引用</code></p>
<p>Your code will fail to compile if you import a package without using any of its exported functions, interfaces, structures, or variables.<br><code hide="">要是导入了包，但没有用任何其中的方法、类型、变量，那一定会报错。 </code></p>
<p>If you really need the imported package you can use the blank identifier, _, as its package name to avoid this compilation failure. The blank identifier is used to import packages for their side effects.<br><code hide="">如果非要导入包，那么可以用空白标识符作为它的包名，这样就能避免编译失败。空白表示符用来导入包来发挥他们的副作用。</code></p>
<blockquote>
<p>Fails:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"log"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Compile Errors:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/tmp/sandbox627475386/main.go:4: imported and not used: &quot;fmt&quot; /tmp/sandbox627475386/main.go:5: imported and not used: &quot;log&quot; /tmp/sandbox627475386/main.go:6: imported and not used: &quot;time&quot;</div></pre></td></tr></table></figure></p>
<p>Works:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    _ <span class="string">"fmt"</span></div><div class="line">    <span class="string">"log"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">var</span> _ = log.Println</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    _ = time.Now</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>Another option is to remove or comment out the unused imports :-) The  goimports tool can help you with that.<br><code hide="">删除或注释不用的包引用也是可以的</code></p>
<h2 id="short-variable-declarations-can-be-used-only-inside-functions"><a href="#Short-Variable-Declarations-Can-Be-Used-Only-Inside-Functions" class="headerlink" title="Short Variable Declarations Can Be Used Only Inside Functions"></a>Short Variable Declarations Can Be Used Only Inside Functions</h2><p>Short Variable Declarations Can Be Used Only Inside Functions<br><code hide="">短声明只能在函数中使用</code></p>
<blockquote>
<p>Fails:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line">myvar := <span class="number">1</span> <span class="comment">//error</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Compile Error:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/tmp/sandbox265716165/main.go:3: non-declaration statement outside function body</div></pre></td></tr></table></figure></p>
<p>Works:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">var</span> myvar = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="redeclaring-variables-using-short-variable-declarations"><a href="#Redeclaring-Variables-Using-Short-Variable-Declarations" class="headerlink" title="Redeclaring Variables Using Short Variable Declarations"></a>Redeclaring Variables Using Short Variable Declarations</h2><p>Redeclaring Variables Using Short Variable Declarations<br><code hide="">使用短声明重复对变量赋值</code></p>
<p>You can’t redeclare a variable in a standalone statement, but it is allowed in multi-variable declarations where at least one new variable is also declared.<br><code hide="">不能重复声明变量。但在多变量声明语句中，有一个变量为首次声明也是可以的。</code></p>
<p>The redeclared variable has to be in the same block or you’ll end up with a shadowed variable.<br><code hide="">被重复生命的变量必须在同一个块中，否则就得以一个隐式变量结束。</code></p>
<blockquote>
<p>Fails:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    one := <span class="number">0</span></div><div class="line">    one := <span class="number">1</span> <span class="comment">//error</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Compile Error:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/tmp/sandbox706333626/main.go:5: no new variables on left side of :=</div></pre></td></tr></table></figure></p>
<p>Works:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    one := <span class="number">0</span></div><div class="line">    one, two := <span class="number">1</span>,<span class="number">2</span></div><div class="line"></div><div class="line">    one,two = two,one</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="cant-use-short-variable-declarations-to-set-field-values"><a href="#Can’t-Use-Short-Variable-Declarations-to-Set-Field-Values" class="headerlink" title="Can’t Use Short Variable Declarations to Set Field Values"></a>Can’t Use Short Variable Declarations to Set Field Values</h2><p>Can’t Use Short Variable Declarations to Set Field Values<br><code hide="">不能使用短声明来设置字段值</code></p>
<blockquote>
<p>Fails:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">  <span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> info <span class="keyword">struct</span> &#123;</div><div class="line">  result <span class="keyword">int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">work</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span>,error)</span></span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">13</span>,<span class="literal">nil</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">var</span> data info</div><div class="line"></div><div class="line">  data.result, err := work() <span class="comment">//error</span></div><div class="line">  fmt.Printf(<span class="string">"info: %+v\n"</span>,data)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Compile Error:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">prog.go:18: non-name data.result on left side of :=</div><div class="line"></div><div class="line">Even though there&apos;s a ticket to address this gotcha it&apos;s unlikely to change because Rob Pike likes it &quot;as is&quot; :-)</div><div class="line"></div><div class="line">Use temporary variables or predeclare all your variables and use the standard assignment operator.</div></pre></td></tr></table></figure></p>
<p>Works:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">  <span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> info <span class="keyword">struct</span> &#123;</div><div class="line">  result <span class="keyword">int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">work</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span>,error)</span></span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">13</span>,<span class="literal">nil</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">var</span> data info</div><div class="line"></div><div class="line">  <span class="keyword">var</span> err error</div><div class="line">  data.result, err = work() <span class="comment">//ok</span></div><div class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">    fmt.Println(err)</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  fmt.Printf(<span class="string">"info: %+v\n"</span>,data) <span class="comment">//prints: info: &#123;result:13&#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>##Accidental Variable Shadowing<br>Accidental Variable Shadowing<br><code hide="">意外的变量覆盖</code></p>
<p>The short variable declaration syntax is so convenient (especially for those coming from a dynamic language) that it’s easy to treat it like a regular assignment operation. If you make this mistake in a new code block there will be no compiler error, but your app will not do what you expect.<br><code hide="">短赋值语法很方便（特别是对那些来自动态语言的人来说），以至于很容易把它当成一个常规的赋值操作符。在新的代码块中这么做可以正常编译，但运行效果非你所愿。</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    x := <span class="number">1</span></div><div class="line">    fmt.Println(x)     <span class="comment">//prints 1</span></div><div class="line">    &#123;</div><div class="line">        fmt.Println(x) <span class="comment">//prints 1</span></div><div class="line">        x := <span class="number">2</span></div><div class="line">        fmt.Println(x) <span class="comment">//prints 2</span></div><div class="line">    &#125;</div><div class="line">    fmt.Println(x)     <span class="comment">//prints 1 (bad if you need 2)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>This is a very common trap even for experienced Go developers. It’s easy to make and it could be hard to spot.<br><code hide="">Go 资深开发者也容易犯这个错。而且不仅容易犯，还难以排查。</code><br>You can use the vet command to find some of these problems. By default,  vet will not perform any shadowed variable checks. Make sure to use the  -shadow flag: go tool vet -shadow your_file.go<br><code hide="">可以使用 vet 指令来找这类问题。vet 默认不会做变量覆盖的检查，所以要用 -shadow: go tool vet -shadow your_file.go</code><br>Note that the vet command will not report all shadowed variables. Use  go-nyet for more aggressive shadowed variable detection.<br><code hide="">注意 vet 指令不会报出所有的变量覆盖，go-nyet 可以做更好的变量覆盖探测。</code> </p>
<h2 id="cant-use-nil-to-initialize-a-variable-without-an-explicit-type"><a href="#Can’t-Use-“nil”-to-Initialize-a-Variable-Without-an-Explicit-Type" class="headerlink" title="Can’t Use “nil” to Initialize a Variable Without an Explicit Type"></a>Can’t Use “nil” to Initialize a Variable Without an Explicit Type</h2><p>Can’t Use “nil” to Initialize a Variable Without an Explicit Type<br><code hide="">不要用 “nil” 初始化非显式声明的变量。</code></p>
<p>The “nil” identifier can be used as the “zero value” for interfaces, functions, pointers, maps, slices, and channels. If you don’t specify the variable type the compiler will fail to compile your code because it can’t guess the type.<br><code hide="">“nil” 能作为接口、函数、指针、哈希、分片、管道的”空值”表示。如果不指定变量类型，便一起会因为猜不出类型而报错。</code></p>
<blockquote>
<p>Fails:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> x = <span class="literal">nil</span> <span class="comment">//error</span></div><div class="line"></div><div class="line">    _ = x</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Compile Error:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/tmp/sandbox188239583/main.go:4: use of untyped nil</div></pre></td></tr></table></figure></p>
<p>Works:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> x <span class="keyword">interface</span>&#123;&#125; = <span class="literal">nil</span></div><div class="line"></div><div class="line">    _ = x</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>##Using “nil” Slices and Maps<br>Using “nil” Slices and Maps<br><code hide="">使用 “nil” 分片和哈希</code></p>
<p>It’s OK to add items to a “nil” slice, but doing the same with a map will produce a runtime panic.<br><code hide="">可以往 “nil” 分片中加入元素，但往对 map 这么干就会报错。</code></p>
<blockquote>
<p>Works:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> s []<span class="keyword">int</span></div><div class="line">    s = <span class="built_in">append</span>(s,<span class="number">1</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Fails:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></div><div class="line">    m[<span class="string">"one"</span>] = <span class="number">1</span> <span class="comment">//error</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>##Map Capacity<br>Map Capacity<br><code hide="">map 的容量</code></p>
<p>You can specify the map capacity when it’s created, but you can’t use the cap() function on maps.</p>
<p>#cb可以在创建时指定 map 的容量，但不能对它用 cap() 函数。</p>
<blockquote>
<p>Fails:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>,<span class="number">99</span>)</div><div class="line">    <span class="built_in">cap</span>(m) <span class="comment">//error</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Compile Error:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/tmp/sandbox326543983/main.go:5: invalid argument m (type map[string]int) for cap</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="strings-cant-be-nil"><a href="#Strings-Can’t-Be-“nil”" class="headerlink" title="Strings Can’t Be “nil”"></a>Strings Can’t Be “nil”</h2><p>Strings Can’t Be “nil”<br><code hide="">字符串不能为空</code></p>
<p>This is a gotcha for developers who are used to assigning “nil” identifiers to string variables.<br><code hide="">对那些习惯将字符串设置为”nil”的开发者，很容出错</code></p>
<blockquote>
<p>Fails:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> x <span class="keyword">string</span> = <span class="literal">nil</span> <span class="comment">//error</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> x == <span class="literal">nil</span> &#123; <span class="comment">//error</span></div><div class="line">        x = <span class="string">"default"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Compile Errors:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/tmp/sandbox630560459/main.go:4: cannot use nil as type string in assignment /tmp/sandbox630560459/main.go:6: invalid operation: x == nil (mismatched types string and nil)</div></pre></td></tr></table></figure></p>
<p>Works:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> x <span class="keyword">string</span> <span class="comment">//defaults to "" (zero value)</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> x == <span class="string">""</span> &#123;</div><div class="line">        x = <span class="string">"default"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>##Array Function Arguments<br>Array Function Arguments<br><code hide="">数组作为函数参宿</code></p>
<p>If you are a C or C++ developer arrays for you are pointers. When you pass arrays to functions the functions reference the same memory location, so they can update the original data. Arrays in Go are values, so when you pass arrays to functions the functions get a copy of the original array data. This can be a problem if you are trying to update the array data.<br><code hide="">对 c 和 c++ 开发者来说，数组是指针。当传递数组到函数中时，函数使用同一块内存区域，所以可以更新原始数据。在 Go 中，数组是值，所以传递给函数的是一份拷贝。这在执行更新操作时候会出问题。</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    x := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span><span class="params">(arr [3]<span class="keyword">int</span>)</span></span> &#123;</div><div class="line">        arr[<span class="number">0</span>] = <span class="number">7</span></div><div class="line">        fmt.Println(arr) <span class="comment">//prints [7 2 3]</span></div><div class="line">    &#125;(x)</div><div class="line"></div><div class="line">    fmt.Println(x) <span class="comment">//prints [1 2 3] (not ok if you need [7 2 3])</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>If you need to update the original array data use array pointer types.<br><code hide="">更新数组要使用指针类型</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    x := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span><span class="params">(arr *[3]<span class="keyword">int</span>)</span></span> &#123;</div><div class="line">        (*arr)[<span class="number">0</span>] = <span class="number">7</span></div><div class="line">        fmt.Println(arr) <span class="comment">//prints &amp;[7 2 3]</span></div><div class="line">    &#125;(&amp;x)</div><div class="line"></div><div class="line">    fmt.Println(x) <span class="comment">//prints [7 2 3]</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Another option is to use slices. Even though your function gets a copy of the slice variable it still references the original data.</p>
<p>#cb另一个方法是使用切片。尽管函数拿到了一个分片的复制，但它仍然指向原始数据。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    x := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</div><div class="line">        arr[<span class="number">0</span>] = <span class="number">7</span></div><div class="line">        fmt.Println(arr) <span class="comment">//prints [7 2 3]</span></div><div class="line">    &#125;(x)</div><div class="line"></div><div class="line">    fmt.Println(x) <span class="comment">//prints [7 2 3]</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>##Unexpected Values in Slice and Array “range” Clauses<br>Unexpected Values in Slice and Array “range” Clauses<br><code hide="">对分片和数组的 range 中出现始料未及的值</code></p>
<p>This can happen if you are used to the “for-in” or “foreach” statements in other languages. The “range” clause in Go is different. It generates two values: the first value is the item index while the second value is the item data.</p>
<p>Bad:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    x := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>&#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> v := <span class="keyword">range</span> x &#123;</div><div class="line">        fmt.Println(v) <span class="comment">//prints 0, 1, 2</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Good:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    x := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>&#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> x &#123;</div><div class="line">        fmt.Println(v) <span class="comment">//prints a, b, c</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Slices and Arrays Are One-Dimensional</p>
<p>It may seem like Go supports multi-dimensional arrays and slices, but it doesn’t. Creating arrays of arrays or slices of slices is possible though. For numerical computation apps that rely on dynamic multi-dimensional arrays it’s far from ideal in terms of performance and complexity.</p>
<p>You can build dynamic multi-dimensional arrays using raw one-dimensional arrays, slices of “independent” slices, and slices of “shared data” slices.</p>
<p>If you are using raw one-dimensional arrays you are responsible for indexing, bounds checking, and memory reallocations when the arrays need to grow.</p>
<p>Creating a dynamic multi-dimensional array using slices of “independent” slices is a two step process. First, you have to create the outer slice. Then, you have to allocate each inner slice. The inner slices are independent of each other. You can grow and shrink them without affecting other inner slices.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    x := <span class="number">2</span></div><div class="line">    y := <span class="number">4</span></div><div class="line"></div><div class="line">    table := <span class="built_in">make</span>([][]<span class="keyword">int</span>,x)</div><div class="line">    <span class="keyword">for</span> i:= <span class="keyword">range</span> table &#123;</div><div class="line">        table[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>,y)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Creating a dynamic multi-dimensional array using slices of “shared data” slices is a three step process. First, you have to create the data “container” slice that will hold raw data. Then, you create the outer slice. Finally, you initialize each inner slice by reslicing the raw data slice.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    h, w := <span class="number">2</span>, <span class="number">4</span></div><div class="line"></div><div class="line">    raw := <span class="built_in">make</span>([]<span class="keyword">int</span>,h*w)</div><div class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> raw &#123;</div><div class="line">        raw[i] = i</div><div class="line">    &#125;</div><div class="line">    fmt.Println(raw,&amp;raw[<span class="number">4</span>])</div><div class="line">    <span class="comment">//prints: [0 1 2 3 4 5 6 7] &lt;ptr_addr_x&gt;</span></div><div class="line"></div><div class="line">    table := <span class="built_in">make</span>([][]<span class="keyword">int</span>,h)</div><div class="line">    <span class="keyword">for</span> i:= <span class="keyword">range</span> table &#123;</div><div class="line">        table[i] = raw[i*w:i*w + w]</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fmt.Println(table,&amp;table[<span class="number">1</span>][<span class="number">0</span>])</div><div class="line">    <span class="comment">//prints: [[0 1 2 3] [4 5 6 7]] &lt;ptr_addr_x&gt;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>There’s a spec/proposal for multi-dimensional arrays and slices, but it looks like it’s a low priority feature at this point in time.</p>
<p>Accessing Non-Existing Map Keys</p>
<p>This is a gotcha for developers who expect to get “nil” identifiers (like it’s done in other languages). The returned value will be “nil” if the “zero value” for the corresponding data type is “nil”, but it’ll be different for other data types. Checking for the appropriate “zero value” can be used to determine if the map record exists, but it’s not always reliable (e.g., what do you do if you have a map of booleans where the “zero value” is false). The most reliable way to know if a given map record exists is to check the second value returned by the map access operation.</p>
<p>Bad:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    x := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">"one"</span>:<span class="string">"a"</span>,<span class="string">"two"</span>:<span class="string">""</span>,<span class="string">"three"</span>:<span class="string">"c"</span>&#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> v := x[<span class="string">"two"</span>]; v == <span class="string">""</span> &#123; <span class="comment">//incorrect</span></div><div class="line">        fmt.Println(<span class="string">"no entry"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Good:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    x := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">"one"</span>:<span class="string">"a"</span>,<span class="string">"two"</span>:<span class="string">""</span>,<span class="string">"three"</span>:<span class="string">"c"</span>&#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> _,ok := x[<span class="string">"two"</span>]; !ok &#123;</div><div class="line">        fmt.Println(<span class="string">"no entry"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Strings Are Immutable</p>
<p>Trying to update an individual character in a string variable using the index operator will result in a failure. Strings are read-only byte slices (with a few extra properties). If you do need to update a string then use a byte slice instead converting it to a string type when necessary.</p>
<blockquote>
<p>Fails:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    x := <span class="string">"text"</span></div><div class="line">    x[<span class="number">0</span>] = <span class="string">'T'</span></div><div class="line"></div><div class="line">    fmt.Println(x)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Compile Error:</p>
</blockquote>
<p>/tmp/sandbox305565531/main.go:7: cannot assign to x[0]</p>
<blockquote>
<p>Works:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    x := <span class="string">"text"</span></div><div class="line">    xbytes := []<span class="keyword">byte</span>(x)</div><div class="line">    xbytes[<span class="number">0</span>] = <span class="string">'T'</span></div><div class="line"></div><div class="line">    fmt.Println(<span class="keyword">string</span>(xbytes)) <span class="comment">//prints Text</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>Note that this isn’t really the right way to update characters in a text string because a given character could be stored in multiple bytes. If you do need to make updates to a text string convert it to a rune sclice first. Even with rune slices a single character might span multiple runes, which can happen if you have characters with grave accent, for example. This complicated and ambiguous nature of “characters” is the reason why Go strings are represented as byte sequences.</p>
<p>Conversions Between Strings and Byte Slices</p>
<p>When you convert a string to a byte slice (and vice versa) you get a complete copy of the orginal data. It’s not like a cast operation in other languages and it’s not like reslicing where the new slice variable points to the same underlying array used by the original byte slice.</p>
<p>Go does have a couple of optimizations for []byte to string and string to  []byte conversions to avoid extra allocations (with more optimizations on the todo list).</p>
<p>The first optimization avoids extra allocations when []byte keys are used to lookup entries in map[string] collections: m[string(key)].</p>
<p>The second optimization avoids extra allocations in for range clauses where strings are converted to []byte: for i,v := range []byte(str) {…}.</p>
<p>Strings and Index Operator</p>
<p>The index operator on a string returns a byte value, not a character (like it’s done in other languages).</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    x := <span class="string">"text"</span></div><div class="line">    fmt.Println(x[<span class="number">0</span>]) <span class="comment">//print 116</span></div><div class="line">    fmt.Printf(<span class="string">"%T"</span>,x[<span class="number">0</span>]) <span class="comment">//prints uint8</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>If you need to access specific string “characters” (unicode code points/runes) use the for range clause. The official “unicode/utf8” package and the experimental utf8string package (golang.org/x/exp/utf8string) are also useful. The utf8string package includes a convenient At() method. Converting the string to a slice of runes is an option too.</p>
<p>Strings Are Not Always UTF8 Text</p>
<p>String values are not required to be UTF8 text. They can contain arbitrary bytes. The only time strings are UTF8 is when string literals are used. Even then they can include other data using escape sequences.</p>
<p>To know if you have a UTF8 text string use the ValidString() function from the “unicode/utf8” package.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"unicode/utf8"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    data1 := <span class="string">"ABC"</span></div><div class="line">    fmt.Println(utf8.ValidString(data1)) <span class="comment">//prints: true</span></div><div class="line"></div><div class="line">    data2 := <span class="string">"A\xfeC"</span></div><div class="line">    fmt.Println(utf8.ValidString(data2)) <span class="comment">//prints: false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>String Length</p>
<p>Let’s say you are a python developer and you have the following piece of code:</p>
<p>data = u’♥’<br>print(len(data)) #prints: 1<br>When you convert it to a similar Go code snippet you might be surprised.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    data := <span class="string">"♥"</span></div><div class="line">    fmt.Println(<span class="built_in">len</span>(data)) <span class="comment">//prints: 3</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The built-in len() function returns the number of bytes instead of the number of characters like it’s done for unicode strings in Python.</p>
<p>To get the same results in Go use the RuneCountInString() function from the “unicode/utf8” package.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"unicode/utf8"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    data := <span class="string">"♥"</span></div><div class="line">    fmt.Println(utf8.RuneCountInString(data)) <span class="comment">//prints: 1</span></div><div class="line">Technically the RuneCountInString() function doesn<span class="string">'t return the number of characters because a single character may span multiple runes.</span></div><div class="line"></div><div class="line">```go</div><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">    "fmt"</div><div class="line">    "unicode/utf8"</div><div class="line">)</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    data := "é"</div><div class="line">    fmt.Println(len(data))                    //prints: 3</div><div class="line">    fmt.Println(utf8.RuneCountInString(data)) //prints: 2</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Missing Comma In Multi-Line Slice, Array, and Map Literals</p>
<blockquote>
<p>Fails:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    x := []<span class="keyword">int</span>&#123;</div><div class="line">    <span class="number">1</span>,</div><div class="line">    <span class="number">2</span> <span class="comment">//error</span></div><div class="line">    &#125;</div><div class="line">    _ = x</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Compile Errors:</p>
</blockquote>
<p>/tmp/sandbox367520156/main.go:6: syntax error: need trailing comma before newline in composite literal /tmp/sandbox367520156/main.go:8: non-declaration statement outside function body /tmp/sandbox367520156/main.go:9: syntax error: unexpected }</p>
<blockquote>
<p>Works:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    x := []<span class="keyword">int</span>&#123;</div><div class="line">    <span class="number">1</span>,</div><div class="line">    <span class="number">2</span>,</div><div class="line">    &#125;</div><div class="line">    x = x</div><div class="line"></div><div class="line">    y := []<span class="keyword">int</span>&#123;<span class="number">3</span>,<span class="number">4</span>,&#125; <span class="comment">//no error</span></div><div class="line">    y = y</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>You won’t get a compiler error if you leave the trailing comma when you collapse the declaration to be on a single line.</p>
<p>log.Fatal and log.Panic Do More Than Log</p>
<p>Logging libraries often provide different log levels. Unlike those logging libraries, the log package in Go does more than log if you call its Fatal<em>() and Panic</em>() functions. When your app calls those functions Go will also terminate your app :-)</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"log"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    log.Fatalln(<span class="string">"Fatal Level: log entry"</span>) <span class="comment">//app exits here</span></div><div class="line">    log.Println(<span class="string">"Normal Level: log entry"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Built-in Data Structure Operations Are Not Synchronized</p>
<p>Even though Go has a number of features to support concurrency natively, concurrency safe data collections are not one them :-) It’s your responsibility to ensure the data collection updates are atomic. Goroutines and channels are the recommended way to implement those atomic operations, but you can also leverage the “sync” package if it makes sense for your application.</p>
<p>Iteration Values For Strings in “range” Clauses</p>
<p>The index value (the first value returned by the “range” operation) is the index of the first byte for the current “character” (unicode code point/rune) returned in the second value. It’s not the index for the current “character” like it’s done in other languages. Note that an actual character might be represented by multiple runes. Make sure to check out the “norm” package (golang.org/x/text/unicode/norm) if you need to work with characters.</p>
<p>The for range clauses with string variables will try to interpret the data as UTF8 text. For any byte sequences it doesn’t understand it will return 0xfffd runes (aka unicode replacement characters) instead of the actual data. If you have arbitrary (non-UTF8 text) data stored in your string variables, make sure to convert them to byte slices to get all stored data as is.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    data := <span class="string">"A\xfe\x02\xff\x04"</span></div><div class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> data &#123;</div><div class="line">        fmt.Printf(<span class="string">"%#x "</span>,v)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//prints: 0x41 0xfffd 0x2 0xfffd 0x4 (not ok)</span></div><div class="line"></div><div class="line">    fmt.Println()</div><div class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> []<span class="keyword">byte</span>(data) &#123;</div><div class="line">        fmt.Printf(<span class="string">"%#x "</span>,v)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//prints: 0x41 0xfe 0x2 0xff 0x4 (good)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Iterating Through a Map Using a “for range” Clause</p>
<p>This is a gotcha if you expect the items to be in a certain order (e.g., ordered by the key value). Each map iteration will produce different results. The Go runtime tries to go an extra mile randomizing the iteration order, but it doesn’t always succeed so you may get several identical map iterations. Don’t be surprised to see 5 identical iterations in a row.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"one"</span>:<span class="number">1</span>,<span class="string">"two"</span>:<span class="number">2</span>,<span class="string">"three"</span>:<span class="number">3</span>,<span class="string">"four"</span>:<span class="number">4</span>&#125;</div><div class="line">    <span class="keyword">for</span> k,v := <span class="keyword">range</span> m &#123;</div><div class="line">        fmt.Println(k,v)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>And if you use the Go Playground (<a href="https://play.golang.org/" target="_blank" rel="external">https://play.golang.org/</a>) you’ll always get the same results because it doesn’t recompile the code unless you make a change.</p>
<p>Fallthrough Behavior in “switch” Statements</p>
<p>The “case” blocks in “switch” statements break by default. This is different from other languages where the default behavior is to fall through to the next “case” block.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    isSpace := <span class="function"><span class="keyword">func</span><span class="params">(ch <span class="keyword">byte</span>)</span> <span class="title">bool</span></span> &#123;</div><div class="line">        <span class="keyword">switch</span>(ch) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">' '</span>: <span class="comment">//error</span></div><div class="line">        <span class="keyword">case</span> <span class="string">'\t'</span>:</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fmt.Println(isSpace(<span class="string">'\t'</span>)) <span class="comment">//prints true (ok)</span></div><div class="line">    fmt.Println(isSpace(<span class="string">' '</span>))  <span class="comment">//prints false (not ok)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>You can force the “case” blocks to fall through by using the “fallthrough” statement at the end of each “case” block. You can also rewrite your switch statement to use expression lists in the “case” blocks.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    isSpace := <span class="function"><span class="keyword">func</span><span class="params">(ch <span class="keyword">byte</span>)</span> <span class="title">bool</span></span> &#123;</div><div class="line">        <span class="keyword">switch</span>(ch) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">' '</span>, <span class="string">'\t'</span>:</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fmt.Println(isSpace(<span class="string">'\t'</span>)) <span class="comment">//prints true (ok)</span></div><div class="line">    fmt.Println(isSpace(<span class="string">' '</span>))  <span class="comment">//prints true (ok)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Increments and Decrements</p>
<p>Many languages have increment and decrement operators. Unlike other languages, Go doesn’t support the prefix version of the operations. You also can’t use these two operators in expressions.</p>
<blockquote>
<p>Fails:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    data := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</div><div class="line">    i := <span class="number">0</span></div><div class="line">    ++i <span class="comment">//error</span></div><div class="line">    fmt.Println(data[i++]) <span class="comment">//error</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Compile Errors:</p>
</blockquote>
<p>/tmp/sandbox101231828/main.go:8: syntax error: unexpected ++ /tmp/sandbox101231828/main.go:9: syntax error: unexpected ++, expecting :</p>
<blockquote>
<p>Works:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    data := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</div><div class="line">    i := <span class="number">0</span></div><div class="line">    i++</div><div class="line">    fmt.Println(data[i])</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>Bitwise NOT Operator</p>
<p>Many languages use ~ as the unary NOT operator (aka bitwise complement), but Go reuses the XOR operator (^) for that.</p>
<blockquote>
<p>Fails:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    fmt.Println(~<span class="number">2</span>) <span class="comment">//error</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Compile Error:</p>
</blockquote>
<p>/tmp/sandbox965529189/main.go:6: the bitwise complement operator is ^</p>
<blockquote>
<p>Works:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> d <span class="keyword">uint8</span> = <span class="number">2</span></div><div class="line">    fmt.Printf(<span class="string">"%08b\n"</span>,^d)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>Go still uses ^ as the XOR operator, which may be confusing for some people.</p>
<p>If you want you can represent a unary NOT operation (e.g, NOT 0x02) with a binary XOR operation (e.g., 0x02 XOR 0xff). This could explain why ^ is reused to represent unary NOT operations.</p>
<p>Go also has a special ‘AND NOT’ bitwise operator (&amp;^), which adds to the NOT operator confusion. It looks like a special feature/hack to support  A AND (NOT B) without requiring parentheses.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> a <span class="keyword">uint8</span> = <span class="number">0x82</span></div><div class="line">    <span class="keyword">var</span> b <span class="keyword">uint8</span> = <span class="number">0x02</span></div><div class="line">    fmt.Printf(<span class="string">"%08b [A]\n"</span>,a)</div><div class="line">    fmt.Printf(<span class="string">"%08b [B]\n"</span>,b)</div><div class="line"></div><div class="line">    fmt.Printf(<span class="string">"%08b (NOT B)\n"</span>,^b)</div><div class="line">    fmt.Printf(<span class="string">"%08b ^ %08b = %08b [B XOR 0xff]\n"</span>,b,<span class="number">0xff</span>,b ^ <span class="number">0xff</span>)</div><div class="line"></div><div class="line">    fmt.Printf(<span class="string">"%08b ^ %08b = %08b [A XOR B]\n"</span>,a,b,a ^ b)</div><div class="line">    fmt.Printf(<span class="string">"%08b &amp; %08b = %08b [A AND B]\n"</span>,a,b,a &amp; b)</div><div class="line">    fmt.Printf(<span class="string">"%08b &amp;^%08b = %08b [A 'AND NOT' B]\n"</span>,a,b,a &amp;^ b)</div><div class="line">    fmt.Printf(<span class="string">"%08b&amp;(^%08b)= %08b [A AND (NOT B)]\n"</span>,a,b,a &amp; (^b))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Operator Precedence Differences</p>
<p>Aside from the “bit clear” operators (&amp;^) Go has a set of standard operators shared by many other languages. The operator precedence is not always the same though.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    fmt.Printf(<span class="string">"0x2 &amp; 0x2 + 0x4 -&gt; %#x\n"</span>,<span class="number">0x2</span> &amp; <span class="number">0x2</span> + <span class="number">0x4</span>)</div><div class="line">    <span class="comment">//prints: 0x2 &amp; 0x2 + 0x4 -&gt; 0x6</span></div><div class="line">    <span class="comment">//Go:    (0x2 &amp; 0x2) + 0x4</span></div><div class="line">    <span class="comment">//C++:    0x2 &amp; (0x2 + 0x4) -&gt; 0x2</span></div><div class="line"></div><div class="line">    fmt.Printf(<span class="string">"0x2 + 0x2 &lt;&lt; 0x1 -&gt; %#x\n"</span>,<span class="number">0x2</span> + <span class="number">0x2</span> &lt;&lt; <span class="number">0x1</span>)</div><div class="line">    <span class="comment">//prints: 0x2 + 0x2 &lt;&lt; 0x1 -&gt; 0x6</span></div><div class="line">    <span class="comment">//Go:     0x2 + (0x2 &lt;&lt; 0x1)</span></div><div class="line">    <span class="comment">//C++:   (0x2 + 0x2) &lt;&lt; 0x1 -&gt; 0x8</span></div><div class="line"></div><div class="line">    fmt.Printf(<span class="string">"0xf | 0x2 ^ 0x2 -&gt; %#x\n"</span>,<span class="number">0xf</span> | <span class="number">0x2</span> ^ <span class="number">0x2</span>)</div><div class="line">    <span class="comment">//prints: 0xf | 0x2 ^ 0x2 -&gt; 0xd</span></div><div class="line">    <span class="comment">//Go:    (0xf | 0x2) ^ 0x2</span></div><div class="line">    <span class="comment">//C++:    0xf | (0x2 ^ 0x2) -&gt; 0xf</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Unexported Structure Fields Are Not Encoded</p>
<p>The struct fields starting with lowercase letters will not be (json, xml, gob, etc.) encoded, so when you decode the structure you’ll end up with zero values in those unexported fields.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"encoding/json"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> MyData <span class="keyword">struct</span> &#123;</div><div class="line">    One <span class="keyword">int</span></div><div class="line">    two <span class="keyword">string</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>func main() {<br>    in := MyData{1,”two”}<br>    fmt.Printf(“%#v\n”,in) //prints main.MyData{One:1, two:”two”}</p>
<pre><code>encoded,_ := json.Marshal(in)
fmt.Println(string(encoded)) //prints {&quot;One&quot;:1}

var out MyData
json.Unmarshal(encoded,&amp;out)

fmt.Printf(&quot;%#v\n&quot;,out) //prints main.MyData{One:1, two:&quot;&quot;}
</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">App Exits With Active Goroutines</div><div class="line"></div><div class="line"></div><div class="line">The app will not wait for all your goroutines to complete. This is a common mistake for beginners in general. Everybody starts somewhere, so there&apos;s no shame in making rookie mistakes :-)</div><div class="line"></div><div class="line">```go</div><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">    &quot;fmt&quot;</div><div class="line">    &quot;time&quot;</div><div class="line">)</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    workerCount := 2</div><div class="line"></div><div class="line">    for i := 0; i &lt; workerCount; i++ &#123;</div><div class="line">        go doit(i)</div><div class="line">    &#125;</div><div class="line">    time.Sleep(1 * time.Second)</div><div class="line">    fmt.Println(&quot;all done!&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>func doit(workerId int) {<br>    fmt.Printf(“[%v] is running\n”,workerId)<br>    time.Sleep(3 * time.Second)<br>    fmt.Printf(“[%v] is done\n”,workerId)<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">You&apos;ll see:</div><div class="line"></div><div class="line">[0] is running</div><div class="line">[1] is running</div><div class="line">all done!</div><div class="line"></div><div class="line">One of the most common solutions is to use a &quot;WaitGroup&quot; variable. It will allow the main goroutine to wait until all worker goroutines are done. If your app has long running workers with message processing loops you&apos;ll also need a way to signal those goroutines that it&apos;s time to exit. You can send a &quot;kill&quot; message to each worker. Another option is to close a channel all workers are receiving from. It&apos;s a simple way to signal all goroutines at once.</div><div class="line"></div><div class="line">```go</div><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">    &quot;fmt&quot;</div><div class="line">    &quot;sync&quot;</div><div class="line">)</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    var wg sync.WaitGroup</div><div class="line">    done := make(chan struct&#123;&#125;)</div><div class="line">    workerCount := 2</div><div class="line"></div><div class="line">    for i := 0; i &lt; workerCount; i++ &#123;</div><div class="line">        wg.Add(1)</div><div class="line">        go doit(i,done,wg)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    close(done)</div><div class="line">    wg.Wait()</div><div class="line">    fmt.Println(&quot;all done!&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>func doit(workerId int,done &lt;-chan struct{},wg sync.WaitGroup) {<br>    fmt.Printf(“[%v] is running\n”,workerId)<br>    defer wg.Done()<br>    &lt;- done<br>    fmt.Printf(“[%v] is done\n”,workerId)<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">If you run this app you&apos;ll see:</div><div class="line"></div><div class="line">[0] is running</div><div class="line">[0] is done</div><div class="line">[1] is running</div><div class="line">[1] is done</div><div class="line"></div><div class="line">Looks like the workers are done before the main goroutine exists. Great! However, you&apos;ll also see this:</div><div class="line"></div><div class="line">fatal error: all goroutines are asleep - deadlock!</div><div class="line"></div><div class="line">That&apos;s not so great :-) What&apos;s going on? Why is there a deadlock? The workers exited and they executed wg.Done(). The app should work.</div><div class="line"></div><div class="line">The deadlock happens because each worker gets a copy of the original &quot;WaitGroup&quot; variable. When workers execute wg.Done() it has no effect on the &quot;WaitGroup&quot; variable in the main goroutine.</div><div class="line"></div><div class="line">```go</div><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">    &quot;fmt&quot;</div><div class="line">    &quot;sync&quot;</div><div class="line">)</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    var wg sync.WaitGroup</div><div class="line">    done := make(chan struct&#123;&#125;)</div><div class="line">    wq := make(chan interface&#123;&#125;)</div><div class="line">    workerCount := 2</div><div class="line"></div><div class="line">    for i := 0; i &lt; workerCount; i++ &#123;</div><div class="line">        wg.Add(1)</div><div class="line">        go doit(i,wq,done,&amp;wg)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    for i := 0; i &lt; workerCount; i++ &#123;</div><div class="line">        wq &lt;- i</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    close(done)</div><div class="line">    wg.Wait()</div><div class="line">    fmt.Println(&quot;all done!&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>func doit(workerId int, wq &lt;-chan interface{},done &lt;-chan struct{},wg *sync.WaitGroup) {<br>    fmt.Printf(“[%v] is running\n”,workerId)<br>    defer wg.Done()<br>    for {<br>        select {<br>        case m := &lt;- wq:<br>            fmt.Printf(“[%v] m =&gt; %v\n”,workerId,m)<br>        case &lt;- done:<br>            fmt.Printf(“[%v] is done\n”,workerId)<br>            return<br>        }<br>    }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">Now it works as expected :-)</div><div class="line"></div><div class="line">Sending to an Unbuffered Channel Returns As Soon As the Target Receiver Is Ready</div><div class="line"></div><div class="line"></div><div class="line">The sender will not be blocked until your message is processed by the receiver. Depending on the machine where you are running the code, the receiver goroutine may or may not have enough time to process the message before the sender continues its execution.</div><div class="line"></div><div class="line">```go</div><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    ch := make(chan string)</div><div class="line"></div><div class="line">    go func() &#123;</div><div class="line">        for m := range ch &#123;</div><div class="line">            fmt.Println(&quot;processed:&quot;,m)</div><div class="line">        &#125;</div><div class="line">    &#125;()</div><div class="line"></div><div class="line">    ch &lt;- &quot;cmd.1&quot;</div><div class="line">    ch &lt;- &quot;cmd.2&quot; //won&apos;t be processed</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Sending to an Closed Channel Causes a Panic</p>
<p>Receiving from a closed channel is safe. The ok return value in a receive statement will be set to false indicating that no data was received. If you are receiving from a buffered channel you’ll get the buffered data first and once it’s empty the ok return value will be false.</p>
<p>Sending data to a closed channel causes a panic. It is a documented behavior, but it’s not very intuitive for new Go developers who might expect the send behavior to be similar to the receive behavior.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</div><div class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(idx <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">            ch &lt;- (idx + <span class="number">1</span>) * <span class="number">2</span></div><div class="line">        &#125;(i)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//get the first result</span></div><div class="line">    fmt.Println(&lt;-ch)</div><div class="line">    <span class="built_in">close</span>(ch) <span class="comment">//not ok (you still have other senders)</span></div><div class="line">    <span class="comment">//do other work</span></div><div class="line">    time.Sleep(<span class="number">2</span> * time.Second)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Depending on your application the fix will be different. It might be a minor code change or it might require a change in your application design. Either way, you’ll need to make sure your application doesn’t try to send data to a closed channel.</p>
<p>The buggy example can be fixed by using a special cancellation channel to signal the remaining workers that their results are no longer neeeded.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</div><div class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</div><div class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(idx <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">            <span class="keyword">select</span> &#123;</div><div class="line">            <span class="keyword">case</span> ch &lt;- (idx + <span class="number">1</span>) * <span class="number">2</span>: fmt.Println(idx,<span class="string">"sent result"</span>)</div><div class="line">            <span class="keyword">case</span> &lt;- done: fmt.Println(idx,<span class="string">"exiting"</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;(i)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//get first result</span></div><div class="line">    fmt.Println(<span class="string">"result:"</span>,&lt;-ch)</div><div class="line">    <span class="built_in">close</span>(done)</div><div class="line">    <span class="comment">//do other work</span></div><div class="line">    time.Sleep(<span class="number">3</span> * time.Second)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Using “nil” Channels</p>
<p>Send and receive operations on a nil channel block forver. It’s a well documented behavior, but it can be a surprise for new Go developers.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> ch <span class="keyword">chan</span> <span class="keyword">int</span></div><div class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</div><div class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(idx <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">            ch &lt;- (idx + <span class="number">1</span>) * <span class="number">2</span></div><div class="line">        &#125;(i)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//get first result</span></div><div class="line">    fmt.Println(<span class="string">"result:"</span>,&lt;-ch)</div><div class="line">    <span class="comment">//do other work</span></div><div class="line">    time.Sleep(<span class="number">2</span> * time.Second)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>If you run the code you’ll see a runtime error like this:  fatal error: all goroutines are asleep - deadlock!</p>
<p>This behavior can be used as a way to dynamically enable and disable case blocks in a select statement.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"><span class="keyword">import</span> <span class="string">"time"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    inch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line">    outch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line"></div><div class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">var</span> in &lt;- <span class="keyword">chan</span> <span class="keyword">int</span> = inch</div><div class="line">        <span class="keyword">var</span> out <span class="keyword">chan</span> &lt;- <span class="keyword">int</span></div><div class="line">        <span class="keyword">var</span> val <span class="keyword">int</span></div><div class="line">        <span class="keyword">for</span> &#123;</div><div class="line">            <span class="keyword">select</span> &#123;</div><div class="line">            <span class="keyword">case</span> out &lt;- val:</div><div class="line">                out = <span class="literal">nil</span></div><div class="line">                in = inch</div><div class="line">            <span class="keyword">case</span> val = &lt;- in:</div><div class="line">                out = outch</div><div class="line">                in = <span class="literal">nil</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;()</div><div class="line"></div><div class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">for</span> r := <span class="keyword">range</span> outch &#123;</div><div class="line">            fmt.Println(<span class="string">"result:"</span>,r)</div><div class="line">        &#125;</div><div class="line">    &#125;()</div><div class="line"></div><div class="line">    time.Sleep(<span class="number">0</span>)</div><div class="line">    inch &lt;- <span class="number">1</span></div><div class="line">    inch &lt;- <span class="number">2</span></div><div class="line">    time.Sleep(<span class="number">3</span> * time.Second)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Methods with Value Receivers Can’t Change the Original Value</p>
<p>Method receivers are like regular function arguments. If it’s declared to be a value then your function/method gets a copy of your receiver argument. This means making changes to the receiver will not affect the original value unless your receiver is a map or slice variable and you are updating the items in the collection or the fields you are updating in the receiver are pointers.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> data <span class="keyword">struct</span> &#123;</div><div class="line">    num <span class="keyword">int</span></div><div class="line">    key *<span class="keyword">string</span></div><div class="line">    items <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">bool</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>func (this *data) pmethod() {<br>    this.num = 7<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">func (this data) vmethod() &#123;</div><div class="line">    this.num = 8</div><div class="line">    *this.key = &quot;v.key&quot;</div><div class="line">    this.items[&quot;vmethod&quot;] = true</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>func main() {<br>    key := “key.1”<br>    d := data{1,&amp;key,make(map[string]bool)}</p>
<pre><code>fmt.Printf(&quot;num=%v key=%v items=%v\n&quot;,d.num,*d.key,d.items)
//prints num=1 key=key.1 items=map[]

d.pmethod()
fmt.Printf(&quot;num=%v key=%v items=%v\n&quot;,d.num,*d.key,d.items)
//prints num=7 key=key.1 items=map[]

d.vmethod()
fmt.Printf(&quot;num=%v key=%v items=%v\n&quot;,d.num,*d.key,d.items)
//prints num=7 key=v.key items=map[vmethod:true]
</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Closing HTTP Response Body</div><div class="line"></div><div class="line">level: intermediate</div><div class="line">When you make requests using the standard http library you get a http response variable. If you don&apos;t read the response body you still need to close it. Note that you must do it for empty responses too. It&apos;s very easy to forget especially for new Go developers.</div><div class="line"></div><div class="line">Some new Go developers do try to close the response body, but they do it in the wrong place.</div><div class="line"></div><div class="line">```go</div><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">    &quot;fmt&quot;</div><div class="line">    &quot;net/http&quot;</div><div class="line">    &quot;io/ioutil&quot;</div><div class="line">)</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    resp, err := http.Get(&quot;https://api.ipify.org?format=json&quot;)</div><div class="line">    defer resp.Body.Close()//not ok</div><div class="line">    if err != nil &#123;</div><div class="line">        fmt.Println(err)</div><div class="line">        return</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    body, err := ioutil.ReadAll(resp.Body)</div><div class="line">    if err != nil &#123;</div><div class="line">        fmt.Println(err)</div><div class="line">        return</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fmt.Println(string(body))</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>This code works for successful requests, but if the http request fails the resp variable might be nil, which will cause a runtime panic.</p>
<p>The most common why to close the response body is by using a defer call after the http response error check.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"net/http"</span></div><div class="line">    <span class="string">"io/ioutil"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    resp, err := http.Get(<span class="string">"https://api.ipify.org?format=json"</span>)</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        fmt.Println(err)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">defer</span> resp.Body.Close()<span class="comment">//ok, most of the time :-)</span></div><div class="line">    body, err := ioutil.ReadAll(resp.Body)</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        fmt.Println(err)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fmt.Println(<span class="keyword">string</span>(body))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Most of the time when your http request fails the resp variable will be nil and the err variable will be non-nil. However, when you get a redirection failure both variables will be non-nil. This means you can still end up with a leak.</p>
<p>You can fix this leak by adding a call to close non-nil response bodies in the http response error handling block. Another option is to use one defer call to close response bodies for all failed and successful requests.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"net/http"</span></div><div class="line">    <span class="string">"io/ioutil"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    resp, err := http.Get(<span class="string">"https://api.ipify.org?format=json"</span>)</div><div class="line">    <span class="keyword">if</span> resp != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="keyword">defer</span> resp.Body.Close()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        fmt.Println(err)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    body, err := ioutil.ReadAll(resp.Body)</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        fmt.Println(err)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fmt.Println(<span class="keyword">string</span>(body))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The orignal implementation for resp.Body.Close() also reads and discards the remaining response body data. This ensured that the http connection could be reused for another request if the keepalive http connection behavior is enabled. The latest http client behavior is different. Now it’s your responsibility to read and discard the remaining response data. If you don’t do it the http connection might be closed instead of being reused. This little gotcha is supposed to be documented in Go 1.5.</p>
<p>If reusing the http connection is important for your application you might need to add something like this at the end of your response processing logic:</p>
<p>_, err = io.Copy(ioutil.Discard, resp.Body)<br>It will be necessary if you don’t read the entire response body right away, which might happen if you are processing json API responses with code like this:</p>
<p>json.NewDecoder(resp.Body).Decode(&amp;data)<br>Closing HTTP Connections</p>
<p>level: intermediate<br>Some HTTP servers keep network connections open for a while (based on the HTTP 1.1 spec and the server “keep-alive” configurations). By default, the standard http library will close the network connections only when the target HTTP server asks for it. This means your app may run out of sockets/file descriptors under certain conditions.</p>
<p>You can ask the http library to close the connection after your request is done by setting the Close field in the request variable to true.</p>
<p>Another option is to add a Connection request header and set it to close. The target HTTP server should respond with a Connection: close header too. When the http library sees this response header it will also close the connection.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"net/http"</span></div><div class="line">    <span class="string">"io/ioutil"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    req, err := http.NewRequest(<span class="string">"GET"</span>,<span class="string">"http://golang.org"</span>,<span class="literal">nil</span>)</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        fmt.Println(err)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    req.Close = <span class="literal">true</span></div><div class="line">    <span class="comment">//or do this:</span></div><div class="line">    <span class="comment">//req.Header.Add("Connection", "close")</span></div><div class="line"></div><div class="line">    resp, err := http.DefaultClient.Do(req)</div><div class="line">    <span class="keyword">if</span> resp != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="keyword">defer</span> resp.Body.Close()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        fmt.Println(err)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    body, err := ioutil.ReadAll(resp.Body)</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        fmt.Println(err)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fmt.Println(<span class="built_in">len</span>(<span class="keyword">string</span>(body)))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>You can also disable http connection reuse globally. You’ll need to create a custom http transport configuration for it.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"net/http"</span></div><div class="line">    <span class="string">"io/ioutil"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    tr := &amp;http.Transport&#123;DisableKeepAlives: <span class="literal">true</span>&#125;</div><div class="line">    client := &amp;http.Client&#123;Transport: tr&#125;</div><div class="line"></div><div class="line">    resp, err := client.Get(<span class="string">"http://golang.org"</span>)</div><div class="line">    <span class="keyword">if</span> resp != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="keyword">defer</span> resp.Body.Close()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        fmt.Println(err)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fmt.Println(resp.StatusCode)</div><div class="line"></div><div class="line">    body, err := ioutil.ReadAll(resp.Body)</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">        fmt.Println(err)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fmt.Println(<span class="built_in">len</span>(<span class="keyword">string</span>(body)))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>If you send a lot of requests to the same HTTP server it’s ok to keep the network connection open. However, if your app sends one or two requests to many different HTTP servers in a short period of time it’s a good idea to close the network connections right after your app receives the responses. Increasing the open file limit might be a good idea too. The correct solution depends on your application though.</p>
<p>Unmarshalling JSON Numbers into Interface Values</p>
<p>level: intermediate<br>By default, Go treats numeric values in JSON as float64 numbers when you decode/unmarshal JSON data into an interface. This means the following code will fail with a panic:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">  <span class="string">"encoding/json"</span></div><div class="line">  <span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">var</span> data = []<span class="keyword">byte</span>(<span class="string">`&#123;"status": 200&#125;`</span>)</div><div class="line"></div><div class="line">  <span class="keyword">var</span> result <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</div><div class="line">  <span class="keyword">if</span> err := json.Unmarshal(data, &amp;result); err != <span class="literal">nil</span> &#123;</div><div class="line">    fmt.Println(<span class="string">"error:"</span>, err)</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> status = result[<span class="string">"status"</span>].(<span class="keyword">int</span>) <span class="comment">//error</span></div><div class="line">  fmt.Println(<span class="string">"status value:"</span>,status)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Runtime Panic:</p>
<p>panic: interface conversion: interface is float64, not int</p>
<p>If the JSON value you are trying to decode is an integer you have serveral options.</p>
<p>Option one: use the float value as-is :-)</p>
<p>Option two: convert the float value to the integer type you need.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">  <span class="string">"encoding/json"</span></div><div class="line">  <span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">var</span> data = []<span class="keyword">byte</span>(<span class="string">`&#123;"status": 200&#125;`</span>)</div><div class="line"></div><div class="line">  <span class="keyword">var</span> result <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</div><div class="line">  <span class="keyword">if</span> err := json.Unmarshal(data, &amp;result); err != <span class="literal">nil</span> &#123;</div><div class="line">    fmt.Println(<span class="string">"error:"</span>, err)</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> status = <span class="keyword">uint64</span>(result[<span class="string">"status"</span>].(<span class="keyword">float64</span>)) <span class="comment">//ok</span></div><div class="line">  fmt.Println(<span class="string">"status value:"</span>,status)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Option three: use a Decoder type to unmarshal JSON and tell it to represent JSON numbers using the Number interface type.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">  <span class="string">"encoding/json"</span></div><div class="line">  <span class="string">"bytes"</span></div><div class="line">  <span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">var</span> data = []<span class="keyword">byte</span>(<span class="string">`&#123;"status": 200&#125;`</span>)</div><div class="line"></div><div class="line">  <span class="keyword">var</span> result <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</div><div class="line">  <span class="keyword">var</span> decoder = json.NewDecoder(bytes.NewReader(data))</div><div class="line">  decoder.UseNumber()</div><div class="line"></div><div class="line">  <span class="keyword">if</span> err := decoder.Decode(&amp;result); err != <span class="literal">nil</span> &#123;</div><div class="line">    fmt.Println(<span class="string">"error:"</span>, err)</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> status,_ = result[<span class="string">"status"</span>].(json.Number).Int64() <span class="comment">//ok</span></div><div class="line">  fmt.Println(<span class="string">"status value:"</span>,status)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>You can use the string representation of your Number value to unmarshal it to a different numeric type:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">  <span class="string">"encoding/json"</span></div><div class="line">  <span class="string">"bytes"</span></div><div class="line">  <span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">var</span> data = []<span class="keyword">byte</span>(<span class="string">`&#123;"status": 200&#125;`</span>)</div><div class="line"></div><div class="line">  <span class="keyword">var</span> result <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</div><div class="line">  <span class="keyword">var</span> decoder = json.NewDecoder(bytes.NewReader(data))</div><div class="line">  decoder.UseNumber()</div><div class="line"></div><div class="line">  <span class="keyword">if</span> err := decoder.Decode(&amp;result); err != <span class="literal">nil</span> &#123;</div><div class="line">    fmt.Println(<span class="string">"error:"</span>, err)</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> status <span class="keyword">uint64</span></div><div class="line">  <span class="keyword">if</span> err := json.Unmarshal([]<span class="keyword">byte</span>(result[<span class="string">"status"</span>].(json.Number).String()), &amp;status); err != <span class="literal">nil</span> &#123;</div><div class="line">    fmt.Println(<span class="string">"error:"</span>, err)</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  fmt.Println(<span class="string">"status value:"</span>,status)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Option four: use a struct type that maps your numeric value to the numeric type you need.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">  <span class="string">"encoding/json"</span></div><div class="line">  <span class="string">"bytes"</span></div><div class="line">  <span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">  <span class="keyword">var</span> data = []<span class="keyword">byte</span>(<span class="string">`&#123;"status": 200&#125;`</span>)</div><div class="line"></div><div class="line">  <span class="keyword">var</span> result <span class="keyword">struct</span> &#123;</div><div class="line">    Status <span class="keyword">uint64</span> <span class="string">`json:"status"`</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> err := json.NewDecoder(bytes.NewReader(data)).Decode(&amp;result); err != <span class="literal">nil</span> &#123;</div><div class="line">    fmt.Println(<span class="string">"error:"</span>, err)</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  fmt.Printf(<span class="string">"result =&gt; %+v"</span>,result)</div><div class="line">  <span class="comment">//prints: result =&gt; &#123;Status:200&#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Option five: use a struct that maps your numeric value to the json.RawMessage type if you need to defer the value decoding.</p>
<p>This option is useful if you have to perform conditional JSON field decoding where the field type or structure might change.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">  <span class="string">"encoding/json"</span></div><div class="line">  <span class="string">"bytes"</span></div><div class="line">  <span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">  records := [][]<span class="keyword">byte</span>&#123;</div><div class="line">    []<span class="keyword">byte</span>(<span class="string">`&#123;"status": 200, "tag":"one"&#125;`</span>),</div><div class="line">    []<span class="keyword">byte</span>(<span class="string">`&#123;"status":"ok", "tag":"two"&#125;`</span>),</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> idx, record := <span class="keyword">range</span> records &#123;</div><div class="line">    <span class="keyword">var</span> result <span class="keyword">struct</span> &#123;</div><div class="line">      StatusCode <span class="keyword">uint64</span></div><div class="line">      StatusName <span class="keyword">string</span></div><div class="line">      Status json.RawMessage <span class="string">`json:"status"`</span></div><div class="line">      Tag <span class="keyword">string</span>             <span class="string">`json:"tag"`</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> err := json.NewDecoder(bytes.NewReader(record)).Decode(&amp;result); err != <span class="literal">nil</span> &#123;</div><div class="line">      fmt.Println(<span class="string">"error:"</span>, err)</div><div class="line">      <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> sstatus <span class="keyword">string</span></div><div class="line">    <span class="keyword">if</span> err := json.Unmarshal(result.Status, &amp;sstatus); err == <span class="literal">nil</span> &#123;</div><div class="line">      result.StatusName = sstatus</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> nstatus <span class="keyword">uint64</span></div><div class="line">    <span class="keyword">if</span> err := json.Unmarshal(result.Status, &amp;nstatus); err == <span class="literal">nil</span> &#123;</div><div class="line">      result.StatusCode = nstatus</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fmt.Printf(<span class="string">"[%v] result =&gt; %+v\n"</span>,idx,result)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Comparing Structs, Arrays, Slices, and Maps</p>
<p>level: intermediate<br>You can use the equality operator, ==, to compare struct variables if each structure field can be compared with the equality operator.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> data <span class="keyword">struct</span> &#123;</div><div class="line">    num <span class="keyword">int</span></div><div class="line">    fp <span class="keyword">float32</span></div><div class="line">    <span class="built_in">complex</span> <span class="keyword">complex64</span></div><div class="line">    str <span class="keyword">string</span></div><div class="line">    char <span class="keyword">rune</span></div><div class="line">    yes <span class="keyword">bool</span></div><div class="line">    events &lt;-<span class="keyword">chan</span> <span class="keyword">string</span></div><div class="line">    handler <span class="keyword">interface</span>&#123;&#125;</div><div class="line">    ref *<span class="keyword">byte</span></div><div class="line">    raw [<span class="number">10</span>]<span class="keyword">byte</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>func main() {<br>    v1 := data{}<br>    v2 := data{}<br>    fmt.Println(“v1 == v2:”,v1 == v2) //prints: v1 == v2: true<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">If any of the struct fields are not comparable then using the equality operator will result in compile time errors. Note that arrays are comparable only if their data items are comparable.</div><div class="line"></div><div class="line">```go</div><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">type data struct &#123;</div><div class="line">    num int                //ok</div><div class="line">    checks [10]func() bool //not comparable</div><div class="line">    doit func() bool       //not comparable</div><div class="line">    m map[string] string   //not comparable</div><div class="line">    bytes []byte           //not comparable</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>func main() {<br>    v1 := data{}<br>    v2 := data{}<br>    fmt.Println(“v1 == v2:”,v1 == v2)<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Go does provide a number of helper functions to compare variables that can&apos;t be compared using the comparison operators.</div><div class="line"></div><div class="line">The most generic solution is to use the DeepEqual() function in the reflect package.</div><div class="line"></div><div class="line">```go</div><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">    &quot;fmt&quot;</div><div class="line">    &quot;reflect&quot;</div><div class="line">)</div><div class="line"></div><div class="line">type data struct &#123;</div><div class="line">    num int                //ok</div><div class="line">    checks [10]func() bool //not comparable</div><div class="line">    doit func() bool       //not comparable</div><div class="line">    m map[string] string   //not comparable</div><div class="line">    bytes []byte           //not comparable</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>func main() {<br>    v1 := data{}<br>    v2 := data{}<br>    fmt.Println(“v1 == v2:”,reflect.DeepEqual(v1,v2)) //prints: v1 == v2: true</p>
<pre><code>m1 := map[string]string{&quot;one&quot;: &quot;a&quot;,&quot;two&quot;: &quot;b&quot;}
m2 := map[string]string{&quot;two&quot;: &quot;b&quot;, &quot;one&quot;: &quot;a&quot;}
fmt.Println(&quot;m1 == m2:&quot;,reflect.DeepEqual(m1, m2)) //prints: m1 == m2: true

s1 := []int{1, 2, 3}
s2 := []int{1, 2, 3}
fmt.Println(&quot;s1 == s2:&quot;,reflect.DeepEqual(s1, s2)) //prints: s1 == s2: true
</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Aside from being slow (which may or may not be a deal breaker for your application), DeepEqual() also has its own gotchas.</div><div class="line"></div><div class="line">```go</div><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">    &quot;fmt&quot;</div><div class="line">    &quot;reflect&quot;</div><div class="line">)</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    var b1 []byte = nil</div><div class="line">    b2 := []byte&#123;&#125;</div><div class="line">    fmt.Println(&quot;b1 == b2:&quot;,reflect.DeepEqual(b1, b2)) //prints: b1 == b2: false</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>DeepEqual() doesn’t consider an empty slice to be equal to a “nil” slice. This behavior is different from the behavior you get using the bytes.Equal() function. bytes.Equal() considers “nil” and empty slices to be equal.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"bytes"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> b1 []<span class="keyword">byte</span> = <span class="literal">nil</span></div><div class="line">    b2 := []<span class="keyword">byte</span>&#123;&#125;</div><div class="line">    fmt.Println(<span class="string">"b1 == b2:"</span>,bytes.Equal(b1, b2)) <span class="comment">//prints: b1 == b2: true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>DeepEqual() isn’t always perfect comparing slices.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"reflect"</span></div><div class="line">    <span class="string">"encoding/json"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> str <span class="keyword">string</span> = <span class="string">"one"</span></div><div class="line">    <span class="keyword">var</span> in <span class="keyword">interface</span>&#123;&#125; = <span class="string">"one"</span></div><div class="line">    fmt.Println(<span class="string">"str == in:"</span>,str == in,reflect.DeepEqual(str, in))</div><div class="line">    <span class="comment">//prints: str == in: true true</span></div><div class="line"></div><div class="line">    v1 := []<span class="keyword">string</span>&#123;<span class="string">"one"</span>,<span class="string">"two"</span>&#125;</div><div class="line">    v2 := []<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">"one"</span>,<span class="string">"two"</span>&#125;</div><div class="line">    fmt.Println(<span class="string">"v1 == v2:"</span>,reflect.DeepEqual(v1, v2))</div><div class="line">    <span class="comment">//prints: v1 == v2: false (not ok)</span></div><div class="line"></div><div class="line">    data := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</div><div class="line">        <span class="string">"code"</span>: <span class="number">200</span>,</div><div class="line">        <span class="string">"value"</span>: []<span class="keyword">string</span>&#123;<span class="string">"one"</span>,<span class="string">"two"</span>&#125;,</div><div class="line">    &#125;</div><div class="line">    encoded, _ := json.Marshal(data)</div><div class="line">    <span class="keyword">var</span> decoded <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</div><div class="line">    json.Unmarshal(encoded, &amp;decoded)</div><div class="line">    fmt.Println(<span class="string">"data == decoded:"</span>,reflect.DeepEqual(data, decoded))</div><div class="line">    <span class="comment">//prints: data == decoded: false (not ok)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>If your byte slices (or strings) contain text data you might be tempted to use  ToUpper() or ToLower() from the “bytes” and “strings” packages when you need to compare values in a case insensitive manner (before using  ==,bytes.Equal(), or bytes.Compare()). It will work for English text, but it will not work for text in many other languages. strings.EqualFold() and  bytes.EqualFold() should be used instead.</p>
<p>If your byte slices contain secrets (e.g., cryptographic hashes, tokens, etc.) that need to be validated against user-provided data, don’t use reflect.DeepEqual(),  bytes.Equal(), or bytes.Compare() because those functions will make your application vulnerable to timing attacks. To avoid leaking the timing information use the functions from the ‘crypto/subtle’ package (e.g.,  subtle.ConstantTimeCompare()).</p>
<p>Recovering From a Panic</p>
<p>level: intermediate<br>The recover() function can be used to catch/intercept a panic. Calling  recover() will do the trick only when it’s done in a deferred function.</p>
<p>Incorrect:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="built_in">recover</span>() <span class="comment">//doesn't do anything</span></div><div class="line">    <span class="built_in">panic</span>(<span class="string">"not good"</span>)</div><div class="line">    <span class="built_in">recover</span>() <span class="comment">//won't be executed :)</span></div><div class="line">    fmt.Println(<span class="string">"ok"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Works:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">        fmt.Println(<span class="string">"recovered:"</span>,<span class="built_in">recover</span>())</div><div class="line">    &#125;()</div><div class="line"></div><div class="line">    <span class="built_in">panic</span>(<span class="string">"not good"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>The call to recover() works only if it’s called directly in your deferred function.</p>
<blockquote>
<p>Fails:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">doRecover</span><span class="params">()</span></span> &#123;</div><div class="line">    fmt.Println(<span class="string">"recovered =&gt;"</span>,<span class="built_in">recover</span>()) <span class="comment">//prints: recovered =&gt; &lt;nil&gt;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>func main() {<br>    defer func() {<br>        doRecover() //panic is not recovered<br>    }()</p>
<pre><code>panic(&quot;not good&quot;)
</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Updating and Referencing Item Values in Slice, Array, and Map &quot;range&quot; Clauses</div><div class="line"></div><div class="line">level: intermediate</div><div class="line">The data values generated in the &quot;range&quot; clause are copies of the actual collection elements. They are not references to the original items. This means that updating the values will not change the original data. It also means that taking the address of the values will not give you pointers to the original data.</div><div class="line"></div><div class="line">```go</div><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    data := []int&#123;1,2,3&#125;</div><div class="line">    for _,v := range data &#123;</div><div class="line">        v *= 10 //original item is not changed</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fmt.Println(&quot;data:&quot;,data) //prints data: [1 2 3]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>If you need to update the original collection record value use the index operator to access the data.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    data := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</div><div class="line">    <span class="keyword">for</span> i,_ := <span class="keyword">range</span> data &#123;</div><div class="line">        data[i] *= <span class="number">10</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fmt.Println(<span class="string">"data:"</span>,data) <span class="comment">//prints data: [10 20 30]</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>If your collection holds pointer values then the rules are slightly different. You still need to use the index operator if you want the original record to point to another value, but you can update the data stored at the target location using the second value in the “for range” clause.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    data := []*<span class="keyword">struct</span>&#123;num <span class="keyword">int</span>&#125; &#123;&#123;<span class="number">1</span>&#125;,&#123;<span class="number">2</span>&#125;,&#123;<span class="number">3</span>&#125;&#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> data &#123;</div><div class="line">        v.num *= <span class="number">10</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fmt.Println(data[<span class="number">0</span>],data[<span class="number">1</span>],data[<span class="number">2</span>]) <span class="comment">//prints &amp;&#123;10&#125; &amp;&#123;20&#125; &amp;&#123;30&#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>“Hidden” Data in Slices</p>
<p>level: intermediate<br>When you reslice a slice, the new slice will reference the array of the original slice. If you forget about this behavior it can lead to unexpected memory usage if your application allocates large temporary slices creating new slices from them to refer to small sections of the original data.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">()</span> []<span class="title">byte</span></span> &#123;</div><div class="line">    raw := <span class="built_in">make</span>([]<span class="keyword">byte</span>,<span class="number">10000</span>)</div><div class="line">    fmt.Println(<span class="built_in">len</span>(raw),<span class="built_in">cap</span>(raw),&amp;raw[<span class="number">0</span>]) <span class="comment">//prints: 10000 10000 &lt;byte_addr_x&gt;</span></div><div class="line">    <span class="keyword">return</span> raw[:<span class="number">3</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>func main() {<br>    data := get()<br>    fmt.Println(len(data),cap(data),&amp;data[0]) //prints: 3 10000 <byte_addr_x><br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">To avoid this trap make sure to copy the data you need from the temporary slice (instead of reslicing it).</div><div class="line"></div><div class="line">```go</div><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func get() []byte &#123;</div><div class="line">    raw := make([]byte,10000)</div><div class="line">    fmt.Println(len(raw),cap(raw),&amp;raw[0]) //prints: 10000 10000 &lt;byte_addr_x&gt;</div><div class="line">    res := make([]byte,3)</div><div class="line">    copy(res,raw[:3])</div><div class="line">    return res</div><div class="line">&#125;</div></pre></td></tr></table></figure></byte_addr_x></p>
<p>func main() {<br>    data := get()<br>    fmt.Println(len(data),cap(data),&amp;data[0]) //prints: 3 3 <byte_addr_y><br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">Slice Data &quot;Corruption&quot;</div><div class="line"></div><div class="line">level: intermediate</div><div class="line">Let&apos;s say you need to rewrite a path (stored in a slice). You reslice the path to reference each directory modifying the first folder name and then you combine the names to create a new path.</div><div class="line"></div><div class="line">```go</div><div class="line">package main</div><div class="line"></div><div class="line">import (</div><div class="line">    &quot;fmt&quot;</div><div class="line">    &quot;bytes&quot;</div><div class="line">)</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    path := []byte(&quot;AAAA/BBBBBBBBB&quot;)</div><div class="line">    sepIndex := bytes.IndexByte(path,&apos;/&apos;)</div><div class="line">    dir1 := path[:sepIndex]</div><div class="line">    dir2 := path[sepIndex+1:]</div><div class="line">    fmt.Println(&quot;dir1 =&gt;&quot;,string(dir1)) //prints: dir1 =&gt; AAAA</div><div class="line">    fmt.Println(&quot;dir2 =&gt;&quot;,string(dir2)) //prints: dir2 =&gt; BBBBBBBBB</div><div class="line"></div><div class="line">    dir1 = append(dir1,&quot;suffix&quot;...)</div><div class="line">    path = bytes.Join([][]byte&#123;dir1,dir2&#125;,[]byte&#123;&apos;/&apos;&#125;)</div><div class="line"></div><div class="line">    fmt.Println(&quot;dir1 =&gt;&quot;,string(dir1)) //prints: dir1 =&gt; AAAAsuffix</div><div class="line">    fmt.Println(&quot;dir2 =&gt;&quot;,string(dir2)) //prints: dir2 =&gt; uffixBBBB (not ok)</div><div class="line"></div><div class="line">    fmt.Println(&quot;new path =&gt;&quot;,string(path))</div><div class="line">&#125;</div></pre></td></tr></table></figure></byte_addr_y></p>
<p>It didn’t work as you expected. Instead of “AAAAsuffix/BBBBBBBBB” you ended up with “AAAAsuffix/uffixBBBB”. It happened because both directory slices referenced the same underlying array data from the original path slice. This means that the original path is also modified. Depending on your application this might be a problem too.</p>
<p>This problem can fixed by allocating new slices and copying the data you need. Another option is to use the full slice expression.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"bytes"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    path := []<span class="keyword">byte</span>(<span class="string">"AAAA/BBBBBBBBB"</span>)</div><div class="line">    sepIndex := bytes.IndexByte(path,<span class="string">'/'</span>)</div><div class="line">    dir1 := path[:sepIndex:sepIndex] <span class="comment">//full slice expression</span></div><div class="line">    dir2 := path[sepIndex+<span class="number">1</span>:]</div><div class="line">    fmt.Println(<span class="string">"dir1 =&gt;"</span>,<span class="keyword">string</span>(dir1)) <span class="comment">//prints: dir1 =&gt; AAAA</span></div><div class="line">    fmt.Println(<span class="string">"dir2 =&gt;"</span>,<span class="keyword">string</span>(dir2)) <span class="comment">//prints: dir2 =&gt; BBBBBBBBB</span></div><div class="line"></div><div class="line">    dir1 = <span class="built_in">append</span>(dir1,<span class="string">"suffix"</span>...)</div><div class="line">    path = bytes.Join([][]<span class="keyword">byte</span>&#123;dir1,dir2&#125;,[]<span class="keyword">byte</span>&#123;<span class="string">'/'</span>&#125;)</div><div class="line"></div><div class="line">    fmt.Println(<span class="string">"dir1 =&gt;"</span>,<span class="keyword">string</span>(dir1)) <span class="comment">//prints: dir1 =&gt; AAAAsuffix</span></div><div class="line">    fmt.Println(<span class="string">"dir2 =&gt;"</span>,<span class="keyword">string</span>(dir2)) <span class="comment">//prints: dir2 =&gt; BBBBBBBBB (ok now)</span></div><div class="line"></div><div class="line">    fmt.Println(<span class="string">"new path =&gt;"</span>,<span class="keyword">string</span>(path))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The extra parameter in the full slice expression controls the capacity for the new slice. Now appending to that slice will trigger a new buffer allocation instead of overwriting the data in the second slice.</p>
<p>“Stale” Slices</p>
<p>level: intermediate<br>Multiple slices can reference the same data. This can happen when you create a new slice from an existing slice, for example. If your application relies on this behavior to function properly then you’ll need to worry about “stale” slices.</p>
<p>At some point adding data to one of the slices will result in a new array allocation when the original array can’t hold any more new data. Now other slices will point to the old array (with old data).</p>
<p>import “fmt”</p>
<p>func main() {<br>    s1 := []int{1,2,3}<br>    fmt.Println(len(s1),cap(s1),s1) //prints 3 3 [1 2 3]</p>
<pre><code>s2 := s1[1:]
fmt.Println(len(s2),cap(s2),s2) //prints 2 2 [2 3]

for i := range s2 { s2[i] += 20 }

//still referencing the same array
fmt.Println(s1) //prints [1 22 23]
fmt.Println(s2) //prints [22 23]

s2 = append(s2,4)

for i := range s2 { s2[i] += 10 }

//s1 is now &quot;stale&quot;
fmt.Println(s1) //prints [1 22 23]
fmt.Println(s2) //prints [32 33 14]
</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Type Declarations and Methods</div><div class="line"></div><div class="line">level: intermediate</div><div class="line">When you create a type declaration by defining a new type from an existing (non-interface) type, you don&apos;t inherit the methods defined for that existing type.</div><div class="line"></div><div class="line">&gt; Fails:</div><div class="line">```go</div><div class="line">package main</div><div class="line"></div><div class="line">import &quot;sync&quot;</div><div class="line"></div><div class="line">type myMutex sync.Mutex</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    var mtx myMutex</div><div class="line">    mtx.Lock() //error</div><div class="line">    mtx.Unlock() //error</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Compile Errors:</p>
</blockquote>
<p>/tmp/sandbox106401185/main.go:9: mtx.Lock undefined (type myMutex has no field or method Lock) /tmp/sandbox106401185/main.go:10: mtx.Unlock undefined (type myMutex has no field or method Unlock)</p>
<p>If you do need the methods from the original type you can define a new struct type embedding the original type as an anonymous field.</p>
<blockquote>
<p>Works:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"sync"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> myLocker <span class="keyword">struct</span> &#123;</div><div class="line">    sync.Mutex</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>func main() {<br>    var lock myLocker<br>    lock.Lock() //ok<br>    lock.Unlock() //ok<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Interface type declarations also retain their method sets.</div><div class="line"></div><div class="line">&gt; Works:</div><div class="line">```go</div><div class="line">package main</div><div class="line"></div><div class="line">import &quot;sync&quot;</div><div class="line"></div><div class="line">type myLocker sync.Locker</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    var lock myLocker = new(sync.Mutex)</div><div class="line">    lock.Lock() //ok</div><div class="line">    lock.Unlock() //ok</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Breaking Out of “for switch” and “for select” Code Blocks</p>
<p>level: intermediate<br>A “break” statement without a label only gets you out of the inner switch/select block. If using a “return” statement is not an option then defining a label for the outer loop is the next best thing.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    loop:</div><div class="line">        <span class="keyword">for</span> &#123;</div><div class="line">            <span class="keyword">switch</span> &#123;</div><div class="line">            <span class="keyword">case</span> <span class="literal">true</span>:</div><div class="line">                fmt.Println(<span class="string">"breaking out..."</span>)</div><div class="line">                <span class="keyword">break</span> loop</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    fmt.Println(<span class="string">"out!"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>A “goto” statement will do the trick too…</p>
<p>Iteration Variables and Closures in “for” Statements</p>
<p>level: intermediate<br>This is the most common gotcha in Go. The iteration variables in for statements are reused in each iteration. This means that each closure (aka function literal) created in your for loop will reference the same variable (and they’ll get that variable’s value at the time those goroutines start executing).</p>
<p>Incorrect:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    data := []<span class="keyword">string</span>&#123;<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>&#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> data &#123;</div><div class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">            fmt.Println(v)</div><div class="line">        &#125;()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    time.Sleep(<span class="number">3</span> * time.Second)</div><div class="line">    <span class="comment">//goroutines print: three, three, three</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The easiest solution (that doesn’t require any changes to the goroutine) is to save the current iteration variable value in a local variable inside the for loop block.</p>
<blockquote>
<p>Works:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    data := []<span class="keyword">string</span>&#123;<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>&#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> data &#123;</div><div class="line">        vcopy := v <span class="comment">//</span></div><div class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">            fmt.Println(vcopy)</div><div class="line">        &#125;()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    time.Sleep(<span class="number">3</span> * time.Second)</div><div class="line">    <span class="comment">//goroutines print: one, two, three</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>Another solution is to pass the current iteration variable as a parameter to the anonymous goroutine.</p>
<blockquote>
<p>Works:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    data := []<span class="keyword">string</span>&#123;<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>&#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> data &#123;</div><div class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(in <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">            fmt.Println(in)</div><div class="line">        &#125;(v)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    time.Sleep(<span class="number">3</span> * time.Second)</div><div class="line">    <span class="comment">//goroutines print: one, two, three</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>Here’s a slightly more complicated version of the trap.</p>
<p>Incorrect:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> field <span class="keyword">struct</span> &#123;</div><div class="line">    name <span class="keyword">string</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>func (p *field) print() {<br>    fmt.Println(p.name)<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    data := []field&#123;&#123;&quot;one&quot;&#125;,&#123;&quot;two&quot;&#125;,&#123;&quot;three&quot;&#125;&#125;</div><div class="line"></div><div class="line">    for _,v := range data &#123;</div><div class="line">        go v.print()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    time.Sleep(3 * time.Second)</div><div class="line">    //goroutines print: three, three, three</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Works:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> field <span class="keyword">struct</span> &#123;</div><div class="line">    name <span class="keyword">string</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>func (p *field) print() {<br>    fmt.Println(p.name)<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    data := []field&#123;&#123;&quot;one&quot;&#125;,&#123;&quot;two&quot;&#125;,&#123;&quot;three&quot;&#125;&#125;</div><div class="line"></div><div class="line">    for _,v := range data &#123;</div><div class="line">        v := v</div><div class="line">        go v.print()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    time.Sleep(3 * time.Second)</div><div class="line">    //goroutines print: one, two, three</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>What do you think you’ll see when you run this code (and why)?</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> field <span class="keyword">struct</span> &#123;</div><div class="line">    name <span class="keyword">string</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>func (p *field) print() {<br>    fmt.Println(p.name)<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    data := []*field&#123;&#123;&quot;one&quot;&#125;,&#123;&quot;two&quot;&#125;,&#123;&quot;three&quot;&#125;&#125;</div><div class="line"></div><div class="line">    for _,v := range data &#123;</div><div class="line">        go v.print()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    time.Sleep(3 * time.Second)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Deferred Function Call Argument Evaluation</p>
<p>level: intermediate<br>Arguments for a deferred function call are evaluated when the defer statement is evaluated (not when the function is actually executing).</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="keyword">defer</span> fmt.Println(<span class="string">"result =&gt;"</span>,<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> i * <span class="number">2</span> &#125;())</div><div class="line">    i++</div><div class="line">    <span class="comment">//prints: result =&gt; 2 (not ok if you expected 4)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Deferred Function Call Execution</p>
<p>level: intermediate<br>The deferred calls are executed at the end of the containing function and not at the end of the containing code block. It’s an easy mistake to make for new Go developers confusing the deferred code execution rules with the variable scoping rules. It can become a problem if you have a long running function with a for loop that tries to defer resource cleanup calls in each iteration.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"os"</span></div><div class="line">    <span class="string">"path/filepath"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(os.Args) != <span class="number">2</span> &#123;</div><div class="line">        os.Exit(<span class="number">-1</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    start, err := os.Stat(os.Args[<span class="number">1</span>])</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> || !start.IsDir()&#123;</div><div class="line">        os.Exit(<span class="number">-1</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> targets []<span class="keyword">string</span></div><div class="line">    filepath.Walk(os.Args[<span class="number">1</span>], <span class="function"><span class="keyword">func</span><span class="params">(fpath <span class="keyword">string</span>, fi os.FileInfo, err error)</span> <span class="title">error</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">            <span class="keyword">return</span> err</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> !fi.Mode().IsRegular() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        targets = <span class="built_in">append</span>(targets,fpath)</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> _,target := <span class="keyword">range</span> targets &#123;</div><div class="line">        f, err := os.Open(target)</div><div class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">            fmt.Println(<span class="string">"bad target:"</span>,target,<span class="string">"error:"</span>,err) <span class="comment">//prints error: too many open files</span></div><div class="line">            <span class="keyword">break</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">defer</span> f.Close() <span class="comment">//will not be closed at the end of this code block</span></div><div class="line">        <span class="comment">//do something with the file...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>One way to solve the problem is by wrapping the code block in a function.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"os"</span></div><div class="line">    <span class="string">"path/filepath"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(os.Args) != <span class="number">2</span> &#123;</div><div class="line">        os.Exit(<span class="number">-1</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    start, err := os.Stat(os.Args[<span class="number">1</span>])</div><div class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> || !start.IsDir()&#123;</div><div class="line">        os.Exit(<span class="number">-1</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> targets []<span class="keyword">string</span></div><div class="line">    filepath.Walk(os.Args[<span class="number">1</span>], <span class="function"><span class="keyword">func</span><span class="params">(fpath <span class="keyword">string</span>, fi os.FileInfo, err error)</span> <span class="title">error</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">            <span class="keyword">return</span> err</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> !fi.Mode().IsRegular() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        targets = <span class="built_in">append</span>(targets,fpath)</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> _,target := <span class="keyword">range</span> targets &#123;</div><div class="line">        <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">            f, err := os.Open(target)</div><div class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                fmt.Println(<span class="string">"bad target:"</span>,target,<span class="string">"error:"</span>,err)</div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">defer</span> f.Close() <span class="comment">//ok</span></div><div class="line">            <span class="comment">//do something with the file...</span></div><div class="line">        &#125;()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Another option is to get rid of the defer statement :-)</p>
<p>Failed Type Assertions</p>
<p>level: intermediate<br>Failed type assertions return the “zero value” for the target type used in the assertion statement. This can lead to unexpected behavior when it’s mixed with variable shadowing.</p>
<p>Incorrect:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> data <span class="keyword">interface</span>&#123;&#125; = <span class="string">"great"</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> data, ok := data.(<span class="keyword">int</span>); ok &#123;</div><div class="line">        fmt.Println(<span class="string">"[is an int] value =&gt;"</span>,data)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        fmt.Println(<span class="string">"[not an int] value =&gt;"</span>,data)</div><div class="line">        <span class="comment">//prints: [not an int] value =&gt; 0 (not "great")</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Works:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> data <span class="keyword">interface</span>&#123;&#125; = <span class="string">"great"</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> res, ok := data.(<span class="keyword">int</span>); ok &#123;</div><div class="line">        fmt.Println(<span class="string">"[is an int] value =&gt;"</span>,res)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        fmt.Println(<span class="string">"[not an int] value =&gt;"</span>,data)</div><div class="line">        <span class="comment">//prints: [not an int] value =&gt; great (as expected)</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>Blocked Goroutines and Resource Leaks</p>
<p>level: intermediate<br>Rob Pike talked about a number of fundamental concurrency patterns in his “Go Concurrency Patterns” presentation at Google I/O in 2012. Fetching the first result from a number of targets is one of them.</p>
<p>func First(query string, replicas …Search) Result {<br>    c := make(chan Result)<br>    searchReplica := func(i int) { c &lt;- replicas<a href="query">i</a> }<br>    for i := range replicas {<br>        go searchReplica(i)<br>    }<br>    return &lt;-c<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">The function starts a goroutines for each search replica. Each goroutine sends its search result to the result channel. The first value from the result channel is returned.</div><div class="line"></div><div class="line">What about the results from the other goroutines? What about the goroutines themselves?</div><div class="line"></div><div class="line">The result channel in the First() function is unbuffered. This means that only the first goroutine returns. All other goroutines are stuck trying to send their results. This means if you have more than one replica each call will leak resources.</div><div class="line"></div><div class="line">To avoid the leaks you need to make sure all goroutines exit. One potential solution is to use a buffered result channel big enough to hold all results.</div><div class="line"></div><div class="line">func First(query string, replicas ...Search) Result &#123;</div><div class="line">    c := make(chan Result,len(replicas))</div><div class="line">    searchReplica := func(i int) &#123; c &lt;- replicas[i](query) &#125;</div><div class="line">    for i := range replicas &#123;</div><div class="line">        go searchReplica(i)</div><div class="line">    &#125;</div><div class="line">    return &lt;-c</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Another potential solution is to use a select statement with a default case and a buffered result channel that can hold one value. The default case ensures that the goroutines don’t get stuck even when the result channel can’t receive messages.</p>
<p>func First(query string, replicas …Search) Result {<br>    c := make(chan Result,1)<br>    searchReplica := func(i int) {<br>        select {<br>        case c &lt;- replicas<a href="query">i</a>:<br>        default:<br>        }<br>    }<br>    for i := range replicas {<br>        go searchReplica(i)<br>    }<br>    return &lt;-c<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">You can also use a special cancellation channel to interrupt the workers.</div><div class="line"></div><div class="line">func First(query string, replicas ...Search) Result &#123;</div><div class="line">    c := make(chan Result)</div><div class="line">    done := make(chan struct&#123;&#125;)</div><div class="line">    defer close(done)</div><div class="line">    searchReplica := func(i int) &#123;</div><div class="line">        select &#123;</div><div class="line">        case c &lt;- replicas[i](query):</div><div class="line">        case &lt;- done:</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    for i := range replicas &#123;</div><div class="line">        go searchReplica(i)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return &lt;-c</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Why did the presentation contain these bugs? Rob Pike simply didn’t want to comlicate the slides. It makes sense, but it can be a problem for new Go developers who would use the code as is without thinking that it might have problems.</p>
<p>Using Pointer Receiver Methods On Value Instances</p>
<p>level: advanced<br>It’s OK to call a pointer receiver method on a value as long as the value is addressable. In other words, you don’t need to have a value receiver version of the method in some cases.</p>
<p>Not every variable is addressable though. Map elements are not addressable. Variables referenced through interfaces are also not addressable.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> data <span class="keyword">struct</span> &#123;</div><div class="line">    name <span class="keyword">string</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>func (p *data) print() {<br>    fmt.Println(“name:”,p.name)<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">type printer interface &#123;</div><div class="line">    print()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>func main() {<br>    d1 := data{“one”}<br>    d1.print() //ok</p>
<pre><code>var in printer = data{&quot;two&quot;} //error
in.print()

m := map[string]data {&quot;x&quot;:data{&quot;three&quot;}}
m[&quot;x&quot;].print() //error
</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&gt; Compile Errors:</div><div class="line"></div><div class="line">/tmp/sandbox017696142/main.go:21: cannot use data literal (type data) as type printer in assignment: data does not implement printer (print method has pointer receiver)</div><div class="line">/tmp/sandbox017696142/main.go:25: cannot call pointer method on m[&quot;x&quot;] /tmp/sandbox017696142/main.go:25: cannot take the address of m[&quot;x&quot;]</div><div class="line"></div><div class="line">Updating Map Value Fields</div><div class="line"></div><div class="line">level: advanced</div><div class="line">If you have a map of struct values you can&apos;t update individual struct fields.</div><div class="line"></div><div class="line">&gt; Fails:</div><div class="line">```go</div><div class="line">package main</div><div class="line"></div><div class="line">type data struct &#123;</div><div class="line">    name string</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>func main() {<br>    m := map[string]data {“x”:{“one”}}<br>    m[“x”].name = “two” //error<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&gt; Compile Error:</div><div class="line"></div><div class="line">/tmp/sandbox380452744/main.go:9: cannot assign to m[&quot;x&quot;].name</div><div class="line"></div><div class="line">It doesn&apos;t work because map elements are not addressable.</div><div class="line"></div><div class="line">What can be extra confusing for new Go devs is the fact that slice elements are addressable.</div><div class="line"></div><div class="line">```gopackage main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">type data struct &#123;</div><div class="line">    name string</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>func main() {<br>    s := []data one<br>    s[0].name = “two” //ok<br>    fmt.Println(s)    //prints: [{two}]<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Note that a while ago it was possible to update map element fields in one of the Go compilers (gccgo), but that behavior was quickly fixed :-) It was also considered as a potential feature for Go 1.3. It wasn&apos;t important enough to support at that point in time, so it&apos;s still on the todo list.</div><div class="line"></div><div class="line">The first work around is to use a temporary variable.</div><div class="line"></div><div class="line">```gopackage main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">type data struct &#123;</div><div class="line">    name string</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>func main() {<br>    m := map[string]data {“x”:{“one”}}<br>    r := m[“x”]<br>    r.name = “two”<br>    m[“x”] = r<br>    fmt.Printf(“%v”,m) //prints: map[x:{two}]<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Another workaround is to use a map of pointers.</div><div class="line"></div><div class="line">```gopackage main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">type data struct &#123;</div><div class="line">    name string</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>func main() {<br>    m := map[string]*data {“x”:{“one”}}<br>    m[“x”].name = “two” //ok<br>    fmt.Println(m[“x”]) //prints: &amp;{two}<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">By the way, what happens when you run this code?</div><div class="line"></div><div class="line">```go</div><div class="line">package main</div><div class="line"></div><div class="line">type data struct &#123;</div><div class="line">    name string</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>func main() {<br>    m := map[string]*data {“x”:{“one”}}<br>    m[“z”].name = “what?” //???<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&quot;nil&quot; Interfaces and &quot;nil&quot; Interfaces Values</div><div class="line"></div><div class="line">level: advanced</div><div class="line">This is the second most common gotcha in Go because interfaces are not pointers even though they may look like pointers. Interface variables will be &quot;nil&quot; only when their type and value fields are &quot;nil&quot;.</div><div class="line"></div><div class="line">The interface type and value fields are populated based on the type and value of the variable used to create the corresponding interface variable. This can lead to unexpected behavior when you are trying to check if an interface variable equals to &quot;nil&quot;.</div><div class="line"></div><div class="line">```go</div><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    var data *byte</div><div class="line">    var in interface&#123;&#125;</div><div class="line"></div><div class="line">    fmt.Println(data,data == nil) //prints: &lt;nil&gt; true</div><div class="line">    fmt.Println(in,in == nil)     //prints: &lt;nil&gt; true</div><div class="line"></div><div class="line">    in = data</div><div class="line">    fmt.Println(in,in == nil)     //prints: &lt;nil&gt; false</div><div class="line">    //&apos;data&apos; is &apos;nil&apos;, but &apos;in&apos; is not &apos;nil&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Watch out for this trap when you have a function that returns interfaces.</p>
<p>Incorrect:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    doit := <span class="function"><span class="keyword">func</span><span class="params">(arg <span class="keyword">int</span>)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</div><div class="line">        <span class="keyword">var</span> result *<span class="keyword">struct</span>&#123;&#125; = <span class="literal">nil</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span>(arg &gt; <span class="number">0</span>) &#123;</div><div class="line">            result = &amp;<span class="keyword">struct</span>&#123;&#125;&#123;&#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> res := doit(<span class="number">-1</span>); res != <span class="literal">nil</span> &#123;</div><div class="line">        fmt.Println(<span class="string">"good result:"</span>,res) <span class="comment">//prints: good result: &lt;nil&gt;</span></div><div class="line">        <span class="comment">//'res' is not 'nil', but its value is 'nil'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Works:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    doit := <span class="function"><span class="keyword">func</span><span class="params">(arg <span class="keyword">int</span>)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</div><div class="line">        <span class="keyword">var</span> result *<span class="keyword">struct</span>&#123;&#125; = <span class="literal">nil</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span>(arg &gt; <span class="number">0</span>) &#123;</div><div class="line">            result = &amp;<span class="keyword">struct</span>&#123;&#125;&#123;&#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span> <span class="comment">//return an explicit 'nil'</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> res := doit(<span class="number">-1</span>); res != <span class="literal">nil</span> &#123;</div><div class="line">        fmt.Println(<span class="string">"good result:"</span>,res)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        fmt.Println(<span class="string">"bad result (res is nil)"</span>) <span class="comment">//here as expected</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>Stack and Heap Variables</p>
<p>level: advanced<br>You don’t always know if your variable is allocated on the stack or heap. In C++ creating variables using the new operator always means that you have a heap variable. In Go the compiler decides where the variable will be allocated even if the new() or make() functions are used. The compiler picks the location to store the variable based on its size and the result of “escape analysis”. This also means that it’s ok to return references to local variables, which is not ok in other languages like C or C++.</p>
<p>If you need to know where your variables are allocated pass the “-m” gc flag to “go build” or “go run” (e.g., go run -gcflags -m app.go).</p>
<p>GOMAXPROCS, Concurrency, and Parallelism</p>
<p>level: advanced<br>Go 1.4 and below uses only one execution context / OS thread. This means that only one goroutine can execute at any given time. Starting with 1.5 Go sets the number of execution contexts to the number of logical CPU cores returned by  runtime.NumCPU(). That number may or may not match the total number of logical CPU cores on your system depending on the CPU affinity settings of your process. You can adjust this number by changing the GOMAXPROCS environment variable or by calling the runtime.GOMAXPROCS() function.</p>
<p>There’s a common misconception that GOMAXPROCS represents the number of CPUs Go will use to run goroutines. The runtime.GOMAXPROCS() function documentation adds more to the confusion. The GOMAXPROCS variable description (<a href="https://golang.org/pkg/runtime/" target="_blank" rel="external">https://golang.org/pkg/runtime/</a>) does a better job talking about OS threads.</p>
<p>You can set GOMAXPROCS to more than the number of your CPUs. The max value for GOMAXPROCS is 256.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"runtime"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    fmt.Println(runtime.GOMAXPROCS(<span class="number">-1</span>)) <span class="comment">//prints: X (1 on play.golang.org)</span></div><div class="line">    fmt.Println(runtime.NumCPU())       <span class="comment">//prints: X (1 on play.golang.org)</span></div><div class="line">    runtime.GOMAXPROCS(<span class="number">20</span>)</div><div class="line">    fmt.Println(runtime.GOMAXPROCS(<span class="number">-1</span>)) <span class="comment">//prints: 20</span></div><div class="line">    runtime.GOMAXPROCS(<span class="number">300</span>)</div><div class="line">    fmt.Println(runtime.GOMAXPROCS(<span class="number">-1</span>)) <span class="comment">//prints: 256</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Read and Write Operation Reordering</p>
<p>level: advanced<br>Go may reorder some operations, but it ensures that the overall behavior in the goroutine where it happens doesn’t change. However, it doesn’t guarantee the order of execution across multiple goroutines.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"runtime"</span></div><div class="line">    <span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">var</span> _ = runtime.GOMAXPROCS(<span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> a, b <span class="keyword">int</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">u1</span><span class="params">()</span></span> &#123;</div><div class="line">    a = <span class="number">1</span></div><div class="line">    b = <span class="number">2</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>func u2() {<br>    a = 3<br>    b = 4<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">func p() &#123;</div><div class="line">    println(a)</div><div class="line">    println(b)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>func main() {<br>    go u1()<br>    go u2()<br>    go p()<br>    time.Sleep(1 * time.Second)<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">If you run this code a few times you might see these a and b variable combinations:</div><div class="line"></div><div class="line">1</div><div class="line">2</div><div class="line"></div><div class="line">3</div><div class="line">4</div><div class="line"></div><div class="line">0</div><div class="line">2</div><div class="line"></div><div class="line">0</div><div class="line">0</div><div class="line"></div><div class="line">1</div><div class="line">4</div><div class="line"></div><div class="line">The most interesting combination for a and b is &quot;02&quot;. It shows that b was updated before a.</div><div class="line"></div><div class="line">If you need to preserve the order of read and write operations across multiple goroutines you&apos;ll need to use channels or the appropriate constructs from the &quot;sync&quot; package.</div><div class="line"></div><div class="line">Preemptive Scheduling</div><div class="line"></div><div class="line">level: advanced</div><div class="line">It&apos;s possible to have a rogue goroutine that prevents other goroutines from running. It can happen if you have a for loop that doesn&apos;t allow the scheduler to run.</div><div class="line"></div><div class="line">```go</div><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    done := false</div><div class="line"></div><div class="line">    go func()&#123;</div><div class="line">        done = true</div><div class="line">    &#125;()</div><div class="line"></div><div class="line">    for !done &#123;</div><div class="line">    &#125;</div><div class="line">    fmt.Println(&quot;done!&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The for loop doesn’t have to be empty. It’ll be a problem as long as it contains code that doesn’t trigger the scheduler execution.</p>
<p>The scheduler will run after GC, “go” statements, blocking channel operations, blocking system calls, and lock operations. It may also run when a non-inlined function is called.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    done := <span class="literal">false</span></div><div class="line"></div><div class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</div><div class="line">        done = <span class="literal">true</span></div><div class="line">    &#125;()</div><div class="line"></div><div class="line">    <span class="keyword">for</span> !done &#123;</div><div class="line">        fmt.Println(<span class="string">"not done!"</span>) <span class="comment">//not inlined</span></div><div class="line">    &#125;</div><div class="line">    fmt.Println(<span class="string">"done!"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>To find out if the function you call in the for loop is inlined pass the “-m” gc flag to “go build” or “go run” (e.g., go build -gcflags -m).</p>
<p>Another option is to invoke the scheduler explicitly. You can do it with the  Gosched() function from the “runtime” package.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"runtime"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    done := <span class="literal">false</span></div><div class="line"></div><div class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</div><div class="line">        done = <span class="literal">true</span></div><div class="line">    &#125;()</div><div class="line"></div><div class="line">    <span class="keyword">for</span> !done &#123;</div><div class="line">        runtime.Gosched()</div><div class="line">    &#125;</div><div class="line">    fmt.Println(<span class="string">"done!"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文出自 &lt;a href=&quot;http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/index.html&quot; target=&quot;_blank&quot; rel=&quot;extern
    
    </summary>
    
      <category term="翻译" scheme="http://blog.sin5th.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Enough with the microservices</title>
    <link href="http://blog.sin5th.com/2017/06/14/enough-with-the-microservices/"/>
    <id>http://blog.sin5th.com/2017/06/14/enough-with-the-microservices/</id>
    <published>2017-06-14T14:42:09.000Z</published>
    <updated>2017-06-17T15:19:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="enough-with-the-microservices-受够了微服务"><a href="#Enough-with-the-microservices-受够了微服务" class="headerlink" title="Enough with the microservices 受够了微服务"></a>Enough with the microservices <div hide="">受够了微服务</div></h1><div><br>Don’t even consider microservices unless you have a system that’s too complex to manage as a monolith. The majority of software systems should be built as a single monolithic application. Do pay attention to good modularity within that monolith, but don’t try to separate it into separate services.<br>– Martin Fowler<div hide="">除非是复杂到难以统一管理，否则根本不用考虑微服务。软件的主体应该是一个单独的集成应用，要集中精力在内部的模块化上，而不是拆分成各种服务。<br>– Martin Fowler</div><br></div>

<div><br>If you can’t build a well-structured monolith, what makes you think microservices is the answer?<br>– Simon Brown<div hide="">如果连集成的软件都做不到结构良好，难道指望微服务解决你的问题？<br>– Simon Brown</div><br></div>

<h2 id="intro-简介"><a href="#Intro-简介" class="headerlink" title="Intro 简介"></a>Intro <div hide="">简介</div></h2><div><br>Much has been written on the pros and cons of microservices, but unfortunately I’m still seeing them as something being pursued in a cargo cult fashion in the growth-stage startup world. At the risk of rewriting Martin Fowler’s Microservice Premium article, I thought it would be good to write up some thoughts so that I can send them to clients when the topic arises, and hopefully help people avoid some of the mistakes I’ve seen. The mistake of choosing a path towards a given architecture or technology on the basis of so-called best practices articles found online is a costly one, and if I can help a single company avoid it then writing this will have been worth it.<div hide="">很多文章讲述了微服务的利弊，但微服务还是在创业启动期的公司中受到盲目的追捧。冒着把 Martin Fowler 的 Microservice Premium 文章再写一遍的风险，我认为最好还是写一写自己的想法，以便聊起这个话题时能把这些想法传递给大家，同时也希望我的所见所闻能解除人们对微服务的误用。网上有许多最佳实践文章，选错架构或技术损失巨大，倘若我的观点能帮助哪怕一个公司避免这种错误，那就很有意义了。</div><br></div>

<h2 id="context-语境"><a href="#Context-语境" class="headerlink" title="Context 语境"></a>Context <div hide="">语境</div></h2><div><br>Microservices are still (unfortunately) currently a big thing and a tech buzzword du jour. The approach has been around forever (Service-Oriented architecture anyone?) but for most of the companies I encounter, microservices aren’t simply a waste of time or a distraction. They actually make things worse.<div hide="">（十分不幸）微服务迄今为止依然是个时髦的事物。这种方式其实早就出现了（不就是面向服务架构？），但就我所遇到的大多数公司而言，微服务不单单费时费力，更是让事情更糟糕。</div><br></div><br><div><br>This might seem strange, because most of the articles on microservices are extolling their countless virtues like decoupling tech systems, better horizontal scalability, removing dependencies between development teams, and so on. If you’re the size of Uber, Airbnb, Facebook, or Twitter, then that is all probably true. I’ve helped larger organizations with their microservices transitions, including helping them set up messaging systems and other technologies which allow for amazing scalability properties. However, for growth-stage startups, all of that technology, and those microservices, are rarely needed.<div hide="">这说起来是件很奇怪的事，因为绝大多数的文章都是在强调微服务的好处，解耦系统、容易横向扩展、并行开发，等等。如果你有 Uber、Airbnb、Facebook 或者 Twitter 那样的规模，或许这好处是存在的。我曾帮助更大的企业完成他们的微服务转化，包括搭建消息系统和其他拥有惊人的扩展性的技术组件。但是对于初创公司，那些技术、服务，根本不需要。</div><br></div>

<p><br></p>
<blockquote>
<p>You are not Netflix, stop trying to be them!<br>——Russ Miles<div hide="">你不是 Netflix，别再模仿他们了！</div></p>
</blockquote>
<div><br>Russ Miles makes this his first point in his post on 8 ways to lose at microservices adoption, and it’s something I see all the time. Growth-stage startups often want to emulate the best practices they see at those companies, often to their own detriment. Best practices are context dependent. What is a best practice for a company like Facebook, may or may not be a best practice for a startup with a total engineering team size of 100 or less.<div hide="">Russ Miles 描述了 8 种在微服务化中迷失的情况，这是第一条，也是我深以为然的事。初创公司总爱模仿其他公司的最佳实践，但这些实践并不一定符合他们的情况。最佳实践是有赖于语境的。Facebook 的最佳实践，可能是也可能不是一个初创公司（工程师队伍不足100人）的最佳实践。</div><br></div>

<div><br>Even if you are smaller than the tech giants, you still might, on the balance, get some benefit from moving towards a microservices architecture. However, a growth-stage startup doing a wholesale migration to microservices should be a firing-level offense for the tech people involved.<div hide="">即便你比巨头小一些，可能权衡利弊后还是会从微服务架构中获得好处。但是，初创公司向微服务做全量迁移大概是对技术人员的一次考验。</div><br></div>

<h2 id="why-microservices-微服务有什么意义"><a href="#Why-microservices-微服务有什么意义" class="headerlink" title="Why microservices 微服务有什么意义"></a>Why microservices <div hide="">微服务有什么意义</div></h2><p>Usually, in growth-stage startups, the main motivation for moving to microservices is that hope that doing so will remove dependencies between development teams and/or improve the ability of the system to handle larger traffic loads (i.e., scalability). Common complaints and symptoms are things like merge conflicts, bugs in deployment due to parts of the application not being ready to use partially implemented features, and horizontal scalability. Let’s break these down individually.</p>
<p>Dependencies</p>
<p>In an early-stage startup, the dev team is small and the tech is small. People can work well together without stepping on toes and it seems like everything is relatively fast to implement. Life is good.</p>
<p>As the startup grows, the dev team grows, and the codebase grows, and soon there are multiple teams working on the same codebase. These teams are often largely composed of the people who were around at the earlier stage of the startup. Since many early-stage startups are a first job for many junior developers, they don’t realize that the communication effectiveness has to increase as the team size and codebase size increases. As is often the case for tech people who have limited experience, they reach for a technical solution to a people problem, and decide they need microservices in order to reduce dependencies or coupling between dev teams.</p>
<p>In reality, they need to address the people-related problems via more effective communication. When a startup has multiple dev teams, it is a requirement that they stay coordinated and informed about everyone’s work. They need to collaborate. Software development, in any organization of this size, is a social endeavor. If there is little communication or information sharing between teams, they will have the same dependency problems, with or without the microservices. However, with the microservices, they will also have all of the negative technical problems that come attached.</p>
<p>It is true that keeping the code modular, as a tech solution to the problem, can mitigate some of the inter-team dependencies inherent in software development, but the communication component still must be grown and improved as the team size grows.</p>
<p>Don’t confuse decoupling with distribution. You can achieve decoupling by having a monolith, composed of well-defined modules, with well-defined interfaces, and you should. You don’t need to distribute your application as separate services in order to benefit from the decoupling you get by having modules with clear interfaces.</p>
<p>Partial-feature implementation</p>
<p>This point is often addressed by feature flags, which are something you might need to be familiar with to successfully implement microservices anyway. Especially as you get into rapid deployment (discussed more below), you may need to deploy parts of features which are not yet ready on certain platforms, or where the frontend implementation is complete but that backend is not, and so on. As companies grow, and deployment and ops systems become more automated and complex, feature flags are something important to use and to use wisely.</p>
<p>Horizontal scalability</p>
<p>This point has some merit in that multiple copies of the same microservice can be deployed in order to achieve a form of scalability. However, most companies that adopt microservices too early will use the same storage subsystem (most often a database) to back all of their microservices. What that means is that you don’t really have horizontal scalability for your application, only for your service. If this is the scalability method you plan to use, why not just deploy more copies of your monolith behind a load balancer? You’ll accomplish the same goal with less complexity. Not only that, but the complexity that accompanies horizontal scalability should only be borne as a last resort. Your first effort should be in taking reasonable steps to improve your application performance. Often, even basic things can result in performance hundreds of times faster than the original system, and that also includes wisely using services which support your application. I mentioned in my post on Redis performance triage, for example.</p>
<p>Are we ready for microservices?</p>
<p>This question is often never even considered when deliberating what an architecture should resemble, but it should be. Many times, the senior technologists in a company simply identify complaints or pain points of developers or of the business, and then find something on the Internet claiming microservices architectures address those issues. This claim has many caveats. Microservices, like many things, come with positive and negative effects. If your organization is mature enough, and has the tech in place, then the challenges associated with having microservices can be minimized, making the positive effects all the more apparent. So what does it mean to be ready for microservices? Martin Fowler wrote down his Microservice Prerequisites years ago, and in my experience most growth-stage startups have totally ignored him. Martin’s prerequisites are a good place to start, so let’s consider them.</p>
<p>Rapid provisioning<br>Basic monitoring<br>Rapid deployment<br>I can tell you from experience with dozens of growth-stage startups that almost none of them have even one of these prerequisites in place, never mind all of them. If your tech team doesn’t have the ability to quickly provision, deploy, and monitor all of your current systems, you must gain that capability before you consider migrating to microservices. Let’s consider each of these prerequisites in a bit more detail.</p>
<p>Rapid provisioning</p>
<p>If your organization has only one or a few people in your entire dev team who can set up new services, virtual or otherwise, you are not ready for microservices. You will need multiple members in each team with the ability to provision infrastructure and deploy services to that infrastructure without requiring outside assistance. Remember, if you have a DevOps Team, then you are absolutely not doing DevOps. Developers should be involved in managing everything about their applications, including infrastructure.</p>
<p>Likewise, if your current architecture is not backed by flexible infrastructure that is easy to scale up and down and can be managed by various people in the teams, you must address this before moving towards microservices. You can of course have microservices running on your own bare metal machines, and you may have superior performance for lower cost, but you must still be able to have flexibility on ops and deployment of your services.</p>
<p>Basic monitoring</p>
<p>If you don’t monitor the system and application performance of your monolith, then you will have a miserable time with microservices. You need familiarity with system level metrics (such as CPU and RAM), application level metrics (such as request latency per endpoint, or errors per endpoint), and business level metrics (such as transactions per second, or revenue per second) to understand the performance of your systems. For all the complexities of the monolith, an ensemble of microservices is far more complex to understand, let alone troubleshoot, when it comes to performance. Set up something like Prometheus and add all the necessary instrumentation to your monolith before carving parts of it out into microservices.</p>
<p>Rapid deployment</p>
<p>If you don’t have a good continuous integration and deployment process and system in place for your monolith, then trying to manage integration and deployment for your microservices will be nearly impossible. Imagine having 10 teams and 100 services, all of which require manual integration testing and deployment. Now imagine the same manual work, but with only one monolith. How many ways can things go wrong with 100 services? How many ways with 1 monolith? This prerequisite is an excellent example of the complexity that comes along with a microservices approach.</p>
<p>Fowler’s list has also been extended with a couple of additional prerequisites by Phil Calcado, but I would say those are more along the lines of important extensions than true prerequisites.</p>
<p>What if we have the prerequisites?</p>
<p>Even with the prerequisites in place, it is important to consider the negatives of microservices in order to make sure the approach really makes sense for your business. The simple fact is that a lot of tech people pretend that the fallacies of distributed computing are somehow not a concern in the microservices world, but all of those things must be taken into account in order to be successful. For most growth-stage startups, there are just too many reasons to avoid microservices.</p>
<p>Increased operational overhead</p>
<p>This is partially covered by the Rapid Deployment prerequisite, but consider that with microservices often come lofty aims of containerizing everything (probably with Docker) and using something like Kubernetes to orchestrate all of it. While both systems are wonderful pieces of technology in many ways, for most growth-stage startups they can be a distraction. I’ve seen startups scale up to fantastic levels using rsync for their deployment and orchestration. I’ve also seen many more startups get stuck in the quagmire of hugely complex ops tooling, which ends up stealing away valuable time they could be using to build features for customers.</p>
<p>Your app can get slower</p>
<p>If you have multiple modules in your monolith, with well-defined APIs, then you have nearly zero overhead when interacting with those APIs. This is definitely not the case with microservices, since they are often running on other machines and require a network hop between your services. This can slow down your whole system considerably. This situation becomes even worse if you have some services which need to contact multiple other services, synchronously, in order to complete a request. I have worked with companies that had nearly 10 services, which had to be called, in order, for a request to be serviced. At each step they have network overhead and other delays to service the request, and they could have easily put all of those services into one artifact, perhaps as different modules, and probably done some additional redesign to make things asynchronous. It could have saved them an order of magnitude on their infrastructure costs.</p>
<p>Local development is more difficult</p>
<p>If you have one monolith, probably backed by a database, then getting your application to run locally during your development process is pretty easy. If you have 100 services, possibly with multiple datastores that may have dependencies, now local development can be an absolute nightmare. Even Docker containers won’t save you from this level of complexity. They can make things easier of course, but you’ll still have to deal with the dependency issue somehow. Microservices, in theory, remove this requirement because each service is supposed to be independent from the start. However, for growth-stage startups, that is almost never the case. People usually need to have all (or nearly all) the services running on their machine in order to properly develop and test new features. This complexity is extremely wasteful.</p>
<p>It can be harder to scale</p>
<p>The easiest way to scale a monolith is to simply deploy additional copies of your monolith behind a load balancer. This is a dead-simple way to scale up if your system receives more traffic, and it involves minimal additional complexity from an operations perspective. The longer your system can survive on something like Elastic Beanstalk, the better. That will keep you and the team free to work on actually building things for customers instead of battling with your deployment pipeline. Some of this pain can be mitigated by having the proper CI/CD systems as in the Rapid Deployment prerequisite, but things get a lot more complex when you’re in the microservices world, and often that complexity is more trouble than it’s worth.</p>
<p>Now what?</p>
<p>If you’re in a growth-stage startup with the need to make some changes to your architecture and microservices aren’t the answer they seem to be, what is it that you should be doing?</p>
<p>It’s important to note that Fowler’s prerequisites are something of a Capability Maturity Model for tech, and of course Fowler does have his own article on the topic of a Maturity Model. IF it makes sense for the company, we can use his prerequisites and take other intermediate steps to prepare for a move to microservices. To quote Fowler:</p>
<p>The vital point here is that the true outcome of a maturity model assessment isn’t what level you are but the list of things you need to work on to improve. Your current level is merely a piece of intermediate work in order to determine that list of skills to acquire next.<br>So how do we look for things to improve, and what path should we take to get there? There are a few simple, general steps. The first two alone will typically solve many of the problems that cause teams to move towards microservices, and without all the associated complexity.</p>
<p>Clean up the application. Make sure it has good automated tests and is using the current versions of all libraries, frameworks, and languages.<br>Refactor the application into clear modules with clear APIs. Don’t allow bits of the code to reach into the modules directly. All interaction should be via the APIs presented by the module.<br>Choose one module in the application and split it into its own application on the same host. This starts to give you some of the usefulness of totally separate microservices, but with fewer of the operations headaches. You will, however, still have to cope with communication between two different components, albeit on the same host. That fact allows you to disregard some of the complexity inherent in network partitions and availability on fully distributed systems like a microservices architecture.<br>Take the separated module and put it on a different host system. Now you’ll have to deal with the issues surrounding communication over a network, but you will have bought yourself a little less coupling between the two systems.<br>If possible, refactor the data storage system so that the module on the other host now has total responsibility for storage of data within its context.<br>Even at larger scales, almost every company I’ve seen only really needs the first two steps in order to be happy. If they can do well with those, the remaining steps aren’t always as important as they originally thought. Better still, if you decide to stop at any point along the way, the system is still maintainable and probably in better shape than it was when you started.</p>
<p>Outro</p>
<p>I can’t claim that any of these ideas are unique, or that I came up with them. This is simply a summary of observations and thoughts I’ve collected from others who seem to have encountered the same thing. Many others who have been around a lot longer than I have written about these topics, and some with a lot more clarity, like Sander Mak’s article on Modules and Microservices. Either way, these lessons are important and hopefully useful for companies considering what to do with their architectural future. Consider all options carefully, and make sure that microservices are an appropriate path for your organization.</p>
<p>At least start with the first two steps in the section above, and after those are complete, then consider again whether microservices are the right direction for your organization. Chances are, a lot of the issues you had previously will simply disappear.<br>```</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;enough-with-the-microservices-受够了微服务&quot;&gt;&lt;a href=&quot;#Enough-with-the-microservices-受够了微服务&quot; class=&quot;headerlink&quot; title=&quot;Enough with the micr
    
    </summary>
    
      <category term="翻译" scheme="http://blog.sin5th.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
  </entry>
  
  <entry>
    <title>金牌得主韩国</title>
    <link href="http://blog.sin5th.com/2017/06/08/2017-06-08/"/>
    <id>http://blog.sin5th.com/2017/06/08/2017-06-08/</id>
    <published>2017-06-08T13:19:49.000Z</published>
    <updated>2017-06-08T13:38:31.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hr-sect">Hack ╮(￣▽￣)╭ News</div>



<div class="hr-sect">Tech (￣▽￣)~* Learning</div>



<div class="hr-sect">Book ╰(￣▽￣)╭ Reading</div>

<h1 id="一炮走红的国家"><a href="#《一炮走红的国家》" class="headerlink" title="《一炮走红的国家》"></a>《一炮走红的国家》</h1><h2 id="金牌得主韩国"><a href="#金牌得主韩国" class="headerlink" title="金牌得主韩国"></a>金牌得主韩国</h2><p>韩国和中国台湾都是保持了长达 50 年 6% 以上经济增速的优秀经济体，总会让人们拿他们相提并论，但事实上，两者有着本质的不同。</p>
<p>韩国正在走出日本的阴影，重新定义制造大国的最高成就，产出了三星、现代这样的巨型跨国企业；反观台湾，则是一味地迎合日本，为其生产零部件。这种截然相反的态度可能来源于日本殖民时期对待两者的不同方式，对台湾较温和，对韩国很残忍。</p>
<p>韩国相比日本，更加国际化。它生产的泡沫剧、演艺明星，在东亚掀起韩流；拍摄的电影，被宝莱坞借鉴；生产的电子产品、家用汽车，销往世界各地。</p>
<div class="hr-sect">Idea (～￣▽￣)～ Spreading</div>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;hr-sect&quot;&gt;Hack ╮(￣▽￣)╭ News&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Tech (￣▽￣)~* Learning&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Book ╰(￣▽￣)╭ Readin
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>亚洲小虎经济的轨迹</title>
    <link href="http://blog.sin5th.com/2017/06/07/2017-06-07/"/>
    <id>http://blog.sin5th.com/2017/06/07/2017-06-07/</id>
    <published>2017-06-07T13:58:57.000Z</published>
    <updated>2017-06-07T14:45:18.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hr-sect">Hack ╮(￣▽￣)╭ News</div>



<div class="hr-sect">Tech (￣▽￣)~* Learning</div>



<div class="hr-sect">Book ╰(￣▽￣)╭ Reading</div>

<h1 id="一炮走红的国家"><a href="#《一炮走红的国家》" class="headerlink" title="《一炮走红的国家》"></a>《一炮走红的国家》</h1><h2 id="印尼吃一堑-长一智"><a href="#印尼：吃一堑、长一智" class="headerlink" title="印尼：吃一堑、长一智"></a>印尼：吃一堑、长一智</h2><p>由于亚洲国家的货币大多与美元挂钩，无法自由调整，所以发生自泰国的经济崩溃很快蔓延到这些国家，形成了一场席卷亚洲的金融风暴，而印尼是其中受创最重的，卢比（货币）下跌80%，股市暴跌90%。虽然东亚的经济规模尚不足以拖垮西方世界，很快迎来了复苏，但直至2005年，许多国家都没能将人均收入恢复到经济危机之前。</p>
<p>不过，在2008年，印尼表现优异，基本毫发无伤地度过全球经济危机。庞大的人口、丰富的自然资源，在政府与人民的谨慎对待下成为了经济发展的优势。</p>
<h2 id="菲律宾不再是个笑话"><a href="#菲律宾：不再是个笑话" class="headerlink" title="菲律宾：不再是个笑话"></a>菲律宾：不再是个笑话</h2><p>菲律宾的经济在20世纪60年代达到巅峰，人均收入仅次于日本，在亚洲位居第二。可惜到了70年代就被韩国与中国台湾赶超，80年代被马来西亚超越，90年代被中国大陆超越，2009年被印尼超越。</p>
<p>独裁统治结束后菲律宾经历了长时间的政治动荡，并且在经济决策上毫无亮点。新上任的总统希望经济能走上正轨，积极采取措施，让政府廉洁，为投资者提供帮助。</p>
<p>菲律宾拥有和印尼同样的优势，只要政治稳定，领导人有一些基本的经济常识，那么还拥有成功的可能性。</p>
<h2 id="泰国代号红色"><a href="#泰国：代号红色" class="headerlink" title="泰国：代号红色"></a>泰国：代号红色</h2><p>泰国城市的中心化十分夸张，第一大城市曼谷的人口是第二大城市的十倍。代表贫困的农村人口的“红衫军”和以曼谷为中心的中高收入人群的“黄衫军”不断斗争，让这个国家的经济基本停滞。新总理关注更多的是红衫军的利益，而非发展经济，这依然无法吸引投资者。</p>
<p>泰国过分依赖出口，当2008年全球经济危机降临时，表面强大的出口变得脆弱不堪。</p>
<h2 id="马来西亚缩写之国"><a href="#马来西亚：缩写之国" class="headerlink" title="马来西亚：缩写之国"></a>马来西亚：缩写之国</h2><p>种族政治环境让马来西亚很难对外开放，内部也分化严重。计划又多又宏伟，执行力却总跟不上，因此最后剩下的仅仅是计划名称的缩写，却没有任何效果。</p>
<div class="hr-sect">Idea (～￣▽￣)～ Spreading</div>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;hr-sect&quot;&gt;Hack ╮(￣▽￣)╭ News&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Tech (￣▽￣)~* Learning&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Book ╰(￣▽￣)╭ Readin
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>软件文档即指南</title>
    <link href="http://blog.sin5th.com/2017/06/06/2017-06-06/"/>
    <id>http://blog.sin5th.com/2017/06/06/2017-06-06/</id>
    <published>2017-06-06T14:13:21.000Z</published>
    <updated>2017-06-06T15:04:20.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hr-sect">Hack ╮(￣▽￣)╭ News</div>



<div class="hr-sect">Tech (￣▽￣)~* Learning</div>



<div class="hr-sect">Book ╰(￣▽￣)╭ Reading</div>

<h1 id="开发者必读之软件架构"><a href="#《开发者必读之软件架构》" class="headerlink" title="《开发者必读之软件架构》"></a>《开发者必读之软件架构》</h1><h2 id="软件文档即指南"><a href="#软件文档即指南" class="headerlink" title="软件文档即指南"></a>软件文档即指南</h2><p>文档是带领我们理解软件的指南。有时是一张地图，适当的分辨率让我们了解处境；有时是一处风景，让我们在乏味的旅途稍事休息；有时是历史与文化，断壁残垣告诉我们曾经发生的故事；有时是实用信息，给我们提供指引。</p>
<h1 id="刻意练习"><a href="#《刻意练习》" class="headerlink" title="《刻意练习》"></a>《刻意练习》</h1><h2 id="心里表征有助于制定计划"><a href="#心里表征有助于制定计划" class="headerlink" title="心里表征有助于制定计划"></a>心里表征有助于制定计划</h2><p>有经验的攀岩者能挑选出最佳路径；有经验的外科医师能在手术开始前想好可能面对的情况；出色的写作者能在成文前构思好文章。</p>
<p>建立心里表征后，有助于我们理解问题、预测未来、使用知识，进而制定好计划解决问题。</p>
<h1 id="一炮走红的国家"><a href="#《一炮走红的国家》" class="headerlink" title="《一炮走红的国家》"></a>《一炮走红的国家》</h1><h2 id="土耳其的优异表现"><a href="#土耳其的优异表现" class="headerlink" title="土耳其的优异表现"></a>土耳其的优异表现</h2><p>地处中东的土耳其中绝大部分人是伊斯兰教，但由于西方世界的影响，这些人在经济上被一定程度的压制着。释放对伊斯兰的压制，是使土耳其经济增长的一个方法。</p>
<p>过去的土耳其政治不稳定，执政党平均九年一个，时而亲伊斯兰，时而亲西方世界；经济也是绝境，高利率、高通胀、低增长。失望的人民放弃了那些泾渭分明的政党，而是选择了一个向往欧洲但是对伊斯兰同样温和的党派。</p>
<p>新领导人上台后，重视经济发展，很快扭转局势，如今的土耳其人均收入1万美元，已经成为中东经济发展最快的国家。</p>
<div class="hr-sect">Idea (～￣▽￣)～ Spreading</div>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;hr-sect&quot;&gt;Hack ╮(￣▽￣)╭ News&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Tech (￣▽￣)~* Learning&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Book ╰(￣▽￣)╭ Readin
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>2017-06-05</title>
    <link href="http://blog.sin5th.com/2017/06/05/2017-06-05/"/>
    <id>http://blog.sin5th.com/2017/06/05/2017-06-05/</id>
    <published>2017-06-05T13:50:07.000Z</published>
    <updated>2017-06-05T14:15:22.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hr-sect">Hack ╮(￣▽￣)╭ News</div>



<div class="hr-sect">Tech (￣▽￣)~* Learning</div>



<div class="hr-sect">Book ╰(￣▽￣)╭ Reading</div>

<h1 id="开发者必读之软件架构"><a href="#《开发者必读之软件架构》" class="headerlink" title="《开发者必读之软件架构》"></a>《开发者必读之软件架构》</h1><h2 id="文档的必要性"><a href="#文档的必要性" class="headerlink" title="文档的必要性"></a>文档的必要性</h2><p>虽然说好的代码自注释，但仅凭代码并不能解释一切。首先，稍具规模的工程都有一个框架，从入口函数一点点看效率奇低，是十分愚蠢的。因此，快速了解项目有一个隐含的条件，就是对所用技术已有了解；另外，代码也无法说明系统是如何融入周边系统的。所以，文档往往是必要的，一方面引导说明项目的实现，一方面解释系统的地位。</p>
<h1 id="刻意练习"><a href="#《刻意练习》" class="headerlink" title="《刻意练习》"></a>《刻意练习》</h1><h2 id="心里表征有助于理解信息"><a href="#心里表征有助于理解信息" class="headerlink" title="心里表征有助于理解信息"></a>心里表征有助于理解信息</h2><p>对于一个普通人，不论足球、象棋，都很难一下子就明白状况，因为他们没有建立对应的心里表征，看到的都是独立的树，看不到森林。</p>
<h2 id="心里表征有助于组织信息"><a href="#心里表征有助于组织信息" class="headerlink" title="心里表征有助于组织信息"></a>心里表征有助于组织信息</h2><p>充分理解信息才能在需要的时候有效地组织起来发挥作用。很多病都可以造成眼睛看不清或者耳痛，是同一种病，还是许多病同时发生？有经验的医生能根据自身阅历猜测、询问，最终确定病因，是因为他们知道这些症状意味着什么。把各种看似无关的信息拼凑在一起，这就是根据已有的心里表征组织信息。</p>
<h1 id="一炮走红的国家"><a href="#《一炮走红的国家》" class="headerlink" title="《一炮走红的国家》"></a>《一炮走红的国家》</h1><h2 id="东欧双子星波兰-捷克"><a href="#东欧双子星————波兰、捷克" class="headerlink" title="东欧双子星————波兰、捷克"></a>东欧双子星————波兰、捷克</h2><p>波兰与捷克是东欧经济形势最好的两个国家，原因正是因为他们稳定而务实的国民心态。作为苏联解体后，最先摆脱卫星国梦魇的波兰快速整理好了国内的银行业，为吸引投资打下基础；捷克也是如此，物价平稳，劳动力便宜。</p>
<p>另外，由于加入欧盟的时间较晚，波兰与捷克都是受惠国，能借此继续保持高增速的经济。</p>
<h2 id="反面教材匈牙利"><a href="#反面教材————匈牙利" class="headerlink" title="反面教材————匈牙利"></a>反面教材————匈牙利</h2><p>匈牙利在十年发展的前期是经济复苏的佼佼者，吸引了大量投资。</p>
<p>但政党间为了拉去选票肆意挥霍金钱，政策摇摆，错失了良机。</p>
<div class="hr-sect">Idea (～￣▽￣)～ Spreading</div>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;hr-sect&quot;&gt;Hack ╮(￣▽￣)╭ News&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Tech (￣▽￣)~* Learning&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Book ╰(￣▽￣)╭ Readin
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>无意识的决策</title>
    <link href="http://blog.sin5th.com/2017/06/03/2017-06-03/"/>
    <id>http://blog.sin5th.com/2017/06/03/2017-06-03/</id>
    <published>2017-06-03T15:12:15.000Z</published>
    <updated>2017-06-03T15:39:26.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hr-sect">Hack ╮(￣▽￣)╭ News</div>



<div class="hr-sect">Tech (￣▽￣)~* Learning</div>



<div class="hr-sect">Book ╰(￣▽￣)╭ Reading</div>

<h1 id="刻意练习"><a href="#《刻意练习》" class="headerlink" title="《刻意练习》"></a>《刻意练习》</h1><h2 id="心里表征与无意识的决策"><a href="#心里表征与无意识的决策" class="headerlink" title="心里表征与无意识的决策"></a>心里表征与无意识的决策</h2><p>从一项关于室内攀岩试验中，我们发现，有经验的攀岩运动员能更加快速地识别出不同岩石所需要的手型，并且做出相应的动作，这基本上是一种无意识的行为。普通人则需要通过思考来完成。</p>
<h1 id="开发者必读之软件架构"><a href="#《开发者必读之软件架构》" class="headerlink" title="《开发者必读之软件架构》"></a>《开发者必读之软件架构》</h1><h2 id="关于-c4-问题"><a href="#关于-C4-问题" class="headerlink" title="关于 C4 问题"></a>关于 C4 问题</h2><p>在使用 C4 法绘制架构图中可能遇到许多的问题</p>
<h3 id="语境图上需不需要标注系统名称"><a href="#语境图上需不需要标注系统名称？" class="headerlink" title="语境图上需不需要标注系统名称？"></a>语境图上需不需要标注系统名称？</h3><p>既然要在语境图上确定整体的技术决策，那么为众所周知的系统写上名称和简单的职责描述是比较恰当的。</p>
<h3 id="共享组件如何表示"><a href="#共享组件如何表示？" class="headerlink" title="共享组件如何表示？"></a>共享组件如何表示？</h3><p>比如多个容器使用日志模块，那么在每个容器中都画出该组件，然后标记他们是相同的。因为编写代码时是这样的。</p>
<h3 id="工具组件如何表示"><a href="#工具组件如何表示？" class="headerlink" title="工具组件如何表示？"></a>工具组件如何表示？</h3><p>比如所有容器连接数据库时都使用一个中间库组件，那么可以把它独立出来，用线连接表示，但是很快就会乱。所以把它画在一旁，标记上这是一个工具组件就可以了。</p>
<h3 id="软件如何融入整体环境"><a href="#软件如何融入整体环境？" class="headerlink" title="软件如何融入整体环境？"></a>软件如何融入整体环境？</h3><p>要想描述出软件在整个生态中的位置，那么可能就要在语境图上再加一层，变成 C5。这是很有意义的，至少能让销售和运营人员更了解软件的地位。</p>
<div class="hr-sect">Idea (～￣▽￣)～ Spreading</div>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;hr-sect&quot;&gt;Hack ╮(￣▽￣)╭ News&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Tech (￣▽￣)~* Learning&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Book ╰(￣▽￣)╭ Readin
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>预测未来</title>
    <link href="http://blog.sin5th.com/2017/06/02/2017-06-02/"/>
    <id>http://blog.sin5th.com/2017/06/02/2017-06-02/</id>
    <published>2017-06-02T14:26:07.000Z</published>
    <updated>2017-06-02T15:19:59.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hr-sect">Hack ╮(￣▽￣)╭ News</div>



<div class="hr-sect">Tech (￣▽￣)~* Learning</div>



<div class="hr-sect">Book ╰(￣▽￣)╭ Reading</div>

<h1 id="一炮走红的国家"><a href="#《一炮走红的国家》" class="headerlink" title="《一炮走红的国家》"></a>《一炮走红的国家》</h1><h2 id="墨西哥制造业渐露优势"><a href="#墨西哥制造业渐露优势" class="headerlink" title="墨西哥制造业渐露优势"></a>墨西哥制造业渐露优势</h2><p>比起拉丁美洲的邻居，亚洲的国家和墨西哥更像。墨西哥于中国的竞争关系由来已久，都是通过制造业和出口拉动经济增长。虽然在过去的十年的早期，墨西哥完全不是中国的对手，但随着中国的人力和运输成本上升，墨西哥渐渐看到了转机。</p>
<h2 id="墨西哥身处低谷触底反弹"><a href="#墨西哥身处低谷，触底反弹" class="headerlink" title="墨西哥身处低谷，触底反弹"></a>墨西哥身处低谷，触底反弹</h2><p>墨西哥经济的持续低迷给人触底反弹的希望，毕竟机会与优势在不断地积累，也许哪一天这个国家幡然醒悟，就能借着这些优势一飞冲天。</p>
<h1 id="开发者必读之软件架构"><a href="#《开发者必读之软件架构》" class="headerlink" title="《开发者必读之软件架构》"></a>《开发者必读之软件架构》</h1><h2 id="草图的劣势不一致性"><a href="#草图的劣势：不一致性" class="headerlink" title="草图的劣势：不一致性"></a>草图的劣势：不一致性</h2><p>虽然随手而作的草图便利、高效，但也带来了一些坏处，比如：不一致。如果将来要将这些草图转化成专业的 UML 图进行文档化，那么遵循一些约定是有必要的。</p>
<h2 id="值得约定的习惯"><a href="#值得约定的习惯" class="headerlink" title="值得约定的习惯"></a>值得约定的习惯</h2><p>1.每张图都最好有一个言简意赅的<em>标题</em>；2.用<em>标签</em>展示更多有意义的信息；3.如果图形的<em>形状</em>有特殊含义，那么保持一致性并附上图例；4.用简短的文字标记<em>职责</em>；5.利用<em>线条和箭头</em>清晰地表达关系；6.善用<em>颜色</em>使图更加清晰；7.注意<em>布局</em>，避免不断修改带来的麻烦；8.软件层次的绘制<em>方向</em>可能决定读者的关注点（比如，数据库到业务是从上到下，还是从下到上）；9.合理地使用不同<em>边框</em>来区分系统状态（已有的，或者待做的）。</p>
<h2 id="有效草图的评价标准"><a href="#有效草图的评价标准" class="headerlink" title="有效草图的评价标准"></a>有效草图的评价标准</h2><p>评价一个草图是否达到效果，可以问自己几个问题：能不能说明系统是用来做什么的？用户是谁？所处的IT环境是怎样的？数据的流向是怎样的？组件是不是都有家？等等。。</p>
<h1 id="刻意练习"><a href="#《刻意练习》" class="headerlink" title="《刻意练习》"></a>《刻意练习》</h1><h2 id="刻意练习包括创建心里表征"><a href="#刻意练习包括创建心里表征" class="headerlink" title="刻意练习包括创建心里表征"></a>刻意练习包括创建心里表征</h2><p>史蒂夫记数出色是因为他发明了独特的记忆方法，压缩了这些信息；伦敦的出租司机堪比GPS是他们在大脑中建立了心里地图。这些就是心里表征，是刻意练习的一部分。</p>
<h2 id="心里表征的领域特定性"><a href="#心里表征的领域特定性" class="headerlink" title="心里表征的领域特定性"></a>心里表征的领域特定性</h2><p>史蒂夫并没有在一般的记忆能力上获得非凡的能力，只是在记数这件事上表现突出；伦敦的出租司机的常规记忆能力与常人无异，只是对伦敦周边的路线导航尤其精通。这是因为心里表征有它的领域特定性，不同的事情需要的心里表征并不相同。</p>
<h2 id="心理表征铸就杰出表现"><a href="#心理表征铸就杰出表现" class="headerlink" title="心理表征铸就杰出表现"></a>心理表征铸就杰出表现</h2><p>棒球击球手是一个很关键的角色，需要在瞬间判断出球的走向，并以合适的角度挥出棒。没有人能从一个高速飞翔的球上看出端倪，击球手的判断都是出自对投球手的观察，从他们的动作、出手角度、出手位置猜测结果，这是对投球建立的心里表征。</p>
<h2 id="心里表征有助于找出规律-预测未来"><a href="#心里表征有助于找出规律、预测未来" class="headerlink" title="心里表征有助于找出规律、预测未来"></a>心里表征有助于找出规律、预测未来</h2><p>对于大多数人来说，足球是一件极其杂乱无章的事情，仿佛就是 11 个人在追着球乱跑，但在懂球人的眼里，这其中蕴藏着规律。运动员和懂球的人在过往的经历中形成了心里表征，他们理解足球的方式和普通人不一样，可以在现状中看到过去的影子。</p>
<p>一旦找到规律，他们很容易预测将要发生的事，对手会怎样运球，或者同伴会怎样配合。</p>
<div class="hr-sect">Idea (～￣▽￣)～ Spreading</div>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;hr-sect&quot;&gt;Hack ╮(￣▽￣)╭ News&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Tech (￣▽￣)~* Learning&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Book ╰(￣▽￣)╭ Readin
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>心里表征</title>
    <link href="http://blog.sin5th.com/2017/06/01/2017-06-01/"/>
    <id>http://blog.sin5th.com/2017/06/01/2017-06-01/</id>
    <published>2017-06-01T13:53:45.000Z</published>
    <updated>2017-06-01T15:02:59.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hr-sect">Hack ╮(￣▽￣)╭ News</div>



<div class="hr-sect">Tech (￣▽￣)~* Learning</div>



<div class="hr-sect">Book ╰(￣▽￣)╭ Reading</div>

<h1 id="一炮走红的国家"><a href="#《一炮走红的国家》" class="headerlink" title="《一炮走红的国家》"></a>《一炮走红的国家》</h1><h2 id="墨西哥的股市与经济"><a href="#墨西哥的股市与经济" class="headerlink" title="墨西哥的股市与经济"></a>墨西哥的股市与经济</h2><p>拥有1.05亿人口的墨西哥曾是拉丁美洲最富裕的国家，但1994年的经济危机之后，墨西哥的经济基本停滞。</p>
<p>不过，墨西哥的股市增长强劲，如果以美元计价，过去十年间股市上涨了200%。</p>
<p>造成这种现象的原因有两个。第一个是寡头垄断，暴利吸引了资金，却没有带来相称的投资与创新；第二个是许多影响经济的企业没有上市，股市走高不足以代表经济增长。</p>
<h2 id="墨西哥的寡头问题"><a href="#墨西哥的寡头问题" class="headerlink" title="墨西哥的寡头问题"></a>墨西哥的寡头问题</h2><p>寡头文化的根源在于政治，执政党本身就是垄断的，所以墨西哥人民也习惯了中央集权。寡头通过金钱作用于代表选举，代表通过投票为寡头提供优势，因此这种状态得以保持稳定。人民反对私有化，政府也试图改变，但这个国家却丝毫没有停止垄断的迹象。</p>
<p>最令人啼笑皆非的是，寡头文化并没有使任何人收益，包括寡头自己。强烈的仇富情绪使富豪们不得不乘坐装甲车、雇佣保镖，任何不经意的闪失都可能让他们断送性命。</p>
<h1 id="开发者必读之软件架构"><a href="#《开发者必读之软件架构》" class="headerlink" title="《开发者必读之软件架构》"></a>《开发者必读之软件架构》</h1><h2 id="uml工具"><a href="#UML工具" class="headerlink" title="UML工具"></a>UML工具</h2><p>首先来讲，UML 绝不是必须的，并且在很多情况下，我们还应该避免使用它们，而是采取一些更轻量级的做法，比如：草图。</p>
<p>选择 UML 工具是一件令人困扰的事，因为它的种类很多，实现更是五花八门。从使用方法上大体可以分为四种：第一种是简单的画图工具，它允许你快速地构造一个 UML 图，没有复杂的描述，也和代码无关；第二种是逆向工程，它能根据代码自动生成图，不过可想而知，这种图通常融合了各个层次的细节；第三种是往返工程，它会把代码的改变反映到图上，也会把图上的操作映射回代码；最后一种是模型驱动，它允许你使用 UML 同时完成程序的设计与编写，但这种工具往往会限制住你的开发过程。</p>
<p>总之，UML 不总是最好的选择。看到黑板上贴着的 TODO，你总会习惯性地看一眼；但画在屏幕上的 UML 图，只会让你躲得越远越好。</p>
<h2 id="uml用途"><a href="#UML用途" class="headerlink" title="UML用途"></a>UML用途</h2><p>话虽如此，UML 倒也不全是缺点，确有其发挥作用的地方。C4 方法可以很好地描述静态架构，但是面对动态图就显得不够了。UML 是很好的补充，比如：流程图、时序图、协作图、状态图、部署图。</p>
<p>当然，一切的好坏都不是绝对的，你只有在明白如何进行软件的架构和设计后，才能真正体会到那些工具是怎样服务于你的工作的。</p>
<h1 id="刻意练习"><a href="#《刻意练习》" class="headerlink" title="《刻意练习》"></a>《刻意练习》</h1><h2 id="盲棋大师"><a href="#盲棋大师" class="headerlink" title="盲棋大师"></a>盲棋大师</h2><p>同时与众多棋手下盲棋是一件极其不可思议的事，因为要记住每个棋盘上每个棋子的摆放位置，并且思考对局的走法。</p>
<p>有一位很伟大的国际象棋大师，同时也是首屈一指的盲棋大师。从时间上看，他并没有在盲棋上付出很多，却仍然成为了大师，这不禁让人感到困惑。仔细观察会发现，虽然他没有专门为盲棋做训练，但过往的经历和他对象棋的追求促成了在盲棋上卓越的条件——他经常记忆对局信息，并模拟真实的下棋。</p>
<h2 id="大师比新手强在何处"><a href="#大师比新手强在何处" class="headerlink" title="大师比新手强在何处"></a>大师比新手强在何处</h2><p>对比大师、中等选手、初级选手和普通人对棋局的记忆能力，实验结果显示：大师和中等选手对于对弈棋局的记忆较为完整，初级选手和普通人则只能记住6到7颗棋子的位置；而对于随意摆放的棋局，所有人的记忆水平没有明显差别。</p>
<p>事实上，大师之所以是大师，在于他对棋局的理解更加深刻，能瞬间看清局势，并因此记下一个模糊的全局情况，之后，在回忆的过程中，能逐渐推理出细节。因此，大师之所以表现的更为优秀，是他们将棋局压缩成了更有意义的事，而不仅仅是棋子和它们的摆放位置。</p>
<h2 id="心里表征"><a href="#心里表征" class="headerlink" title="心里表征"></a>心里表征</h2><p>心里表征是指我们思考一件事物时，大脑中与之对应的结构。</p>
<div class="hr-sect">Idea (～￣▽￣)～ Spreading</div>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;hr-sect&quot;&gt;Hack ╮(￣▽￣)╭ News&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Tech (￣▽￣)~* Learning&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Book ╰(￣▽￣)╭ Readin
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>2017-05-30</title>
    <link href="http://blog.sin5th.com/2017/05/30/2017-05-30/"/>
    <id>http://blog.sin5th.com/2017/05/30/2017-05-30/</id>
    <published>2017-05-30T11:59:50.000Z</published>
    <updated>2017-05-30T13:33:23.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hr-sect">Hack ╮(￣▽￣)╭ News</div>



<div class="hr-sect">Tech (￣▽￣)~* Learning</div>



<div class="hr-sect">Book ╰(￣▽￣)╭ Reading</div>

<h1 id="一炮走红的国家"><a href="#《一炮走红的国家》" class="headerlink" title="《一炮走红的国家》"></a>《一炮走红的国家》</h1><h2 id="不思进取的巴西"><a href="#不思进取的巴西" class="headerlink" title="不思进取的巴西"></a>不思进取的巴西</h2><p>如果说中国是“不顾一切的求发展”，那么巴西就是“不顾一切的求稳定”。巴西拥有世界第十的石油蕴藏量，也是新兴国家中最大的出口大国之一，但这些得天独厚的优势却没让巴西成为新兴国家中经济增速最快的国家。</p>
<p>红火的出口生意让巴西轻而易举地发展，但也对其他产业造成了破坏。如果有一种轻松又愉快的赚钱方式，那人们一定是趋之若鹜，而那些费力的，但真正有好处的事情就没人愿意去做，比如，公共设施建设。</p>
<h2 id="股市与现实"><a href="#股市与现实" class="headerlink" title="股市与现实"></a>股市与现实</h2><p>股市的好坏很大程度地反映了人们对国家经济的信心。巴西的股市是一个加分项，因为它的开放程度在新兴国家中名列前茅。在这方面，中国反而是最闭塞的。</p>
<p>从 2006 年到 2011 年，巴西的股市的涨幅几乎是中国的 300%，从这点看，巴西的经济似乎还是乐观的。</p>
<h1 id="刻意练习"><a href="#《刻意练习》" class="headerlink" title="《刻意练习》"></a>《刻意练习》</h1><h2 id="练习如何影响大脑结构"><a href="#练习如何影响大脑结构" class="headerlink" title="练习如何影响大脑结构"></a>练习如何影响大脑结构</h2><p>为了更好地验证练习对大脑的改变，我们比对了6名演奏家与普通人的脑结构，发现在控制左手的大脑皮层部分，演奏家的灰质层更厚，这说明这里有更多的神经元。</p>
<p>类似现象在跳水运动员、体操运动员身上也有出现。</p>
<h2 id="三个特征"><a href="#三个特征" class="headerlink" title="三个特征"></a>三个特征</h2><p>练习对身体的影响有三个值得关注的特征。第一，练习开展的越早越好，儿童的练习效果显著高于成年人，就好像掰弯一棵幼苗要比掰弯一棵大树要来的容易。第二，一方面的能力提升会压制其他能力的发展，伦敦司机对其他地点的记忆能力要比常人差，这可能是因为特殊技能占用了一部分其他能力的神经元。第三，停止练习往往带来水平的下降。</p>
<h2 id="创造潜能"><a href="#创造潜能" class="headerlink" title="创造潜能"></a>创造潜能</h2><p>常规的练习往往强调开发我们的潜能，就是那些我们天生就能完成的事情。但是，有目的练习和刻意练习不同，它们是为了创造潜能，让我们做到本来不能做到的事情。</p>
<h1 id="很感谢你能来不遗憾你走开"><a href="#《很感谢你能来，不遗憾你走开》" class="headerlink" title="《很感谢你能来，不遗憾你走开》"></a>《很感谢你能来，不遗憾你走开》</h1><h2 id="爱你的人应有的样子"><a href="#爱你的人应有的样子" class="headerlink" title="爱你的人应有的样子"></a>爱你的人应有的样子</h2><h3 id="爱你的人总在关键的时刻出现"><a href="#爱你的人总在关键的时刻出现" class="headerlink" title="爱你的人总在关键的时刻出现"></a>爱你的人总在关键的时刻出现</h3><p>不知吃错了什么，突然间发烧肚子痛躺进医院，直觉不妙之际发了朋友圈。没过多时，两千多读者留言问候，大多是之前从未互动过的。一时间，泪如雨下。</p>
<h3 id="爱你的人看穿你遮掩起来的伤疤"><a href="#爱你的人看穿你遮掩起来的伤疤" class="headerlink" title="爱你的人看穿你遮掩起来的伤疤"></a>爱你的人看穿你遮掩起来的伤疤</h3><p>。。。</p>
<h2 id="我决定停止阅读这本书"><a href="#我决定停止阅读这本书" class="headerlink" title="我决定停止阅读这本书"></a>我决定停止阅读这本书</h2><p>读到这里大概是24%的进度，实在再读不下去。随便经历俩故事就敢总结人生，道理全是为了应景，措辞还不押韵。</p>
<p>不修身，更不怡情，弃之。</p>
<h1 id="开发者必读之软件架构"><a href="#《开发者必读之软件架构》" class="headerlink" title="《开发者必读之软件架构》"></a>《开发者必读之软件架构》</h1><h2 id="架构与编码"><a href="#架构与编码" class="headerlink" title="架构与编码"></a>架构与编码</h2><p>架构总是被定义为概念性的、抽象的、与实现无关的，而编码是架构之外的、不需考虑的细节。但我们在架构设计时，可能会犹豫这样一个问题：web服务器、应用服务器都需要日志，那么这个日志要分别画在两个容器内，还是独立出来呢？这个时候，最好的方式就是扪心自问一下，你会为一个独立的中央日志服务编写代码吗，如果不会，那么结果就显而易见了。</p>
<div class="hr-sect">Idea (～￣▽￣)～ Spreading</div>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;hr-sect&quot;&gt;Hack ╮(￣▽￣)╭ News&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Tech (￣▽￣)~* Learning&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Book ╰(￣▽￣)╭ Readin
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>2017-05-29</title>
    <link href="http://blog.sin5th.com/2017/05/29/2017-05-29/"/>
    <id>http://blog.sin5th.com/2017/05/29/2017-05-29/</id>
    <published>2017-05-28T17:09:49.000Z</published>
    <updated>2017-05-29T13:40:56.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hr-sect">Hack ╮(￣▽￣)╭ News</div>



<div class="hr-sect">Tech (￣▽￣)~* Learning</div>



<div class="hr-sect">Book ╰(￣▽￣)╭ Reading</div>

<h1 id="一炮走红的国家"><a href="#《一炮走红的国家》" class="headerlink" title="《一炮走红的国家》"></a>《一炮走红的国家》</h1><h2 id="上帝如此眷顾巴西"><a href="#上帝如此眷顾巴西" class="headerlink" title="上帝如此眷顾巴西"></a>上帝如此眷顾巴西</h2><p>巴西最令人羡慕的经济优势，是它的出口贸易。几乎所有高利润的商品，巴西都有涉及。</p>
<p>但巴西的经济从80年代起就不温不火，4.5%的增速，相比于中国、俄罗斯、印度的8%，简直不值一提。</p>
<h2 id="巴西的教育与交通实在令人气馁"><a href="#巴西的教育与交通实在令人气馁" class="headerlink" title="巴西的教育与交通实在令人气馁"></a>巴西的教育与交通实在令人气馁</h2><p>如果将巴西与中国对比，会发现两个国家几乎截然相反。中国在新设施的建设投入上达到了国内生产总值的50%，而在巴西这个数字只有19%。</p>
<p>在交通上的吝啬使得商品运输损失严重，不断老化的机场难以满足日益增加的运输需求。</p>
<p>在教育上的吝啬使得熟练工人的数量不够，人力成本越来越高。在巴西人们的平均教育年龄是7年，而劳动力更加廉价的中国平均教育年龄是8年。</p>
<h1 id="刻意练习"><a href="#《刻意练习》" class="headerlink" title="《刻意练习》"></a>《刻意练习》</h1><h2 id="大脑的重新布线"><a href="#大脑的重新布线" class="headerlink" title="大脑的重新布线"></a>大脑的重新布线</h2><p>如果人脑和电脑一样都是硬连线，那么盲人处理视觉的神经元应该是一直空转的。但从实验结果看，大脑并没有放任这些神经元自由活动，而是将它们重新分配给了其他功能。</p>
<p>盲文是一种用手指触摸来识别含义的记录方式，试验显示，盲人在阅读盲文时，处理视觉信息的神经元异常活跃。</p>
<p>老花眼是一种困扰50岁以上老人的一种视力问题，因为肌肉老化，晶状体无法更好地调节形状让眼睛做近距离聚焦。然而，经过我们针对性的训练后，这些老人在阅读报纸方面有所提高。虽然他们的眼睛依然无法准确聚焦，但大脑似乎多了一个去除模糊的功能。</p>
<h2 id="肌肉练习与走出舒适区"><a href="#肌肉练习与走出舒适区" class="headerlink" title="肌肉练习与走出舒适区"></a>肌肉练习与走出舒适区</h2><p>我们的身体天生有种维持稳定的特征，比如体温、心率、血糖、PH平衡。细胞也是，比如钠钾平衡。</p>
<p>这种稳定不是静态的，当我们运动时，心率会自然地加快，休息一段时间后又会恢复正常。简单的训练让身体在不作改变的情况下就完成，这达不到提升的效果。只有走出舒适区，又不超出身体最大值，才能起到锻炼的效果。</p>
<h1 id="很感谢你能来不遗憾你走开"><a href="#《很感谢你能来，不遗憾你走开》" class="headerlink" title="《很感谢你能来，不遗憾你走开》"></a>《很感谢你能来，不遗憾你走开》</h1><h2 id="不能因为一句为我好就干涉我的生活"><a href="#不能因为一句为我好，就干涉我的生活" class="headerlink" title="不能因为一句为我好，就干涉我的生活"></a>不能因为一句为我好，就干涉我的生活</h2><p>公司新来的小姑娘青春洋溢、个性十足，业务能力也很棒。行政部的大姐看不惯，出言干涉。小姑娘有所收敛，大姐却得寸进尺，又对人家的私生活指手画脚，结果惹祸上身，被忍无可忍的小姑娘臭骂一顿。</p>
<h2 id="真的为我好还是为我平庸"><a href="#真的为我好，还是为我平庸" class="headerlink" title="真的为我好，还是为我平庸"></a>真的为我好，还是为我平庸</h2><p>有些亲友确实出于好意，从最现实最安全的角度提出建议，但任何人的见解都有局限性。这些建议是为了我们的安全还是平凡？谁也说不准。</p>
<h2 id="毒舌枪手"><a href="#毒舌枪手" class="headerlink" title="毒舌枪手"></a>毒舌枪手</h2><p>不怀好意的人并不少见，妄图用恶俗的言语扰人心智，拉人下马。看似损人利己的做法，被人利用时就变成了无知的枪手。</p>
<h1 id="开发者必读之软件架构"><a href="#《开发者必读之软件架构》" class="headerlink" title="《开发者必读之软件架构》"></a>《开发者必读之软件架构》</h1><h2 id="是否要做技术决策"><a href="#是否要做技术决策" class="headerlink" title="是否要做技术决策"></a>是否要做技术决策</h2><p>架构一直被认为是概念性的、实现无关的。不论是设计阶段，还是文档补全阶段，我们都有各种理由不作技术决策。</p>
<p>但我始终认为，一个可行的技术选择，可以引导我们做深入的思考，做出一个脚踏实地的架构设计。否则，不如请一个不懂技术的门外汉来做架构设计。</p>
<div class="hr-sect">Idea (～￣▽￣)～ Spreading</div>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;hr-sect&quot;&gt;Hack ╮(￣▽￣)╭ News&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Tech (￣▽￣)~* Learning&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Book ╰(￣▽￣)╭ Readin
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>2017-05-28</title>
    <link href="http://blog.sin5th.com/2017/05/28/2017-05-28/"/>
    <id>http://blog.sin5th.com/2017/05/28/2017-05-28/</id>
    <published>2017-05-28T15:08:12.000Z</published>
    <updated>2017-05-28T17:06:21.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hr-sect">Hack ╮(￣▽￣)╭ News</div>



<div class="hr-sect">Tech (￣▽￣)~* Learning</div>



<div class="hr-sect">Book ╰(￣▽￣)╭ Reading</div>

<h1 id="一炮走红的国家"><a href="#《一炮走红的国家》" class="headerlink" title="《一炮走红的国家》"></a>《一炮走红的国家》</h1><h2 id="人口炸弹与人口红利"><a href="#人口炸弹与人口红利" class="headerlink" title="人口炸弹与人口红利"></a>人口炸弹与人口红利</h2><p>在80年代之前，印度还流传着“人口炸弹”的说法，但随后便逐渐淡忘了。到了最近10年，反而相信起了“人口红利”，觉得在中国发生的事情在印度也一定可以复现。单从人口上看，这个想法是正确的，人口洪流的确能带来大量劳动力，但仔细观察就会发现，中国与印度有许多本质的差别。</p>
<p>中国之所以能享受人口红利，是由于农村人口向富裕地区转移，参与到了城市建设中；而印度的政策却趋向于让农民待在农村，并且没有为劳动力提供足够的就业岗位。</p>
<p>中国通过最低工资标准为低收入人群提供保障；印度则是使用直接的经济补贴，如此过早地进行福利建设最终会拖垮政府。</p>
<p>尽管如此，印度的发展速度还是有希望超越中国，毕竟底子太差了。</p>
<h1 id="很感谢你能来不遗憾你走开"><a href="#《很感谢你能来，不遗憾你走开》" class="headerlink" title="《很感谢你能来，不遗憾你走开》"></a>《很感谢你能来，不遗憾你走开》</h1><h2 id="无底线的伤害来自于无底线的忍耐"><a href="#无底线的伤害来自于无底线的忍耐" class="headerlink" title="无底线的伤害来自于无底线的忍耐"></a>无底线的伤害来自于无底线的忍耐</h2><p>我是一家公司的老板，有一天，一起打拼的兄弟突然和我说家里出了变故，不得已要离开公司。我挽留不住，只好放人，又念着同袍情分提供了经济上的帮助。</p>
<p>过了一段时间，我侧面了解到，这个兄弟对我说了谎。他出去是搞自己的公司，并且还在以我的名义偷偷转移客户。回想当初，他本就是偷鸡摸狗之人，被我捉住批评一顿，认错后便未追究。一时手软，酿此大祸。</p>
<h2 id="没赶尽杀绝是念在过去情分不容忍过错是不想被当作懦弱"><a href="#没赶尽杀绝是念在过去情分，不容忍过错是不想被当作懦弱" class="headerlink" title="没赶尽杀绝是念在过去情分，不容忍过错是不想被当作懦弱"></a>没赶尽杀绝是念在过去情分，不容忍过错是不想被当作懦弱</h2><p>我是家族企业的继承人，少不服众，企业高层多是沾亲带故的长辈，坐等着退休，都在不停地为自己捞油水。我把情况讲给父亲，父亲也无可奈何，同族亲友不好撕破脸皮，况且人家拿着企业机密，处理不好鸡飞蛋打。</p>
<p>后来，我把他们聚在一起，送到国外旅游，然后请来审计公司，直接进驻企业查他们的罪证。等他们旅游回来，证据也拿全了，逐个叫到办公室，“我在找人接手你们的职务，你们可以保持现有的职位与收入，但不能插手公司事务。另外，公司的事情但凡透露出去，我手中的证据足够你坐一辈子牢”。</p>
<h2 id="有立场的善良才不会招致利用有手段的仁慈才会得到应有的尊重"><a href="#有立场的善良才不会招致利用，有手段的仁慈才会得到应有的尊重" class="headerlink" title="有立场的善良才不会招致利用，有手段的仁慈才会得到应有的尊重"></a>有立场的善良才不会招致利用，有手段的仁慈才会得到应有的尊重</h2><p>我是一名普通的学生，总是被小痞子欺负。我不断地让步，企图躲过他们的攻击，但却一次次迎来他们的得寸进尺。</p>
<p>终于有一次，我忍不住了，还手打折了对方的鼻梁骨。我等着他报复，他却搂起了我的肩膀，从此称兄道弟。</p>
<h2 id="挺起脊梁无需大杀四方"><a href="#挺起脊梁，无需大杀四方" class="headerlink" title="挺起脊梁，无需大杀四方"></a>挺起脊梁，无需大杀四方</h2><p>我是喜欢网购的姑娘，觉得生活不易，从不用快递小哥送货上楼。然而有一段时间，妈妈的脚摔伤了，我又要出差，不能照顾她。在我出发前的一次收快递过程中，特意要求快递小哥把东西送到家门口，结果电话中竟听到了满口抱怨。</p>
<p>于是，我坚持行使了我的权利，而后对快递小哥解释了原因，让他明白生活不该单方面的迁就，而是该互相体谅。</p>
<h1 id="刻意练习"><a href="#《刻意练习》" class="headerlink" title="《刻意练习》"></a>《刻意练习》</h1><h2 id="大脑对训练的适应性"><a href="#大脑对训练的适应性" class="headerlink" title="大脑对训练的适应性"></a>大脑对训练的适应性</h2><p>我们很清楚肌肉对训练的适应性，力量训练让肱二头肌变大了，或者体能训练让肺活量上升了。但是，我们很难期待大脑也有如此表现，比如，记数训练让大脑长了六块肌肉。</p>
<p>不过，斯蒂夫和其他实验者的表现，让我们相信，大脑本身也存在着对训练的适应性。</p>
<h2 id="街道的复杂与出租司机的记忆"><a href="#街道的复杂与出租司机的记忆" class="headerlink" title="街道的复杂与出租司机的记忆"></a>街道的复杂与出租司机的记忆</h2><p>伦敦的地图十分复杂，散乱分布的街道，横贯城市的泰晤士河，堪称GPS克星。初到伦敦，想仅靠一辆导航汽车完成环城之旅，简直是痴心妄想。</p>
<p>但伦敦的出租司机却助你顺利完成这个目标，他们能准确地记住伦敦大大小小的标志性建筑，甚至当你想不起店名，而向他描述了旁边的雕像时，伦敦的出租司机也能把你带到你想去的地方。</p>
<h2 id="长大的海马体"><a href="#长大的海马体" class="headerlink" title="长大的海马体"></a>长大的海马体</h2><p>在成为一名合格的伦敦出租司机之前，一般要花费2年左右的时间熟记路线，经常还要骑着小摩托，亲身感受一下。考核是十分严格的，考官会随机描述两个地点，让参考者明确地说出地名和最短的行驶路线。</p>
<p>在对出租司机和普通市民的脑部扫描时，发现出租司机的海马体普遍更大；进一步对比出租司机和公交司机的海马体，也是前者更大，这排除了驾驶汽车的影响，而将差别锁定在对路线与方位的记忆上。</p>
<p>有人曾质疑，出租司机与海马体大存在关联关系，并不说明他们存在因果关系，还可能是海马体大让他们有资格成为了出租司机。但这个质疑很容易排除，通过追踪实验，我们对比了新出租司机、一段时间后的新出租司机、普通人，发现确实是出租司机的工作让他们的海马体发生了变化。</p>
<h1 id="开发者必读之软件架构"><a href="#《开发者必读之软件架构》" class="headerlink" title="《开发者必读之软件架构》"></a>《开发者必读之软件架构》</h1><h2 id="组件图的意图-结构-交互与动机"><a href="#组件图的意图、结构、交互与动机" class="headerlink" title="组件图的意图、结构、交互与动机"></a>组件图的意图、结构、交互与动机</h2><p>组件图描述容器的内部组成、工作方式、实现位置。</p>
<p>一张组件图通常仅描绘一个容器。不过如果容器很少，或者组件很简单，也可以都画在一起。用名称、技术（语言、框架）、职责描述组件。</p>
<p>组件间的连线最好标记上交互目的、通信方式。</p>
<p>我们愿意画组件图，是因为它能将系统分解为职责不同的组件，还展示了组件间的关系和依赖，为软件开发提供了分解交付的指导。</p>
<div class="hr-sect">Idea (～￣▽￣)～ Spreading</div>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;hr-sect&quot;&gt;Hack ╮(￣▽￣)╭ News&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Tech (￣▽￣)~* Learning&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Book ╰(￣▽￣)╭ Readin
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>2017-05-27</title>
    <link href="http://blog.sin5th.com/2017/05/27/2017-05-27/"/>
    <id>http://blog.sin5th.com/2017/05/27/2017-05-27/</id>
    <published>2017-05-27T13:31:11.000Z</published>
    <updated>2017-05-27T14:34:56.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hr-sect">Hack ╮(￣▽￣)╭ News</div>



<div class="hr-sect">Tech (￣▽￣)~* Learning</div>



<div class="hr-sect">Book ╰(￣▽￣)╭ Reading</div>

<h1 id="一炮走红的国家"><a href="#《一炮走红的国家》" class="headerlink" title="《一炮走红的国家》"></a>《一炮走红的国家》</h1><h2 id="印度的南北差异"><a href="#印度的南北差异" class="headerlink" title="印度的南北差异"></a>印度的南北差异</h2><p>在发展的早期，南方的增速远超北方，一部分邦达到了12%。但在最近几年中，北方的发展势头开始逐渐追赶并超越了南方，这主要是因为南方的发展放缓，而北方的个别邦迎来了优秀的领导人。</p>
<h2 id="印度的新消费时尚"><a href="#印度的新消费时尚" class="headerlink" title="印度的新消费时尚"></a>印度的新消费时尚</h2><p>中产阶级的消费需求是普遍事实，但印度的消费时尚并不局限在中产阶级，低收入人群保持了与中产阶级类似的消费项目。</p>
<p>另外，印度的邦与邦之间区别很大，地方性商品盛行。</p>
<h1 id="很感谢你能来不遗憾你走开"><a href="#《很感谢你能来，不遗憾你走开》" class="headerlink" title="《很感谢你能来，不遗憾你走开》"></a>《很感谢你能来，不遗憾你走开》</h1><h2 id="我生本无乡心安是归处"><a href="#我生本无乡，心安是归处" class="headerlink" title="我生本无乡，心安是归处"></a>我生本无乡，心安是归处</h2><p>一位读者向我寻求一个有关至亲的故事，之后告诉我，“什么故事也比不过身在其中的悲伤”。这才知道他原是失去最后一位至亲，悲痛欲绝。</p>
<p>悲伤之余，或也该想想，亲人固然重要，但人终是为自己而活。</p>
<h2 id="初心向好便本无错-如有遗憾不必苛责"><a href="#初心向好，便本无错。如有遗憾，不必苛责" class="headerlink" title="初心向好，便本无错。如有遗憾，不必苛责"></a>初心向好，便本无错。如有遗憾，不必苛责</h2><p>“子欲养，而亲不待。”</p>
<p>失去时才发觉，那些面向未来的努力，何曾比得上平日的陪伴。</p>
<p>但转念而思，若身陷贫困，陪伴也不过是一起受苦。</p>
<h2 id="心似双丝网内有千千结"><a href="#心似双丝网，内有千千结" class="headerlink" title="心似双丝网，内有千千结"></a>心似双丝网，内有千千结</h2><p>重要的不在于，为什么而活、如何活，而在于如何看待这个过程。</p>
<h1 id="刻意练习"><a href="#《刻意练习》" class="headerlink" title="《刻意练习》"></a>《刻意练习》</h1><h2 id="有目的练习尚不足够"><a href="#有目的练习尚不足够" class="headerlink" title="有目的练习尚不足够"></a>有目的练习尚不足够</h2><p>作为史蒂夫的记数字实验的后继，我们又找了两个人，分别让他们使用原创方法和史蒂夫记数法。遗憾的是，两个人都没能走得更远，使用原创方法的人选择了退出，而使用史蒂夫记数法的人则改用了自己的方法（当然，他在这种情况下，超越了史蒂夫）。</p>
<p>通过这两次对比实验，我们认为，仅仅是有目的练习仍然不够，只有通过刻意练习才能取得超人的成绩。</p>
<h1 id="开发者必读之软件架构"><a href="#《开发者必读之软件架构》" class="headerlink" title="《开发者必读之软件架构》"></a>《开发者必读之软件架构》</h1><h2 id="容器图的意图-结构-容器-交互-动机"><a href="#容器图的意图、结构、容器、交互、动机" class="headerlink" title="容器图的意图、结构、容器、交互、动机"></a>容器图的意图、结构、容器、交互、动机</h2><p>容器图用来描述软件系统的内部组成，明确高层次的技术选择，划分容器职责，确定容器间的通信。</p>
<p>容器图一般用框框表示容器，并在容器间用线连接代表交互。有时也会画上周边系统与用户角色，作为辅助。</p>
<p>容器通常指一个可执行文件或进程主体，它最大的特点是可以单独部署。因此，容器可能是一个web服务器、应用服务器、数据库或文件系统。一般用名称、技术、职责来描述容器。</p>
<p>容器的交互通常要确定交互的目的（读/写数据，发送报告）、通信方法（web、REST、rpc 等）、通信方式（同步、异步、批量、两阶段提交等）、协议和端口号。</p>
<p>画容器图可以帮助我们完成高层次的技术选择，展示容器间的关联，让简单的语境图和复杂的组件图之间有一个过渡。</p>
<div class="hr-sect">Idea (～￣▽￣)～ Spreading</div>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;hr-sect&quot;&gt;Hack ╮(￣▽￣)╭ News&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Tech (￣▽￣)~* Learning&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Book ╰(￣▽￣)╭ Readin
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>2017-05-26</title>
    <link href="http://blog.sin5th.com/2017/05/26/2017-05-26/"/>
    <id>http://blog.sin5th.com/2017/05/26/2017-05-26/</id>
    <published>2017-05-26T14:00:54.000Z</published>
    <updated>2017-05-26T14:12:22.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hr-sect">Hack ╮(￣▽￣)╭ News</div>



<div class="hr-sect">Tech (￣▽￣)~* Learning</div>



<div class="hr-sect">Book ╰(￣▽￣)╭ Reading</div>

<h1 id="一炮走红的国家"><a href="#《一炮走红的国家》" class="headerlink" title="《一炮走红的国家》"></a>《一炮走红的国家》</h1><h2 id="印度的贪腐"><a href="#印度的贪腐" class="headerlink" title="印度的贪腐"></a>印度的贪腐</h2><p>企业走向世界对新兴国家是重大的事，印度几乎所有的企业都拥有10%的海外收入，但这种现象的根本原因，是官员索贿太过夸张，逼迫经营者放弃国内市场，虽然它在不断增长。</p>
<p>国内生产减少容易造成货物短缺、物价上涨、通胀加重，最后对经济造成严重打击。</p>
<h2 id="印度的贫富不均"><a href="#印度的贫富不均" class="headerlink" title="印度的贫富不均"></a>印度的贫富不均</h2><p>2004年，资产过百亿的富豪，印度有10个，中国有1个，日本有0个；而印度的经济总值却不如中国和日本。</p>
<p>另外，富豪名单的变化在印度也是极其缓慢的。美国的道琼斯指数，排名前三十的企业平均十五年替换一半；而印度的孟买指数，2006到2011年，有27家的企业是持续在榜的。变化缓慢说明新晋企业很难得到高速发展，这和裙带资本不无关系。</p>
<h2 id="印度的区域性政治"><a href="#印度的区域性政治" class="headerlink" title="印度的区域性政治"></a>印度的区域性政治</h2><p>印度人民的社会身份认同感更多地来自于邦，而非国家。有的邦仍将高速发展，而有的邦则基本停止。所以说，印度能否继续表现出众的概率是一半一半。</p>
<h1 id="刻意练习"><a href="#《刻意练习》" class="headerlink" title="《刻意练习》"></a>《刻意练习》</h1><h2 id="有目的的练习与随意的练习"><a href="#有目的的练习与随意的练习" class="headerlink" title="有目的的练习与随意的练习"></a>有目的的练习与随意的练习</h2><p>回想我们学习打球的过程：从网上、书里或别人那里了解基本动作，自己练习；觉得差不多了，找朋友和教练帮忙纠正，继续练习，和墙对打；之后，开始尝试和别人打，慢慢地提高，虽然有一些明显的弱点，但总算是能正常地游戏了；经过一段时间的对战，技艺越发娴熟，起初的弱点也慢慢地克服，偶尔想去打打比赛；能够从容地游戏、比赛，算是学会了打球。但学会之后，就很难再有提高，而且还会因为一段时间不打而退步。</p>
<p>这就是随意的练习，它让我们学会一件事，但并不足以将我们带领到高手的境界。</p>
<h2 id="有目的的练习的四个特征"><a href="#有目的的练习的四个特征" class="headerlink" title="有目的的练习的四个特征"></a>有目的的练习的四个特征</h2><p>有目的练习是刻意练习的前提，它包括四个必要的特征。首先要有一个明确的目标，并且专注于其中，能从中得到反馈，逐渐走出舒适区以获得提高。</p>
<h2 id="跨越瓶颈"><a href="#跨越瓶颈" class="headerlink" title="跨越瓶颈"></a>跨越瓶颈</h2><p>有的极限是因为方法不对；有的则是心理障碍。跨越平静需要足够的动力。</p>
<h1 id="开发者必读之软件架构"><a href="#《开发者必读之软件架构》" class="headerlink" title="《开发者必读之软件架构》"></a>《开发者必读之软件架构》</h1><h2 id="语境图的意图-结构用户-it设施-动机"><a href="#语境图的意图、结构，用户、it设施、动机" class="headerlink" title="语境图的意图、结构，用户、it设施、动机"></a>语境图的意图、结构，用户、it设施、动机</h2><p>语境图可以用来说明我们要做什么、谁会使用它、如何融入现有的it环境。</p>
<p>语境图的结构很简单，一个代表系统的框框，周围是用户与有关联的其他系统，用线相连。</p>
<p>用户一般包括业务用户和管理用户。</p>
<p>it环境中一般有交易数据系统、参考数据系统、中心监控系统、权限系统、通知系统、文档管理系统。</p>
<p>我们之所以愿意画语境图，是为了让语境更明确、避免假设；从较高层次理解要做的事情；为技术人员与非技术人员提供一个讨论的起点；遇到系统间的协作问题时，更方便地找到负责的人。</p>
<h1 id="很感谢你能来不遗憾你走开"><a href="#《很感谢你能来，不遗憾你走开》" class="headerlink" title="《很感谢你能来，不遗憾你走开》"></a>《很感谢你能来，不遗憾你走开》</h1><h2 id="道理我都懂就是不想动"><a href="#道理我都懂，就是不想动" class="headerlink" title="道理我都懂，就是不想动"></a>道理我都懂，就是不想动</h2><h2 id="道理给不了你美好的未来只能让努力的人活的更好"><a href="#道理给不了你美好的未来，只能让努力的人活的更好" class="headerlink" title="道理给不了你美好的未来，只能让努力的人活的更好"></a>道理给不了你美好的未来，只能让努力的人活的更好</h2><div class="hr-sect">Idea (～￣▽￣)～ Spreading</div>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;hr-sect&quot;&gt;Hack ╮(￣▽￣)╭ News&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Tech (￣▽￣)~* Learning&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Book ╰(￣▽￣)╭ Readin
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2017-05-22（补）</title>
    <link href="http://blog.sin5th.com/2017/05/26/2017-05-22/"/>
    <id>http://blog.sin5th.com/2017/05/26/2017-05-22/</id>
    <published>2017-05-26T14:00:40.000Z</published>
    <updated>2017-05-26T14:13:03.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hr-sect">Hack ╮(￣▽￣)╭ News</div>



<div class="hr-sect">Tech (￣▽￣)~* Learning</div>



<div class="hr-sect">Book ╰(￣▽￣)╭ Reading</div>

<h1 id="一炮走红的国家"><a href="#《一炮走红的国家》" class="headerlink" title="《一炮走红的国家》"></a>《一炮走红的国家》</h1><h2 id="印度的情况好坏参半"><a href="#印度的情况好坏参半" class="headerlink" title="印度的情况好坏参半"></a>印度的情况好坏参半</h2><p>印度拥有很好的条件，人口多、收入低、经济体强大且多样，但是对于婴儿潮的认识不够充分。天真地认为在中国发生的奇迹在印度也将重现，婴儿潮会为印度带来劳动力的增长，印度也将在社会老龄化之前达到中等收入水平。</p>
<p>虽然良好的教育体系、高涨的创业热情对消化劳动力有所帮助，但不愿离开农田的农民和不断降低的增长预期却传达出危机的信号。<br>另外裙带资本主义和无所作为的政府也同样令人不安。</p>
<h2 id="看衰印度的理由"><a href="#看衰印度的理由" class="headerlink" title="看衰印度的理由"></a>看衰印度的理由</h2><p>现在的印度与90年代的中国确有相似，不断增长的消费需求，一群即将进入社会的年轻人。但如果想和中国画上等号，还是不得不忽视许多细节。</p>
<p>其中一点是印度和巴西的内在联系。这两个都是“高语境”国家，个性独特、语调夸张。当然，最具有联系的部分，还是他们对福利社会的热情，这在20世纪70年代拖垮了巴西的经济。</p>
<p>另外一点在于印度的裙带资本主义盛行，这是贪腐的温床。任人为亲、豆腐渣工程，这些都打击了国内与外界的信心。</p>
<h1 id="刻意练习"><a href="#《刻意练习》" class="headerlink" title="《刻意练习》"></a>《刻意练习》</h1><h2 id="练习是必要的刻意练习最有效"><a href="#练习是必要的，刻意练习最有效" class="headerlink" title="练习是必要的，刻意练习最有效"></a>练习是必要的，刻意练习最有效</h2><p>不论是将有前途的音乐家培养成音乐会的钢琴家，还是让普通的芭蕾舞者成为舞蹈团的首席芭蕾舞演员，或是入门棋手成长为大师，都离不开练习。</p>
<p>能取得成效的练习有很多，但从我们的研究结果看，最有效的是刻意练习。</p>
<h1 id="开发者必读之软件架构"><a href="#《开发者必读之软件架构》" class="headerlink" title="《开发者必读之软件架构》"></a>《开发者必读之软件架构》</h1><h2 id="草图的约束"><a href="#草图的约束" class="headerlink" title="草图的约束"></a>草图的约束</h2><p>草图需要一定的约束，但不是像UML那样严格、复杂的标准。草图的目标是让团队可以高效地沟通。</p>
<h1 id="很感谢你能来不遗憾你离开"><a href="#《很感谢你能来，不遗憾你离开》" class="headerlink" title="《很感谢你能来，不遗憾你离开》"></a>《很感谢你能来，不遗憾你离开》</h1><h2 id="交浅言深令人生厌"><a href="#交浅言深，令人生厌" class="headerlink" title="交浅言深，令人生厌"></a>交浅言深，令人生厌</h2><p>写过几篇微信文，却引来了自来熟的学姐；发了几张样品，却招来一面同行的批评。令人感到舒适的朋友，往往都懂得如何不越界。</p>
<h2 id="交浅言深令己吃亏"><a href="#交浅言深，令己吃亏" class="headerlink" title="交浅言深，令己吃亏"></a>交浅言深，令己吃亏</h2><p>认真地为同事分析，却得来事后白眼。睿智的人，不会对谁都掏心掏肺。</p>
<div class="hr-sect">Idea (～￣▽￣)～ Spreading</div>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;hr-sect&quot;&gt;Hack ╮(￣▽￣)╭ News&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Tech (￣▽￣)~* Learning&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Book ╰(￣▽￣)╭ Readin
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>2017-05-21</title>
    <link href="http://blog.sin5th.com/2017/05/21/2017-05-21/"/>
    <id>http://blog.sin5th.com/2017/05/21/2017-05-21/</id>
    <published>2017-05-21T14:37:52.000Z</published>
    <updated>2017-05-21T15:38:50.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hr-sect">Hack ╮(￣▽￣)╭ News</div>



<div class="hr-sect">Tech (￣▽￣)~* Learning</div>



<div class="hr-sect">Book ╰(￣▽￣)╭ Reading</div>

<h1 id="很感谢你能来不遗憾你走开"><a href="#《很感谢你能来，不遗憾你走开》" class="headerlink" title="《很感谢你能来，不遗憾你走开》"></a>《很感谢你能来，不遗憾你走开》</h1><h2 id="真爱从不是偶尔想起"><a href="#真爱从不是偶尔想起" class="headerlink" title="真爱从不是偶尔想起"></a>真爱从不是偶尔想起</h2><p>倒追来的男神，相处一月后分开，内心不死、死缠不休。四年后，男神的主动联系是否能够算作爱。</p>
<h2 id="最深的伤害不是突然摊牌的分手"><a href="#最深的伤害，不是突然摊牌的分手" class="headerlink" title="最深的伤害，不是突然摊牌的分手"></a>最深的伤害，不是突然摊牌的分手</h2><p>一起实习的朋友，每天与电话中的男友如胶似漆，好不快活。而后认识了男医师，便移花别种，男友的电话能躲则躲，躲不过就找个理由敷衍。</p>
<p>我问她，为什么不分手呢？她说，在一起五年了，找不到理由。</p>
<p>或许，最深的伤害，不是突然摊牌，而是我在这心心念念地规划未来，你在那犹犹豫豫地谋划分开。</p>
<h1 id="程序员必读之软件架构"><a href="#《程序员必读之软件架构》" class="headerlink" title="《程序员必读之软件架构》"></a>《程序员必读之软件架构》</h1><h2 id="草图要有层次"><a href="#草图要有层次" class="headerlink" title="草图要有层次"></a>草图要有层次</h2><p>一张复杂而全面的草图，不如多张各有侧重点的草图更容易被接受。使用面向对象技术的软件，常见的抽象层次包括：类，组件，容器，系统。</p>
<p>类是软件的最小组成单位；<br>组件由一到多个类组成，实现某种特定的功能；<br>容器包括多个互相协作的组件，来提供某种单一的服务；<br>系统是多个容器的协作结果，对应某种业务应用。</p>
<h2 id="c4"><a href="#C4" class="headerlink" title="C4"></a>C4</h2><p>C4是我（书作者）描述架构时常用的抽象层次：Class、Component、Container、Context。</p>
<h1 id="一炮走红的国家"><a href="#《一炮走红的国家》" class="headerlink" title="《一炮走红的国家》"></a>《一炮走红的国家》</h1><h2 id="中国的经济很难再高速发展"><a href="#中国的经济很难再高速发展" class="headerlink" title="中国的经济很难再高速发展"></a>中国的经济很难再高速发展</h2><p>乐观的人总觉着中国政府抑制了人民的消费意愿。因此，即便出口下降，只要放开内需，依然可以维持高速发展。</p>
<p>但这些人其实是无视了实际的数据——中国的国内消费增长率为每年9%，这个数字高于79年代日本的8%，与80年代的中国台湾相同。这说明，中国的内需从来没有被抑制过，只是相比于出口16%的增长显得低而已。</p>
<h2 id="中国的经济也不会立即停滞"><a href="#中国的经济也不会立即停滞" class="headerlink" title="中国的经济也不会立即停滞"></a>中国的经济也不会立即停滞</h2><p>不过情况也远非悲观者所认为的，中国将如日本一样在经济崩溃后发展停滞。毕竟相比日本，中国的现代化建设起步晚、起点低，有更大的发展空间。</p>
<h1 id="刻意练习"><a href="#《刻意练习》" class="headerlink" title="《刻意练习》"></a>《刻意练习》</h1><h2 id="人类在不停进步过去的辉煌纪录放到今天只是平平"><a href="#人类在不停进步，过去的辉煌纪录放到今天，只是平平" class="headerlink" title="人类在不停进步，过去的辉煌纪录放到今天，只是平平"></a>人类在不停进步，过去的辉煌纪录放到今天，只是平平</h2><p>1908年的马拉松世界纪录，放置今日，几乎没有参赛资格。<br>1908年的跳水项目中，翻腾两周被列为危险动作，如今这只是入门级的动作。<br>20世纪30年代，某音乐大师的《肖邦24首练习曲》，尚不如现今的儿童表演者。<br>20世纪70年代，背诵圆周率小数点后511位是件史无前例的事，21世纪日本的原口证却背诵了10万个。</p>
<p>世界的记录总在进步，并不是因为人类的机能变强了，只是人类更懂得如何训练了。</p>
<div class="hr-sect">Idea (～￣▽￣)～ Spreading</div>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;hr-sect&quot;&gt;Hack ╮(￣▽￣)╭ News&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Tech (￣▽￣)~* Learning&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Book ╰(￣▽￣)╭ Readin
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>2017-05-20</title>
    <link href="http://blog.sin5th.com/2017/05/20/2017-05-20/"/>
    <id>http://blog.sin5th.com/2017/05/20/2017-05-20/</id>
    <published>2017-05-20T14:28:29.000Z</published>
    <updated>2017-05-20T15:55:02.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hr-sect">Hack ╮(￣▽￣)╭ News</div>



<div class="hr-sect">Tech (￣▽￣)~* Learning</div>



<div class="hr-sect">Book ╰(￣▽￣)╭ Reading</div>

<h1 id="很感谢你能来不遗憾你走开"><a href="#《很感谢你能来，不遗憾你走开》" class="headerlink" title="《很感谢你能来，不遗憾你走开》"></a>《很感谢你能来，不遗憾你走开》</h1><h2 id="为了合群"><a href="#为了合群" class="headerlink" title="为了合群"></a>为了合群</h2><p>为了不被说成孤僻的人，事事应允，事事迁就。如果为融入一个集体需要放弃自己的需要，这往往是堕落的开始。</p>
<h2 id="同道中人合而不群"><a href="#同道中人，合而不群" class="headerlink" title="同道中人，合而不群"></a>同道中人，合而不群</h2><p>当你成为了自己，确实地提升后，还会有意气相投之人。</p>
<h1 id="程序员必读之软件架构"><a href="#《程序员必读之软件架构》" class="headerlink" title="《程序员必读之软件架构》"></a>《程序员必读之软件架构》</h1><h2 id="草图要表意完整-统一"><a href="#草图要表意完整、统一" class="headerlink" title="草图要表意完整、统一"></a>草图要表意完整、统一</h2><p>只在图中的某几个框体上标注技术（比如编程语言）会让人感到困惑，究竟是因为其他的框体也同属于表明技术的模块，还是有什么别的用意。如果是前者，那么应该用更大的框将他们括起来，保证同围度的框体在架构上也保持着相等的粒度。</p>
<h2 id="草图要表意简洁"><a href="#草图要表意简洁" class="headerlink" title="草图要表意简洁"></a>草图要表意简洁</h2><p>过多的框线会让人晕头转向，他们即找了解架构不到入口，也不能在理解的过程中拥有连贯的思维（因为总会被多余的连线吸引走）。</p>
<h2 id="草图要有效率-有意义"><a href="#草图要有效率、有意义" class="headerlink" title="草图要有效率、有意义"></a>草图要有效率、有意义</h2><p>visio 在绘制架构图中，除了增加学习成本之外，没有太多好处。那些方方正正、垒墙式的模块，也只能让人炫目，不足以表达架构的意义。</p>
<h1 id="一炮走红的国家"><a href="#《一炮走红的国家》" class="headerlink" title="《一炮走红的国家》"></a>《一炮走红的国家》</h1><h2 id="中国更担心社会动荡"><a href="#中国更担心社会动荡" class="headerlink" title="中国更担心社会动荡"></a>中国更担心社会动荡</h2><p>让一部分人先富起来的政策方针将中国经济推上了快速发展的轨道，但贫富差距的不断增大让社会仇富心理日益壮大。继续维持高速发展所带来的社会不稳定，并不是执政党愿意看到的结果。</p>
<h2 id="中国的经济形式没那么好"><a href="#中国的经济形式，没那么好" class="headerlink" title="中国的经济形式，没那么好"></a>中国的经济形式，没那么好</h2><p>中国的政府债务约合国内生产总值的30%，表面上看起来十分健康。但如果算上“影子银行业”，负债占比可能达到200%，这对于发展中国家来说太高了。</p>
<p>另外，从上海股市的反应，2011年与2006年基本处于同一水平。这代表了国内投资人对未来的信心。</p>
<h2 id="放权图发展的邓小平时代结束"><a href="#放权图发展的邓小平时代，结束" class="headerlink" title="放权图发展的邓小平时代，结束"></a>放权图发展的邓小平时代，结束</h2><p>邓小平及其继任者江泽民、再后继者胡锦涛，代表了一个经济发展（几乎）高于一切的时代。空间平衡（发展内地）和收入均衡（最低收入保障）逐渐取代了经济发展的地位。让生活更容易，而不是让经济更具有竞争力，成为了新的目标。</p>
<h2 id="经济发展与社会体制无关"><a href="#经济发展与社会体制无关" class="headerlink" title="经济发展与社会体制无关"></a>经济发展与社会体制无关</h2><p>有人觉得自由、民主是为经济发展带来好处的社会属性。但回顾过去30年世界上经济增速超过5%的国家，你就发现它们的体制五花八门，有民主制，有集权制，也有在两者间摇摆不定的，并且它们的数量并没有明显差别。</p>
<h1 id="刻意练习"><a href="#《刻意练习》" class="headerlink" title="《刻意练习》"></a>《刻意练习》</h1><h2 id="有目的练习突破短时记忆的极限"><a href="#有目的练习，突破短时记忆的极限" class="headerlink" title="有目的练习，突破短时记忆的极限"></a>有目的练习，突破短时记忆的极限</h2><p>斯蒂夫是卡耐基梅龙大学的一名普通学生，受邀参加我们的短时记忆实验。人的短时记忆一般在 7 到 8 之间，当我们以每秒1个的速度将英文字母念给斯蒂夫的时候，他大概能记住连续的7个，偶尔能达到8个。</p>
<p>在我们反复训练多次（4次）后，斯蒂夫笃信8个就是他的记忆极限。事实上，当时的心理学研究也支持这个结论。但随着我们实验的继续，当训练次数达到10次的时候，斯蒂夫奇迹般地取得突破，他有时能记住9个了。</p>
<p>训练的次数最终达到100次，史蒂夫的战绩达到了82。这是令人难以相信的结果，有人将字母1秒1个地读给你，读到第82个的时候，你还能完整地复述出听到的所有字母。但这是真实的成就，一个通过反复训练达到的成就。</p>
<div class="hr-sect">Idea (～￣▽￣)～ Spreading</div>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;hr-sect&quot;&gt;Hack ╮(￣▽￣)╭ News&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Tech (￣▽￣)~* Learning&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Book ╰(￣▽￣)╭ Readin
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>2017-05-19</title>
    <link href="http://blog.sin5th.com/2017/05/19/2017-05-19/"/>
    <id>http://blog.sin5th.com/2017/05/19/2017-05-19/</id>
    <published>2017-05-19T02:15:13.000Z</published>
    <updated>2017-05-19T06:02:46.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hr-sect">Hack ╮(￣▽￣)╭ News</div>



<div class="hr-sect">Tech (￣▽￣)~* Learning</div>



<div class="hr-sect">Book ╰(￣▽￣)╭ Reading</div>

<h1 id="很感谢你能来不遗憾你走开"><a href="#《很感谢你能来，不遗憾你走开》" class="headerlink" title="《很感谢你能来，不遗憾你走开》"></a>《很感谢你能来，不遗憾你走开》</h1><h2 id="何必秀在朋友圈"><a href="#何必秀在朋友圈" class="headerlink" title="何必秀在朋友圈"></a>何必秀在朋友圈</h2><p>从前，我们会总结生活，用心地写下一篇博客、一段文章。而今，却只有微信上粗炮烂制的朋友圈。</p>
<p>老公送了一捧花，亲手备了一桌菜，西国旅行的票根，南园休憩的新茶…</p>
<p>于己无义，于人无益。</p>
<h2 id="何必在朋友圈找慰藉"><a href="#何必在朋友圈找慰藉" class="headerlink" title="何必在朋友圈找慰藉"></a>何必在朋友圈找慰藉</h2><p>或许确实需要表达、需要安慰，但朋友圈中可有良师？真心求学会用广播？</p>
<p>所以，该干什么干什么，需要什么求什么才是真的。朋友圈不适合找安慰。</p>
<h2 id="如果晒请把结果也晒出来"><a href="#如果晒，请把结果也晒出来" class="headerlink" title="如果晒，请把结果也晒出来"></a>如果晒，请把结果也晒出来</h2><p>如果坚持晒，那请把坚持的后果也一并晒出来。这样也能警示他人，勿步后尘。</p>
<h1 id="程序员必读之软件架构"><a href="#《程序员必读之软件架构》" class="headerlink" title="《程序员必读之软件架构》"></a>《程序员必读之软件架构》</h1><h2 id="草图不是推迟技术"><a href="#草图不是推迟技术" class="headerlink" title="草图不是推迟技术"></a>草图不是推迟技术</h2><p>画架构草图往往有个误区，就是“不限制技术选择”，仿佛架构就是一种描述，与实现毫无关系。</p>
<h2 id="草图中的部署与执行上下文"><a href="#草图中的部署与执行上下文" class="headerlink" title="草图中的部署与执行上下文"></a>草图中的部署与执行上下文</h2><p>草图中只标记了一个技术名词，却没有提到应用这项技术所需的条件。这可能让人忽视一些隐藏的代价。</p>
<h2 id="草图不要太多假设"><a href="#草图不要太多假设" class="headerlink" title="草图不要太多假设"></a>草图不要太多假设</h2><p>画了技术和运行环境，却不说明框体间的连线。它们之间的通信是 SOAP、RESTful、XML、RPC 还是什么别的，这些定义有助于考察架构的合理性。比如端口限制、非功能性需求、实现难度等等。</p>
<h1 id="一炮走红的国家"><a href="#《一炮走红的国家》" class="headerlink" title="《一炮走红的国家》"></a>《一炮走红的国家》</h1><h2 id="大得难以发展"><a href="#大得难以发展" class="headerlink" title="大得难以发展"></a>大得难以发展</h2><h3 id="中等收入陷阱"><a href="#中等收入陷阱" class="headerlink" title="中等收入陷阱"></a>中等收入陷阱</h3><p>低收入国家的发展可以通过模仿、借鉴先进国家的技术、经验，达到比先进国家更快速的发展。但随着距离缩小，能借鉴的越来越少，就更多地依赖于自身的创新与创造。</p>
<p>许多国家的经济在达到到领先国家的 10~30% 的时候，就会停滞，陷入中等收入陷阱。这在许多国家得到应验，中国没有理由不面临这个问题。</p>
<h3 id="经济规模与增长速度"><a href="#经济规模与增长速度" class="headerlink" title="经济规模与增长速度"></a>经济规模与增长速度</h3><p>大经济体发展所需的能量大于小经济体，这个道理很容易理解。中国如此庞然大物，继续保持高速发展，所需的能量将越来越多。</p>
<h3 id="人口优势变劣势"><a href="#人口优势变劣势" class="headerlink" title="人口优势变劣势"></a>人口优势变劣势</h3><p>中国有两次人口洪流，分别在50年代和70年代。第一次因战后恢复开始，因自然灾害结束；第二次因毛泽东开始，因计划生育结束。</p>
<p>随着第二次人口洪流的退去，中国农村的青壮劳动力迅速减少，城市中从业者的议价资本上升，也就是说企业需要付更多的工资来雇佣同等的人。廉价劳动力的消失会将市场推向印度这样的国家。</p>
<p>另外，在人口洪流时出生的人不久后将彻底退出劳动力市场，并开始享受社会福利。过去的人口优势变成了将来的劣势。</p>
<h1 id="刻意练习"><a href="#《刻意练习》" class="headerlink" title="《刻意练习》"></a>《刻意练习》</h1><h2 id="天才更懂得如何训练"><a href="#天才更懂得如何训练" class="headerlink" title="天才更懂得如何训练"></a>天才更懂得如何训练</h2><p>雷阿伦对于“天才三分手”这个评价并不认可，比起天才，他觉得努力才是成就他辉煌战绩的主因。</p>
<div class="hr-sect">Idea (～￣▽￣)～ Spreading</div>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;hr-sect&quot;&gt;Hack ╮(￣▽￣)╭ News&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Tech (￣▽￣)~* Learning&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Book ╰(￣▽￣)╭ Readin
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>2017-05-18</title>
    <link href="http://blog.sin5th.com/2017/05/18/2017-05-18/"/>
    <id>http://blog.sin5th.com/2017/05/18/2017-05-18/</id>
    <published>2017-05-18T06:20:25.000Z</published>
    <updated>2017-05-18T14:45:21.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hr-sect">Hack ╮(￣▽￣)╭ News</div>



<div class="hr-sect">Tech (￣▽￣)~* Learning</div>



<div class="hr-sect">Book ╰(￣▽￣)╭ Reading</div>

<h1 id="很感谢你能来不遗憾你走开"><a href="#《很感谢你能来，不遗憾你走开》" class="headerlink" title="《很感谢你能来，不遗憾你走开》"></a>《很感谢你能来，不遗憾你走开》</h1><h2 id="人前不揭短当众不催婚"><a href="#人前不揭短，当众不催婚" class="headerlink" title="人前不揭短，当众不催婚"></a>人前不揭短，当众不催婚</h2><p>学时好友毕业后便分道扬镳，联系方式从短信变成了请柬。盛装出席，却被问缘何一人？人前不揭短，当众不催婚。</p>
<h2 id="相识无憾"><a href="#相识无憾" class="headerlink" title="相识无憾"></a>相识无憾</h2><p>如果你结婚时，有人说了荒唐的理由，请不要伤心，因为她/他没有来是最好的局面。如果别人的婚礼你不愿意参加，又不想虚伪，请如实说你没时间。相交一场，相识无憾。</p>
<h2 id="晾人之苦"><a href="#晾人之苦" class="headerlink" title="晾人之苦"></a>晾人之苦</h2><p>别人不能参加你的婚礼，或许有她难言的苦衷。村里与我同龄的女孩结婚，妈妈礼到人不去。因为她既不愿被人追问我为什么还不结婚，也不愿意逼迫我为了结婚而结婚。</p>
<h1 id="程序员必读之软件架构"><a href="#《程序员必读之软件架构》" class="headerlink" title="《程序员必读之软件架构》"></a>《程序员必读之软件架构》</h1><h2 id="为什么用草图"><a href="#为什么用草图" class="headerlink" title="为什么用草图"></a>为什么用草图</h2><p>我们不愿意被复杂而全面的UML拖慢进度，但也需要一个交流想法的手段。草图是个很好的选择。</p>
<p>注意，草图不是艺术品，不要精雕细琢。草图也不是创建模型，不必面面俱到。草图是所有人的协作参与，要大家都懂。</p>
<h2 id="如何画草图"><a href="#如何画草图" class="headerlink" title="如何画草图"></a>如何画草图</h2><p>软件开发团队追求敏捷，舍弃了建模和文档，放弃了UML，却没有做好可视化和交流的指导工作。</p>
<p>桌旁案侧的草图总是时不时的出现，但他们往往是即兴发挥，毫无章法。仿佛我们对建模与文档的偏见，就连同它所使用的方法论也一并丢弃了。</p>
<p>交流，终究需要的是统一、标准的方式来保证理解与高效。因此，即便是草图，也应该有恰当程度的规矩。</p>
<h1 id="一炮走红的国家"><a href="#《一炮走红的国家》" class="headerlink" title="《一炮走红的国家》"></a>《一炮走红的国家》</h1><h2 id="4000-美元大关"><a href="#4000-美元大关" class="headerlink" title="4000 美元大关"></a>4000 美元大关</h2><p>人均 4000 美元是评判中等收入国家的标准。超过这个标准后，经济增长的难度就上升了一个台阶。</p>
<p>发达国家 2~3% 的经济增长所需要创造的价值，就相当于发展中国家两位数以上的经济增长所需要创造的价值。因此对于人均年收入 5000 美元的中国来说，7% 以下的经济增长所意味的，实际是倒退。</p>
<h2 id="美国的机遇"><a href="#美国的机遇" class="headerlink" title="美国的机遇"></a>美国的机遇</h2><p>发展中国家的发展引人入胜，但这并不是可持续、可复制的。美国的经济复苏，又拥有社交网络、人工智能这两个新兴科技，因此仍在世界经济中发挥着主导作用。</p>
<h2 id="中国的狂热与温和"><a href="#中国的狂热与温和" class="headerlink" title="中国的狂热与温和"></a>中国的狂热与温和</h2><p>在过去的几十年间，中国连续保持着两位数的经济增长，这种发展势头将中国从低收入国家的泥潭中就出来。</p>
<p>对于这种势头能否继续保持，人们通常抱有极端心态——极好或极坏。在前者的认知中，中国的农村人口会继续涌向城市，房地产价格保持增长；后者则觉得现在的中国与70年代的日本，情况相似。</p>
<p>从理性的角度看：中国的铁路总公里数已与美国相距不多，基建投入的空间日趋饱和；随着欧美等国的经济衰落，出口市场逐渐萎缩；2008年，总书记温家宝直接地表达了放慢经济增长的意见。</p>
<p>不过，外界一部分人仍然认为，即使不做有目的性的计划，中国经济也仍然会和之前一样，保持两位数的增长。</p>
<h1 id="刻意练习"><a href="#《刻意练习》" class="headerlink" title="《刻意练习》"></a>《刻意练习》</h1><h2 id="长时记忆"><a href="#长时记忆" class="headerlink" title="长时记忆"></a>长时记忆</h2><p>长时记忆是我们将所学技能进行特殊管理，使我们能快速回忆起来的能力。锻炼这种能力，我们需要为术语赋予意义，真正理解他们的含义；之后把许多术语关联起来，形成结构化的知识；最后反复修正、提炼已形成的知识。</p>
<h2 id="隐形知识"><a href="#隐形知识" class="headerlink" title="隐形知识"></a>隐形知识</h2><p>不难发现，有些技能很容易找到锻炼的方法，比如下棋、弹琴、踢球，只需要反复地思考、验证；但有些技能却并非如此，比如管理、销售，很难说通过练习讲话、沟通就能达到效果。这种差异是由于隐性知识的需求量。</p>
<p>因此，有学者认为：人的学习受到情境的制约或促进。所以你的知识用在哪里，你就在哪里学习。找到学习共同体、积极实践、模仿榜样、拓展实践场景就成了复杂技能的刻意练习方法。</p>
<h2 id="天才"><a href="#天才" class="headerlink" title="天才"></a>天才</h2><h3 id="天才存在吗"><a href="#天才存在吗" class="headerlink" title="天才存在吗"></a>天才存在吗</h3><p>莫扎特有一种称作“绝对音高”的能力，可以准确说出声音的实际音高。这种技能可谓万中无一，当真是专属于天才的恩赐。</p>
<p>但是有研究发现，说话时广泛使用声调表达含义的地区（比如中国、泰国）比不用音调的地区，拥有绝对音高的人比例要高。或者这些人拥有奇特的基因，或者声调的运用影响了绝对音高的展现概率。</p>
<h3 id="天才可以复制吗"><a href="#天才可以复制吗" class="headerlink" title="天才可以复制吗"></a>天才可以复制吗</h3><p>一项来自日本的实验中，十余名6~8岁的儿童在经过特别的训练后，都展现出了“绝对音高”。因此，天才的技能是可以通过训练得到的。</p>
<h3 id="有不能复制的天才吗"><a href="#有不能复制的天才吗" class="headerlink" title="有不能复制的天才吗"></a>有不能复制的天才吗</h3><p>回顾莫扎特的天才事实。他在童年时所受的音乐教育，相比于上述试验中的儿童，只多不少。所以莫扎特的天才也更多地来自于练习，而非天赐。</p>
<div class="hr-sect">Idea (～￣▽￣)～ Spreading</div>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;hr-sect&quot;&gt;Hack ╮(￣▽￣)╭ News&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Tech (￣▽￣)~* Learning&lt;/div&gt;



&lt;div class=&quot;hr-sect&quot;&gt;Book ╰(￣▽￣)╭ Readin
    
    </summary>
    
      <category term="日志" scheme="http://blog.sin5th.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>成长感悟</title>
    <link href="http://blog.sin5th.com/2017/05/17/%E6%88%90%E9%95%BF%E6%84%9F%E6%82%9F/"/>
    <id>http://blog.sin5th.com/2017/05/17/成长感悟/</id>
    <published>2017-05-17T08:12:52.000Z</published>
    <updated>2017-05-17T08:17:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="那一年失去的标杆"><a href="#那一年失去的标杆" class="headerlink" title="那一年失去的标杆"></a>那一年失去的标杆</h1><h1 id="那一年喜欢上浪费时间"><a href="#那一年，喜欢上浪费时间" class="headerlink" title="那一年，喜欢上浪费时间"></a>那一年，喜欢上浪费时间</h1><h1 id="善用自己的优缺点"><a href="#善用自己的优缺点" class="headerlink" title="善用自己的优缺点"></a>善用自己的优缺点</h1><h1 id="匀速呼吸拒绝激动"><a href="#匀速呼吸，拒绝激动" class="headerlink" title="匀速呼吸，拒绝激动"></a>匀速呼吸，拒绝激动</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;那一年失去的标杆&quot;&gt;&lt;a href=&quot;#那一年失去的标杆&quot; class=&quot;headerlink&quot; title=&quot;那一年失去的标杆&quot;&gt;&lt;/a&gt;那一年失去的标杆&lt;/h1&gt;&lt;h1 id=&quot;那一年喜欢上浪费时间&quot;&gt;&lt;a href=&quot;#那一年，喜欢上浪费时间&quot; class=
    
    </summary>
    
      <category term="成长感悟" scheme="http://blog.sin5th.com/categories/%E6%88%90%E9%95%BF%E6%84%9F%E6%82%9F/"/>
    
    
  </entry>
  
</feed>
